!function(n){"use strict";function q(e,n,r){return r.a=e,r.f=n,r}function s(r){return q(2,r,function(n){return function(e){return r(n,e)}})}function d(t){return q(3,t,function(r){return function(n){return function(e){return t(r,n,e)}}})}function u(o){return q(4,o,function(t){return function(r){return function(n){return function(e){return o(t,r,n,e)}}}})}function l(a){return q(5,a,function(o){return function(t){return function(r){return function(n){return function(e){return a(o,t,r,n,e)}}}}})}function Z(i){return q(6,i,function(a){return function(o){return function(t){return function(r){return function(n){return function(e){return i(a,o,t,r,n,e)}}}}}})}function R(c){return q(7,c,function(i){return function(a){return function(o){return function(t){return function(r){return function(n){return function(e){return c(i,a,o,t,r,n,e)}}}}}}})}function t(l){return q(8,l,function(c){return function(i){return function(a){return function(o){return function(t){return function(r){return function(n){return function(e){return l(c,i,a,o,t,r,n,e)}}}}}}}})}function z(e,n,r){return 2===e.a?e.f(n,r):e(n)(r)}function $(e,n,r,t){return 3===e.a?e.f(n,r,t):e(n)(r)(t)}function V(e,n,r,t,o){return 4===e.a?e.f(n,r,t,o):e(n)(r)(t)(o)}function S(e,n,r,t,o,a){return 5===e.a?e.f(n,r,t,o,a):e(n)(r)(t)(o)(a)}function F(e,n,r,t,o,a,i){return 6===e.a?e.f(n,r,t,o,a,i):e(n)(r)(t)(o)(a)(i)}function E(e,n,r,t,o,a,i,c){return 7===e.a?e.f(n,r,t,o,a,i,c):e(n)(r)(t)(o)(a)(i)(c)}function f(e,n){for(var r,t=[],o=I(e,n,0,t);o&&(r=t.pop());o=I(r.a,r.b,0,t));return o}function I(e,n,r,t){if(e!==n){if("object"!=typeof e||null===e||null===n)return"function"==typeof e&&ee(5),!1;if(100<r)t.push({a:e,b:n});else for(var o in e.$<0&&(e=et(e),n=et(n)),e)if(!I(e[o],n[o],r+1,t))return!1}return!0}function m(e,n,r){if("object"!=typeof e)return e===n?0:e<n?-1:1;if(void 0===e.$)return(r=(r=m(e.a,n.a))||m(e.b,n.b))||m(e.c,n.c);for(;e.b&&n.b&&!(r=m(e.a,n.a));e=e.b,n=n.b);return r||(e.b?1:n.b?-1:0)}var G=s(function(e,n){e=m(e,n);return e<0?Xr:e?Kr:Qr}),j=0;function v(e,n){var r,t={};for(r in e)t[r]=e[r];for(r in n)t[r]=n[r];return t}function H(e,n){if("string"==typeof e)return e+n;if(!e.b)return n;var r={$:1,a:e.a,b:n};e=e.b;for(var t=r;e.b;e=e.b)t=t.b={$:1,a:e.a,b:n};return r}var p={$:0};function O(e,n){return{$:1,a:e,b:n}}var U=s(O);function g(e){for(var n=p,r=e.length;r--;)n={$:1,a:e[r],b:n};return n}function W(e){for(var n=[];e.b;e=e.b)n.push(e.a);return n}var Q=d(function(e,n,r){for(var t=[];n.b&&r.b;n=n.b,r=r.b)t.push(z(e,n.a,r.a));return g(t)}),K=s(function(r,e){return g(W(e).sort(function(e,n){e=z(r,e,n);return e===Qr?0:e===Xr?-1:1}))});var X=d(function(e,n,r){for(var t=Array(e),o=0;o<e;o++)t[o]=r(n+o);return t}),J=s(function(e,n){for(var r=Array(e),t=0;t<e&&n.b;t++)r[t]=n.a,n=n.b;return r.length=t,{a:r,b:n}});function ee(e){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+e+".md")}var ne=s(Math.pow),e=Math.cos,re=Math.sin,te=Math.tan;var oe=Math.ceil,ae=Math.floor,ie=Math.round,ce=Math.sqrt,le=Math.log;var ue=s(function(e,n){return n.split(e)}),fe=s(function(e,n){return n.join(e)});function se(e){return e+""}var de={$:2,b:function(e){return"number"==typeof e?at(e):b("a FLOAT",e)}},me={$:2,b:function(e){return"string"==typeof e?at(e):e instanceof String?at(e+""):b("a STRING",e)}};var ve=s(function(e,n){return{$:6,d:e,b:n}});var pe=s(function(e,n){return{$:9,f:e,g:[n]}}),ge=d(function(e,n,r){return{$:9,f:e,g:[n,r]}}),he=s(h);function h(e,n){switch(e.$){case 2:return e.b(n);case 5:return null===n?at(e.c):b("null",n);case 3:return xe(n)?be(e.b,n,g):b("a LIST",n);case 4:return xe(n)?be(e.b,n,Ce):b("an ARRAY",n);case 6:var r=e.d;return"object"==typeof n&&null!==n&&r in n?(a=h(e.b,n[r]),y(a)?a:nt(z(tt,r,a.a))):b("an OBJECT with a field named `"+r+"`",n);case 7:r=e.e;return xe(n)?r<n.length?(a=h(e.b,n[r]),y(a)?a:nt(z(ot,r,a.a))):b("a LONGER array. Need index "+r+" but only see "+n.length+" entries",n):b("an ARRAY",n);case 8:if("object"!=typeof n||null===n||xe(n))return b("an OBJECT",n);var t,o=p;for(t in n)if(n.hasOwnProperty(t)){var a=h(e.b,n[t]);if(!y(a))return nt(z(tt,t,a.a));o={$:1,a:{a:t,b:a.a},b:o}}return at(gt(o));case 9:for(var i=e.f,c=e.g,l=0;l<c.length;l++){a=h(c[l],n);if(!y(a))return a;i=i(a.a)}return at(i);case 10:a=h(e.b,n);return y(a)?h(e.h(a.a),n):a;case 11:for(var u=p,f=e.g;f.b;f=f.b){a=h(f.a,n);if(y(a))return a;u={$:1,a:a.a,b:u}}return nt(it(gt(u)));case 1:return nt(z(rt,e.a,n));case 0:return at(e.a)}}function be(e,n,r){for(var t=n.length,o=Array(t),a=0;a<t;a++){var i=h(e,n[a]);if(!y(i))return nt(z(ot,a,i.a));o[a]=i.a}return at(r(o))}function xe(e){return Array.isArray(e)||"undefined"!=typeof FileList&&e instanceof FileList}function Ce(n){return z(Vt,n.length,function(e){return n[e]})}function b(e,n){return nt(z(rt,"Expecting "+e,n))}function Pe(e,n){if(e===n)return!0;if(e.$!==n.$)return!1;switch(e.$){case 0:case 1:return e.a===n.a;case 2:return e.b===n.b;case 5:return e.c===n.c;case 3:case 4:case 8:return Pe(e.b,n.b);case 6:return e.d===n.d&&Pe(e.b,n.b);case 7:return e.e===n.e&&Pe(e.b,n.b);case 9:return e.f===n.f&&ye(e.g,n.g);case 10:return e.h===n.h&&Pe(e.b,n.b);case 11:return ye(e.g,n.g)}}function ye(e,n){var r=e.length;if(r!==n.length)return!1;for(var t=0;t<r;t++)if(!Pe(e[t],n[t]))return!1;return!0}function Te(e){return{$:0,a:e}}var Le=s(function(e,n){return{$:3,b:e,d:n}});var Me=0;function we(e){e={$:0,e:Me++,f:e,g:null,h:[]};return Se(e),e}function De(n){return{$:2,b:function(e){e({$:0,a:we(n)})},c:null}}function Ne(e,n){e.h.push(n),Se(e)}var ze=s(function(n,r){return{$:2,b:function(e){Ne(n,r),e({$:0,a:j})},c:null}});var $e=!1,Ve=[];function Se(e){if(Ve.push(e),!$e){for($e=!0;e=Ve.shift();)!function(n){for(;n.f;){var e=n.f.$;if(0===e||1===e){for(;n.g&&n.g.$!==e;)n.g=n.g.i;if(!n.g)return;n.f=n.g.b(n.f.a),n.g=n.g.i}else{if(2===e)return n.f.c=n.f.b(function(e){n.f=e,Se(n)});if(5===e){if(0===n.h.length)return;n.f=n.f.b(n.h.shift())}else n.g={$:3===e?0:1,b:n.f.b,i:n.g},n.f=n.f.d}}}(e);$e=!1}}function Ye(e,n,r,t,o,a){var e=z(he,e,n?n.flags:void 0),i=(y(e)||ee(2),{}),n=r(e.a),c=n.a,l=a(u,c),r=function(e,n){var r,t;for(t in _e){var o=_e[t];o.a&&((r=r||{})[t]=o.a(t,n)),e[t]=function(e,n){var t={g:n,h:void 0},o=e.c,a=e.d,i=e.e,c=e.f;function l(r){return z(Le,l,{$:5,b:function(e){var n=e.a;return 0===e.$?$(a,t,n,r):i&&c?V(o,t,n.i,n.j,r):$(o,t,i?n.i:n.j,r)}})}return t.h=we(z(Le,l,e.b))}(o,n)}return r}(i,u);function u(e,n){e=z(t,e,c);l(c=e.a,n),Fe(i,e.b,o(c))}return Fe(i,n.b,o(c)),r?{ports:r}:{}}var _e={};var Ae=s(function(n,r){return{$:2,b:function(e){n.g(r),e({$:0,a:j})},c:null}}),Be=s(function(e,n){return z(ze,e.h,{$:0,a:n})});function ke(n){return function(e){return{$:1,k:n,l:e}}}function qe(e){return{$:2,m:e}}var Ze=[],Re=!1;function Fe(e,n,r){if(Ze.push({p:e,q:n,r:r}),!Re){Re=!0;for(var t;t=Ze.shift();)!function(e,n,r){var t,o={};for(t in Ee(!0,n,o,null),Ee(!1,r,o,null),e)Ne(e[t],{$:"fx",a:o[t]||{i:p,j:p}})}(t.p,t.q,t.r);Re=!1}}function Ee(e,n,r,t){switch(n.$){case 1:var o=n.k,a=function(e,n,r,t){function o(e){for(var n=r;n;n=n.t)e=n.s(e);return e}return z(e?_e[n].e:_e[n].f,o,t)}(e,o,t,n.l);return void(r[o]=function(e,n,r){return r=r||{i:p,j:p},e?r.i={$:1,a:n,b:r.i}:r.j={$:1,a:n,b:r.j},r}(e,a,r[o]));case 2:for(var i=n.m;i.b;i=i.b)Ee(e,i.a,r,t);return;case 3:Ee(e,n.o,r,{s:n.n,t:t})}}var Ie;var Ge="undefined"!=typeof document?document:{};function je(e){return{$:0,a:e}}var He=s(function(a,i){return s(function(e,n){for(var r=[],t=0;n.b;n=n.b){var o=n.a;t+=o.b||0,r.push(o)}return t+=r.length,{$:1,c:i,d:Je(e),e:r,f:a,b:t}})})(void 0),Oe=s(function(a,i){return s(function(e,n){for(var r=[],t=0;n.b;n=n.b){var o=n.a;t+=o.b.b||0,r.push(o)}return t+=r.length,{$:2,c:i,d:Je(e),e:r,f:a,b:t}})})(void 0);var Ue=s(function(e,n){return{$:"a0",n:e,o:n}}),We=s(function(e,n){return{$:"a1",n:e,o:n}}),Qe=s(function(e,n){return{$:"a3",n:e,o:n}}),Ke=/^script$/i;var Xe;function Je(e){for(var n={};e.b;e=e.b){var r,t=e.a,o=t.$,a=t.n,t=t.o;"a2"===o?"className"===a?en(n,a,t):n[a]=t:(r=n[o]||(n[o]={}),"a3"===o&&"class"===a?en(r,a,t):r[a]=t)}return n}function en(e,n,r){var t=e[n];e[n]=t?t+" "+r:r}function nn(e,n){var r=e.$;if(5===r)return nn(e.k||(e.k=e.m()),n);if(0===r)return Ge.createTextNode(e.a);if(4===r){for(var t=e.k,o=e.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:n};(i=nn(t,a)).elm_event_node_ref=a}else if(3===r)rn(i=e.h(e.g),n,e.d);else{var i=e.f?Ge.createElementNS(e.f,e.c):Ge.createElement(e.c);Ie&&"a"==e.c&&i.addEventListener("click",Ie(i)),rn(i,n,e.d);for(var c=e.e,l=0;l<c.length;l++)i.appendChild(nn(1===r?c[l]:c[l].b,n))}return i}function rn(e,n,r){for(var t in r){var o=r[t];"a1"===t?function(e,n){var r,t=e.style;for(r in n)t[r]=n[r]}(e,o):"a0"===t?function(e,n,r){var t,o=e.elmFs||(e.elmFs={});for(t in r){var a=r[t],i=o[t];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}e.removeEventListener(t,i)}i=function(l,e){function u(e){var n=u.q,r=h(n.a,e);if(y(r)){for(var t,n=At(n),r=r.a,o=n?n<3?r.a:r.aM:r,a=1==n?r.b:3==n&&r.dt,i=(a&&e.stopPropagation(),(2==n?r.b:3==n&&r.dj)&&e.preventDefault(),l);t=i.j;){if("function"==typeof t)o=t(o);else for(var c=t.length;c--;)o=t[c](o);i=i.p}i(o,a)}}return u.q=e,u}(n,a),e.addEventListener(t,i,Xe&&{passive:At(a)<2}),o[t]=i}else e.removeEventListener(t,i),o[t]=void 0}}(e,n,o):"a3"===t?function(e,n){for(var r in n){var t=n[r];void 0!==t?e.setAttribute(r,t):e.removeAttribute(r)}}(e,o):"a4"===t?function(e,n){for(var r in n){var t=n[r],o=t.f,t=t.o;void 0!==t?e.setAttributeNS(o,r,t):e.removeAttributeNS(o,r)}}(e,o):("value"!==t&&"checked"!==t||e[t]!==o)&&(e[t]=o)}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){Xe=!0}}))}catch(e){}function tn(e,n){var r=[];return _(e,n,r,0),r}function Y(e,n,r,t){n={$:n,r:r,s:t,t:void 0,u:void 0};return e.push(n),n}function _(e,n,r,t){if(e!==n){var o=e.$,a=n.$;if(o!==a){if(1!==o||2!==a)return void Y(r,0,t,n);n=function(e){for(var n=e.e,r=n.length,t=Array(r),o=0;o<r;o++)t[o]=n[o].b;return{$:1,c:e.c,d:e.d,e:t,f:e.f,b:e.b}}(n),a=1}switch(a){case 5:for(var i=e.l,c=n.l,l=i.length,u=l===c.length;u&&l--;)u=i[l]===c[l];if(u)return void(n.k=e.k);n.k=n.m();var f=[];return _(e.k,n.k,f,0),void(0<f.length&&Y(r,1,t,f));case 4:for(var s=e.j,d=n.j,m=!1,v=e.k;4===v.$;)m=!0,"object"!=typeof s?s=[s,v.j]:s.push(v.j),v=v.k;for(var p=n.k;4===p.$;)m=!0,"object"!=typeof d?d=[d,p.j]:d.push(p.j),p=p.k;return m&&s.length!==d.length?void Y(r,0,t,n):((m?function(e,n){for(var r=0;r<e.length;r++)if(e[r]!==n[r])return;return 1}(s,d):s===d)||Y(r,2,t,d),void _(v,p,r,t+1));case 0:return void(e.a!==n.a&&Y(r,3,t,n.a));case 1:return void on(e,n,r,t,cn);case 2:return void on(e,n,r,t,ln);case 3:if(e.h!==n.h)return void Y(r,0,t,n);f=an(e.d,n.d),f=(f&&Y(r,4,t,f),n.i(e.g,n.g));f&&Y(r,5,t,f)}}}function on(e,n,r,t,o){var a;e.c!==n.c||e.f!==n.f?Y(r,0,t,n):((a=an(e.d,n.d))&&Y(r,4,t,a),o(e,n,r,t))}function an(e,n,r){var t,o,a,i,c;for(o in e)"a1"===o||"a0"===o||"a3"===o||"a4"===o?(a=an(e[o],n[o]||{},o))&&((t=t||{})[o]=a):o in n?(a=e[o])===(i=n[o])&&"value"!==o&&"checked"!==o||"a0"===r&&function(e,n){return e.$==n.$&&Pe(e.a,n.a)}(a,i)||((t=t||{})[o]=i):(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:e[o].f,o:void 0}:"string"==typeof e[o]?"":null;for(c in n)c in e||((t=t||{})[c]=n[c]);return t}function cn(e,n,r,t){var o=e.e,a=n.e,e=o.length,n=a.length;n<e?Y(r,6,t,{v:n,i:e-n}):e<n&&Y(r,7,t,{v:e,e:a});for(var i=e<n?e:n,c=0;c<i;c++){var l=o[c];_(l,a[c],r,++t),t+=l.b||0}}function ln(e,n,r,t){for(var o=[],a={},i=[],c=e.e,l=n.e,u=c.length,f=l.length,s=0,d=0,m=t;s<u&&d<f;){var v=c[s],p=l[d],g=v.a,h=p.a,b=v.b,x=p.b,C=void 0,P=void 0;if(g===h)_(b,x,o,++m),m+=b.b||0,s++,d++;else{var y,T,L,M,w=c[s+1],D=l[d+1];if(w&&(T=w.b,P=h===(y=w.a)),D&&(M=D.b,C=g===(L=D.a)),C&&P)_(b,M,o,++m),fn(a,o,g,x,d,i),m+=b.b||0,sn(a,o,g,T,++m),m+=T.b||0,s+=2,d+=2;else if(C)m++,fn(a,o,h,x,d,i),_(b,M,o,m),m+=b.b||0,s+=1,d+=2;else if(P)sn(a,o,g,b,++m),m+=b.b||0,_(T,x,o,++m),m+=T.b||0,s+=2,d+=1;else{if(!w||y!==L)break;sn(a,o,g,b,++m),fn(a,o,h,x,d,i),m+=b.b||0,_(T,M,o,++m),m+=T.b||0,s+=2,d+=2}}}for(;s<u;){b=(v=c[s]).b;sn(a,o,v.a,b,++m),m+=b.b||0,s++}for(;d<f;){var N=N||[];fn(a,o,(p=l[d]).a,p.b,void 0,N),d++}(0<o.length||0<i.length||N)&&Y(r,8,t,{w:o,x:i,y:N})}var un="_elmW6BL";function fn(e,n,r,t,o,a){var i,c=e[r];c?1===c.c?(a.push({r:o,A:c}),c.c=2,_(c.z,t,i=[],c.r),c.r=o,c.s.s={w:i,A:c}):fn(e,n,r+un,t,o,a):(a.push({r:o,A:c={c:0,z:t,r:o,s:void 0}}),e[r]=c)}function sn(e,n,r,t,o){var a,i=e[r];i?0===i.c?(i.c=2,_(t,i.z,a=[],o),Y(n,9,o,{w:a,A:i})):sn(e,n,r+un,t,o):(a=Y(n,9,o,void 0),e[r]={c:1,z:t,r:o,s:a})}function dn(e,n,r,t){!function e(n,r,t,o,a,i,c){var l=t[o];var u=l.r;for(;u===a;){var f,s=l.$;if(1===s?dn(n,r.k,l.s,c):8===s?(l.t=n,l.u=c,0<(f=l.s.w).length&&e(n,r,f,0,a,i,c)):9===s?(l.t=n,l.u=c,(s=l.s)&&(s.A.s=n,0<(f=s.w).length)&&e(n,r,f,0,a,i,c)):(l.t=n,l.u=c),!(l=t[++o])||(u=l.r)>i)return o}var d=r.$;if(4===d){for(var m=r.k;4===m.$;)m=m.k;return e(n,m,t,o,a+1,i,n.elm_event_node_ref)}var v=r.e;var p=n.childNodes;for(var g=0;g<v.length;g++){var h=1===d?v[g]:v[g].b,b=++a+(h.b||0);if(a<=u&&u<=b&&(o=e(p[g],h,t,o,a,b,c),!(l=t[o])||(u=l.r)>i))return o;a=b}return o}(e,n,r,0,0,n.b,t)}function mn(e,n,r,t){return 0===r.length?e:(dn(e,n,r,t),vn(e,r))}function vn(e,n){for(var r=0;r<n.length;r++){var t=n[r],o=t.t,t=function(e,n){switch(n.$){case 0:return function(e,n,r){var t=e.parentNode,n=nn(n,r);n.elm_event_node_ref||(n.elm_event_node_ref=e.elm_event_node_ref);t&&n!==e&&t.replaceChild(n,e);return n}(e,n.s,n.u);case 4:return rn(e,n.u,n.s),e;case 3:return e.replaceData(0,e.length,n.s),e;case 1:return vn(e,n.s);case 2:return e.elm_event_node_ref?e.elm_event_node_ref.j=n.s:e.elm_event_node_ref={j:n.s,p:n.u},e;case 6:for(var r=n.s,t=0;t<r.i;t++)e.removeChild(e.childNodes[r.v]);return e;case 7:for(var o=(r=n.s).e,t=r.v,a=e.childNodes[t];t<o.length;t++)e.insertBefore(nn(o[t],n.u),a);return e;case 9:var i;return(r=n.s)?(void 0!==(i=r.A).r&&e.parentNode.removeChild(e),i.s=vn(e,r.w)):e.parentNode.removeChild(e),e;case 8:return function(e,n){for(var r=n.s,t=function(e,n){if(e){for(var r=Ge.createDocumentFragment(),t=0;t<e.length;t++){var o=e[t].A;r.appendChild(2===o.c?o.s:nn(o.z,n.u))}return r}}(r.y,n),o=(e=vn(e,r.w),r.x),a=0;a<o.length;a++){var i=o[a],c=i.A,c=2===c.c?c.s:nn(c.z,n.u);e.insertBefore(c,e.childNodes[i.r])}t&&e.appendChild(t);return e}(e,n);case 5:return n.s(e);default:ee(10)}}(o,t);o===e&&(e=t)}return e}function pn(e){if(3===e.nodeType)return{$:0,a:e.textContent};if(1!==e.nodeType)return{$:0,a:""};for(var n=p,r=e.attributes,t=r.length;t--;)var o=r[t],n={$:1,a:z(Qe,o.name,o.value),b:n};for(var a=e.tagName.toLowerCase(),i=p,c=e.childNodes,t=c.length;t--;)i={$:1,a:pn(c[t]),b:i};return $(He,a,n,i)}var gn=u(function(n,e,r,i){return Ye(e,i,n.fV,n.gw,n.gq,function(r,e){var t=n.gz,o=i.node,a=pn(o);return xn(e,function(e){var e=t(e),n=tn(a,e);o=mn(o,a,n,r),a=e})})}),hn="undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(e){clearTimeout(e)},bn="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(e){return setTimeout(e,1e3/60)};function xn(r,t){t(r);var o=0;function a(){o=1===o?0:(bn(a),t(r),1)}return function(e,n){r=e,n?(t(r),2===o&&(o=1)):(0===o&&bn(a),o=2)}}var Cn={addEventListener:function(){},removeEventListener:function(){}},Pn="undefined"!=typeof document?document:Cn,yn="undefined"!=typeof window?window:Cn,Tn=d(function(r,t,o){return De({$:2,b:function(e){function n(e){we(o(e))}return r.addEventListener(t,n,Xe&&{passive:!0}),function(){r.removeEventListener(t,n)}},c:null})}),Ln=s(function(e,n){e=h(e,n);return y(e)?ct(e.a):lt});Cn=s(function(r,t){return{$:2,b:function(e){var n=setInterval(function(){we(t)},r);return function(){clearInterval(n)}},c:null}});var Mn=0;function wn(e,n){for(;n.b;n=n.b)e(n.a)}function Dn(e){for(var n=0;e.b;e=e.b)n++;return n}function Nn(e){e.scissor.enabled&&(e.gl.disable(e.gl.SCISSOR_TEST),e.scissor.enabled=!1)}function zn(e){var n=e.colorMask;n.a&&n.b&&n.c&&n.d||(e.gl.colorMask(!0,!0,!0,!0),n.a=!0,n.b=!0,n.c=!0,n.d=!0)}var $n="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(e){setTimeout(e,1e3/60)},Vn=l(function(e,n,r,t,o){return{$:0,a:e,b:n,c:r,d:t,e:o}}),Sn=s(function(e,n){var r=e.blend;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.BLEND),r.enabled=!0),r.a===n.a&&r.d===n.d||(e.gl.blendEquationSeparate(n.a,n.d),r.a=n.a,r.d=n.d),r.b===n.b&&r.c===n.c&&r.e===n.e&&r.f===n.f||(e.gl.blendFuncSeparate(n.b,n.c,n.e,n.f),r.b=n.b,r.c=n.c,r.e=n.e,r.f=n.f),r.g===n.g&&r.h===n.h&&r.i===n.i&&r.j===n.j||(e.gl.blendColor(n.g,n.h,n.i,n.j),r.g=n.g,r.h=n.h,r.i=n.i,r.j=n.j)}),Yn=s(function(e,n){var r=e.depthTest;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.DEPTH_TEST),r.enabled=!0),r.a!==n.a&&(e.gl.depthFunc(n.a),r.a=n.a),r.b!==n.b&&(e.gl.depthMask(n.b),r.b=n.b),r.c===n.c&&r.d===n.d||(e.gl.depthRange(n.c,n.d),r.c=n.c,r.d=n.d)}),_n=s(function(e,n){var r=e.stencilTest;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.STENCIL_TEST),r.enabled=!0),r.d===n.d&&r.a===n.a&&r.b===n.b||(e.gl.stencilFuncSeparate(e.gl.FRONT,n.d,n.a,n.b),r.d=n.d),r.e===n.e&&r.f===n.f&&r.g===n.g||(e.gl.stencilOpSeparate(e.gl.FRONT,n.e,n.f,n.g),r.e=n.e,r.f=n.f,r.g=n.g),r.c!==n.c&&(e.gl.stencilMask(n.c),r.c=n.c),r.h===n.h&&r.a===n.a&&r.b===n.b||(e.gl.stencilFuncSeparate(e.gl.BACK,n.h,n.a,n.b),r.h=n.h,r.a=n.a,r.b=n.b),r.i===n.i&&r.j===n.j&&r.k===n.k||(e.gl.stencilOpSeparate(e.gl.BACK,n.i,n.j,n.k),r.i=n.i,r.j=n.j,r.k=n.k)}),An=s(function(e,n){var r=e.scissor;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.SCISSOR_TEST),r.enabled=!0),r.a===n.a&&r.b===n.b&&r.c===n.c&&r.d===n.d||(e.gl.scissor(n.a,n.b,n.c,n.d),r.a=n.a,r.b=n.b,r.c=n.c,r.d=n.d)}),Bn=s(function(e,n){var r=e.colorMask;r.toggle=e.toggle,r.enabled=!0,r.a===n.a&&r.b===n.b&&r.c===n.c&&r.d===n.d||(e.gl.colorMask(n.a,n.b,n.c,n.d),r.a=n.a,r.b=n.b,r.c=n.c,r.d=n.d)}),kn=s(function(e,n){var r=e.cullFace;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.CULL_FACE),r.enabled=!0),r.a!==n.a&&(e.gl.cullFace(n.a),r.a=n.a)}),qn=s(function(e,n){var r=e.polygonOffset;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===n.a&&r.b===n.b||(e.gl.polygonOffset(n.a,n.b),r.a=n.a,r.b=n.b)}),Zn=s(function(e,n){var r=e.sampleCoverage;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===n.a&&r.b===n.b||(e.gl.sampleCoverage(n.a,n.b),r.a=n.a,r.b=n.b)}),Rn=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],Fn=[function(e){e.blend.enabled&&(e.gl.disable(e.gl.BLEND),e.blend.enabled=!1)},function(e){e.depthTest.enabled&&(e.gl.disable(e.gl.DEPTH_TEST),e.depthTest.enabled=!1)},function(e){e.stencilTest.enabled&&(e.gl.disable(e.gl.STENCIL_TEST),e.stencilTest.enabled=!1)},Nn,zn,function(e){e.gl.disable(e.gl.CULL_FACE)},function(e){e.gl.disable(e.gl.POLYGON_OFFSET_FILL)},function(e){e.gl.disable(e.gl.SAMPLE_COVERAGE)},function(e){e.gl.disable(e.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function En(e,n,r){r=e.createShader(r);return e.shaderSource(r,"#extension GL_OES_standard_derivatives : enable\n"+n),e.compileShader(r),r}function In(e,n){switch(n){case e.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:e.FLOAT};case e.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:e.FLOAT};case e.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:e.FLOAT};case e.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:e.FLOAT};case e.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:e.FLOAT};case e.INT:return{size:1,arraySize:1,type:Int32Array,baseType:e.INT}}}function Gn(e,n,r,t){for(var c=r.a.dP,l=[],o=0;o<c;o++)l.push(String.fromCharCode(97+o));var a=In(e,n.type);if(void 0===a)throw Error("No info available for: "+n.type);var i=0,u=a.size*a.arraySize*c,f=new a.type(Dn(r.b)*u),r=(wn(function(e){!function(n,r,t,o,a){var i;if(1===c)for(i=0;i<r;i++)n[t++]=1===r?o[a]:o[a][i];else l.forEach(function(e){for(i=0;i<r;i++)n[t++]=1===r?o[e][a]:o[e][a][i]})}(f,a.size*a.arraySize,i,e,t[n.name]||n.name),i+=u},r.b),e.createBuffer());return e.bindBuffer(e.ARRAY_BUFFER,r),e.bufferData(e.ARRAY_BUFFER,f,e.STATIC_DRAW),r}function jn(e,n){var r,t;return 0<n.a.d_?(r=e.createBuffer(),t=function(e,n){var r,t=new Uint32Array(Dn(e)*n),o=0;return wn(function(e){if(1===n)t[o++]=e;else for(r=0;r<n;r++)t[o++]=e[String.fromCharCode(97+r)]},e),t}(n.c,n.a.d_),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,r),e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}):{numIndices:n.a.dP*Dn(n.b),indexBuffer:null,buffers:{}}}var Hn=s(function(b,e){var x=b.f,C=x.gl;return C&&(C.viewport(0,0,C.drawingBufferWidth,C.drawingBufferHeight),x.depthTest.b||(C.depthMask(!0),x.depthTest.b=!0),x.stencilTest.c!==x.STENCIL_WRITEMASK&&(C.stencilMask(x.STENCIL_WRITEMASK),x.stencilTest.c=x.STENCIL_WRITEMASK),Nn(x),zn(x),C.clear(C.COLOR_BUFFER_BIT|C.DEPTH_BUFFER_BIT|C.STENCIL_BUFFER_BIT),wn(function(e){if(e.d.b.b){var n,r,t;if(!(i=e.b.id&&e.c.id?x.programs[n=e.b.id+"#"+e.c.id]:i)){e.b.id?o=x.shaders[e.b.id]:e.b.id=Mn++,o||(o=En(C,e.b.src,C.VERTEX_SHADER),x.shaders[e.b.id]=o),e.c.id?a=x.shaders[e.c.id]:e.c.id=Mn++,a||(a=En(C,e.c.src,C.FRAGMENT_SHADER),x.shaders[e.c.id]=a);for(var o,a,i,c=function(e,n,r){var t=e.createProgram();if(e.attachShader(t,n),e.attachShader(t,r),e.linkProgram(t),e.getProgramParameter(t,e.LINK_STATUS))return t;throw"Link failed: "+e.getProgramInfoLog(t)+"\nvs info-log: "+e.getShaderInfoLog(n)+"\nfs info-log: "+e.getShaderInfoLog(r)}(C,o,a),l=((i={glProgram:c,attributes:Object.assign({},e.b.attributes,e.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(a,e,n,r){var t=n.glProgram,i=n.currentUniforms,c=0,l=e.f;for(var o={},u=a.getProgramParameter(t,a.ACTIVE_UNIFORMS),f=0;f<u;f++){var s=a.getActiveUniform(t,f);o[r[s.name]||s.name]=function(e,n){var r=n.name,t=a.getUniformLocation(e,r);switch(n.type){case a.INT:return function(e){i[r]!==e&&(a.uniform1i(t,e),i[r]=e)};case a.FLOAT:return function(e){i[r]!==e&&(a.uniform1f(t,e),i[r]=e)};case a.FLOAT_VEC2:return function(e){i[r]!==e&&(a.uniform2f(t,e[0],e[1]),i[r]=e)};case a.FLOAT_VEC3:return function(e){i[r]!==e&&(a.uniform3f(t,e[0],e[1],e[2]),i[r]=e)};case a.FLOAT_VEC4:return function(e){i[r]!==e&&(a.uniform4f(t,e[0],e[1],e[2],e[3]),i[r]=e)};case a.FLOAT_MAT4:return function(e){i[r]!==e&&(a.uniformMatrix4fv(t,!1,new Float32Array(e)),i[r]=e)};case a.SAMPLER_2D:var o=c++;return function(e){a.activeTexture(a.TEXTURE0+o);var n=l.textures.get(e);n||(n=e.fs(a),l.textures.set(e,n)),a.bindTexture(a.TEXTURE_2D,n),i[r]!==e&&(a.uniform1i(t,o),i[r]=e)};case a.BOOL:return function(e){i[r]!==e&&(a.uniform1i(t,e),i[r]=e)};default:return function(){}}}(t,s)}return o}(C,b,i,Object.assign({},e.b.uniforms,e.c.uniforms)),C.getProgramParameter(c,C.ACTIVE_ATTRIBUTES)),u=0;u<l;u++){var f=C.getActiveAttrib(c,u),s=C.getAttribLocation(c,f.name);i.activeAttributes.push(f),i.activeAttributeLocations.push(s)}x.programs[n=e.b.id+"#"+e.c.id]=i}x.lastProgId!==n&&(C.useProgram(i.glProgram),x.lastProgId=n),r=i.uniformSetters,Object.keys(t=e.e).forEach(function(e){var n=r[e];n&&n(t[e])});var d=x.buffers.get(e.d);for(d||(d=jn(C,e.d),x.buffers.set(e.d,d)),u=0;u<i.activeAttributes.length;u++){s=i.activeAttributeLocations[u],void 0===d.buffers[(f=i.activeAttributes[u]).name]&&(d.buffers[f.name]=Gn(C,f,e.d,i.attributes)),C.bindBuffer(C.ARRAY_BUFFER,d.buffers[f.name]);var m=In(C,f.type);if(1===m.arraySize)C.enableVertexAttribArray(s),C.vertexAttribPointer(s,m.size,m.baseType,!1,0,0);else for(var v=4*m.size,p=v*m.arraySize,g=0;g<m.arraySize;g++)C.enableVertexAttribArray(s+g),C.vertexAttribPointer(s+g,m.size,m.baseType,!1,p,v*g)}for(x.toggle=!x.toggle,wn(Gi(x),e.a),u=0;u<9;u++){var h=x[Rn[u]];h.toggle!==x.toggle&&h.enabled&&(Fn[u](x),h.enabled=!1,h.toggle=x.toggle)}d.indexBuffer?(C.bindBuffer(C.ELEMENT_ARRAY_BUFFER,d.indexBuffer),C.drawElements(e.d.a.ey,d.numIndices,C.UNSIGNED_INT,0)):C.drawArrays(e.d.a.ey,0,d.numIndices)}},b.g)),e});var On=d(function(e,n,r){return function(e,n,r,t){return{$:3,d:Je(e),g:n,h:r,i:t}}(n,{g:r,f:{},h:e},Un,Wn)});function Un(e){var n={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]},r=(wn(function(e){},e.h),Ge.createElement("canvas")),t=r.getContext&&(r.getContext("webgl",n.contextAttributes)||r.getContext("experimental-webgl",n.contextAttributes));return t&&void 0!==WeakMap?(n.sceneSettings.forEach(function(e){e(t)}),t.getExtension("OES_standard_derivatives"),t.getExtension("OES_element_index_uint"),e.f.gl=t,e.f.toggle=!1,e.f.blend={enabled:!1,toggle:!1},e.f.depthTest={enabled:!1,toggle:!1},e.f.stencilTest={enabled:!1,toggle:!1},e.f.scissor={enabled:!1,toggle:!1},e.f.colorMask={enabled:!1,toggle:!1},e.f.cullFace={enabled:!1,toggle:!1},e.f.polygonOffset={enabled:!1,toggle:!1},e.f.sampleCoverage={enabled:!1,toggle:!1},e.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},e.f.shaders=[],e.f.programs={},e.f.lastProgId=null,e.f.buffers=new WeakMap,e.f.textures=new WeakMap,e.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),$n(function(){return z(Hn,e,r)})):(r=Ge.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function Wn(e,n){return n.f=e.f,Hn(n)}var Qn=s(function(e,n){return new Float64Array([e,n])});new Float64Array(3),new Float64Array(3),new Float64Array(3);var Kn=d(function(e,n,r){return new Float64Array([e,n,r])});var Xn=s(function(e,n){return new Float64Array([n[0]*e,n[1]*e,n[2]*e])});var Jn=u(function(e,n,r,t){return new Float64Array([e,n,r,t])});new Float64Array(16),new Float64Array(16),new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);function er(e){return $(st,s(function(e,n){return n+1}),0,e)}function nr(e){return e}function rr(e){return e}function tr(e){return $(kt,Zt(C),T(p),e)}function or(e){return Kt(2*Qt*e)}function ar(e){return{$:0,a:e}}function ir(e){return{$:2,a:e}}function cr(e){return{$:3,a:e}}function lr(e){return{a:H(e.a?"w_":"d_",e.b),b:e}}function ur(e){return $(st,s(function(e,n){return $(co,e.a,e.b,n)}),Ht,e)}function fr(e){return e}function sr(e){return e}function dr(e){var n,r=z(P,D(e.Y),z(P,D(e.Z),D(e.fa)));return r?jo((n=e.Y/r)*n+(n=e.Z/r)*n+(n=e.fa/r)*n)*r:Ho}function mr(e){return e}function vr(e){return e.b?ct(e.a):lt}function pr(e){return Kt(Qt*(e/180))}function gr(e){return e.c9}function hr(e){return e.dD}function br(e){return e.fw}function x(e){return e}function xr(e){return function(e){return e}(e.fe)}function Cr(e){return e.fv}function Pr(e){return gr(e)}function yr(e){return{Y:-e.Y,Z:-e.Z,fa:-e.fa}}function Tr(e){return yr(hr(e))}function Lr(e){var n=e.b;return z(gi,1664525*e.a+n>>>0,n)}function Mr(e){return((e=277803737*((e=e.a)^e>>>4+(e>>>28)))>>>22^e)>>>0}function wr(e){var n,r,t,o,a,i,c,l;return-1===e.$&&-1===e.d.$&&-1===e.e.$?-1!==e.e.d.$||e.e.d.a?(t=(l=e.e).b,o=l.c,a=l.d,l=l.e,S(w,1,e.b,e.c,S(w,0,(n=e.d).b,n.c,n.d,n.e),S(w,0,t,o,a,l))):(t=(r=e.e).b,o=r.c,i=(a=r.d).d,c=a.e,l=r.e,S(w,0,a.b,a.c,S(w,1,e.b,e.c,S(w,0,(n=e.d).b,n.c,n.d,n.e),i),S(w,1,t,o,c,l))):e}function Dr(e){var n,r,t,o,a,i,c,l,u;return-1===e.$&&-1===e.d.$&&-1===e.e.$?-1!==e.d.d.$||e.d.d.a?(i=(u=e.e).b,c=u.c,l=u.d,u=u.e,S(w,1,n=e.b,r=e.c,S(w,0,(o=e.d).b,o.c,o.d,o=o.e),S(w,0,i,c,l,u))):(n=e.b,r=e.c,o=(t=e.d).e,i=(a=e.e).b,c=a.c,l=a.d,u=a.e,S(w,0,t.b,t.c,S(w,1,(a=t.d).b,a.c,a.d,a.e),S(w,1,n,r,o,S(w,0,i,c,l,u)))):e}function Nr(e){var n,r,t,o,a,i;return-1===e.$&&-1===e.d.$?(n=e.a,r=e.b,t=e.c,i=(o=e.d).d,a=e.e,1===o.a?-1!==i.$||i.a?-1===(i=wr(e)).$?(e=i.e,S(ao,i.a,i.b,i.c,Nr(i.d),e)):jt:S(w,n,r,t,Nr(o),a):S(w,n,r,t,Nr(o),a)):jt}function zr(e){return $(kt,zi,p,e)}function $r(e){return Oe(function(e){return Ke.test(e)?"p":e}(e))}function Vr(e){function n(e){return Ja(1e4*e)/100}var r=e.b,t=e.c,o=e.d;return e=g(["rgba(",c(n(e.a)),"%,",c(n(r)),"%,",c(n(t)),"%,",c(Ja(1e3*o)/1e3),")"]),z(ft,"",e)}function Sr(e){return e}function Yr(f){return function(u){return function(l){return function(c){return function(i){return function(a){return function(o){return function(t){return function(r){return function(n){return function(e){return{$:2,a:f,b:u,c:l,d:c,e:i,f:a,g:o,h:t,i:r,j:n,k:e}}}}}}}}}}}}function _r(e){return $(lc,{c$:e.c$,dm:e.dm,dA:e.dA},{bI:e.bI,bY:e.bY,b4:e.b4,b5:e.b5},{bI:e.bI,bY:e.bY,b4:e.b4,b5:e.b5})}function Ar(e){return S(k,g([_r(e),V(rc,!1,!1,!1,!1)]),cc,ac,ic,{})}function Br(e){return Ar({bI:7680,c$:15,dm:8,bY:516,dA:z(fc,2,e+4),b4:5386,b5:5386})}function kr(e){return{a:z(ri,xc(e),gc(e)),b:z(ri,Cc(e),hc(e)),c:z(ri,Pc(e),bc(e))}}function qr(e){return e}function Zr(e){return e}function Rr(e){return Ac(z(Bc,e,p))}function Fr(e){return V(tc,515,e.at,e.an,e.al)}function Er(e){return e}function Ir(n){var e=function(e){return e.gA}(n.fm),r=va({c9:Pr(e),dB:function(e){return pa(e)}(e),dC:function(e){return ga(e)}(e),dD:yr(Tr(e))}),t=Rr(n.fE);if(1===(r=V(Vc,r,1,lt,g([t]))).$)return p;var r=r.a,o=z(Oc,Hc,e),a=z(Aa,.99,z(Mc,N(n.fr),aa(bc(r)))),i=kr(r),i=dr($(Wa,i.a,i.b,i.c)),r=z(Aa,1.01,z(Nc,i,aa(Pc(r)))),e=(a=jc(r=z(Ec,n.fm,{fd:n.fd,fL:r,f4:a})).ep)?Zr(yr(Tr(e))):x(Pr(e)),c=(l=function(){var e=n.aQ;switch(e.$){case 0:return{a:0,b:0};case 1:return{a:1,b:0};case 2:return{a:2,b:0};case 3:return{a:3,b:e.a};case 4:return{a:4,b:e.a};default:return{a:5,b:0}}}()).a,l=l.b,u=z(Ki,n.aH,n.aT),i=Ji({ea:0,eb:e.Y,ec:Sc(u),ed:n.e$,ee:0,ef:e.Z,eg:Yc(u),eh:sr(i),ei:0,ej:e.fa,ek:_c(u),el:c,em:0,en:a,eo:0,ep:l}),f=F(nc,i,o,r,kc,t,{V:p,ai:p,ak:p}),s=n.aK;switch(s.$){case 0:var d=s.a;return zr(g([$(B,f.V,{a:d,b:Oi},pc),$(B,f.ai,Zc,pc)]));case 1:d=s.a;return zr(g([$(B,f.V,Zc,pc),g([qc]),$(B,f.ak,d.bO,oc),g([Br(0)]),$(B,f.V,{a:d,b:Oi},Rc),$(B,f.ai,Zc,pc)]));default:var d=s.a,m=s.b;return zr(g([$(B,f.V,{a:m,b:Oi},pc),g([qc]),z(dc,f.ak,d),$(Gc,f.V,m,er(d)),$(B,f.ai,Zc,pc)]))}}function Gr(e){return z(bl,0,{$:0,a:function(e){e=xl(e);return $(Qi,e.dl,e.cQ,e.cK)}(e)})}function jr(e){return e}function Hr(e){return{$:5,a:e}}function Or(e){var n=(t=kr(e)).a,r=t.b,t=t.c;return{fo:Er(function(e){return $(nu,Xl(e),Jl(e),eu(e))}(e)),fO:n/2,fP:r/2,fQ:t/2}}function Ur(e){return e.$?hl:z(mu,(e=e.a).bb,e.m)}var Wr,Qr=1,Kr=2,Xr=0,C=U,Jr=d(function(e,n,r){for(;;){if(-2===r.$)return n;var t=r.d,o=e,a=$(e,r.b,r.c,$(Jr,e,n,r.e));e=o,n=a,r=t}}),et=function(e){return $(Jr,d(function(e,n,r){return z(C,{a:e,b:n},r)}),p,e)},nt=function(e){return{$:1,a:e}},rt=s(function(e,n){return{$:3,a:e,b:n}}),tt=s(function(e,n){return{$:0,a:e,b:n}}),ot=s(function(e,n){return{$:1,a:e,b:n}}),at=function(e){return{$:0,a:e}},it=function(e){return{$:2,a:e}},ct=function(e){return{$:0,a:e}},lt={$:1},ut=se,ft=s(function(e,n){return z(fe,e,W(n))}),U=s(function(e,n){return g(z(ue,e,n))}),st=d(function(e,n,r){for(;;){if(!r.b)return n;var t=r.b,o=e,a=z(e,r.a,n);e=o,n=a,r=t}}),dt=Q,mt=d(function(e,n,r){for(;;){if(1<=m(e,n))return r;var t=e,o=n-1,a=z(C,n,r);e=t,n=o,r=a}}),vt=s(function(e,n){return $(mt,e,n,p)}),pt=s(function(e,n){return $(dt,e,z(vt,0,er(n)-1),n)}),gt=function(e){return $(st,C,p,e)},ht=u(function(e,n,r,t){return{$:0,a:e,b:n,c:r,d:t}}),bt=[],xt=oe,Ct=s(function(e,n){return le(n)/le(e)}),Pt=xt(z(Ct,2,32)),yt=V(ht,0,Pt,bt,bt),Tt=X,Lt=ae,Mt=function(e){return e.length},P=s(function(e,n){return 0<m(e,n)?e:n}),wt=J,Dt=s(function(e,n){for(;;){var r=z(wt,32,e),t=r.b,r=z(C,{$:0,a:r.a},n);if(!t.b)return gt(r);e=t,n=r}}),Nt=s(function(e,n){for(;;){var r=xt(n/32);if(1===r)return z(wt,32,e).a;e=z(Dt,e,p),n=r}}),zt=s(function(e,n){var r,t;return n.s?(t=Lt(z(Ct,32,(r=32*n.s)-1)),e=e?gt(n.F):n.F,e=z(Nt,e,n.s),V(ht,Mt(n.v)+r,z(P,5,t*Pt),e,n.v)):V(ht,Mt(n.v),Pt,bt,n.v)}),$t=l(function(e,n,r,t,o){for(;;){if(n<0)return z(zt,!1,{F:t,s:r/32|0,v:o});var a={$:1,a:$(Tt,32,n,e)};e=e,n=n-32,r=r,t=z(C,a,t),o=o}}),Vt=s(function(e,n){var r;return 0<e?S($t,n,e-(r=e%32)-32,e,p,$(Tt,r,e-r,n)):yt}),y=function(e){return!e.$},St=pe,Yt=ge,_t=function(e){return{$:0,a:e}},At=function(e){switch(e.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},T=Te,Q=T(0),Bt=u(function(e,n,r,t){var o,a,i,c;return t.b?(o=t.a,(t=t.b).b?(a=t.a,(t=t.b).b?(i=t.a,(t=t.b).b?(c=t.b,z(e,o,z(e,a,z(e,i,z(e,t.a,500<r?$(st,e,n,gt(c)):V(Bt,e,n,r+1,c)))))):z(e,o,z(e,a,z(e,i,n)))):z(e,o,z(e,a,n))):z(e,o,n)):n}),kt=d(function(e,n,r){return V(Bt,e,n,0,r)}),L=s(function(r,e){return $(kt,s(function(e,n){return z(C,r(e),n)}),p,e)}),M=Le,qt=s(function(n,e){return z(M,function(e){return T(n(e))},e)}),Zt=d(function(r,e,t){return z(M,function(n){return z(M,function(e){return T(z(r,n,e))},t)},e)}),Rt=Ae,Ft=s(function(e,n){return De(z(M,Rt(e),n))}),oe=d(function(e,n,r){return z(qt,function(e){return 0},tr(z(L,Ft(e),n)))}),X=(_e.Task={b:Q,c:oe,d:d(function(e,n,r){return T(0)}),e:s(function(e,n){return z(qt,e,n)}),f:void 0},ke("Task"),gn),Et={$:0},It=u(function(e,n,r,t){return{$:0,a:e,b:n,c:r,d:t}}),Gt=V(It,92/255,53/255,.4,1),jt={$:-2},Ht=jt,Ot=Ht,Ut=d(function(e,n,r){return{Y:e,Z:n,fa:r}}),Wt=qe(p),Qt=3.141592653589793,Kt=function(e){return e},Xt={$:4},Jt=qe,eo=d(function(e,n,r){return n(e(r))}),no=s(function(e,n){return{$:0,a:e,b:n}}),ro=s(function(e,n){return{eL:n,e0:e}}),ae=T(z(ro,Ht,Ht)),to=G,oo=s(function(e,n){for(;;){if(-2===n.$)return lt;var r=n.c,t=n.d,o=n.e;switch(z(to,e,n.b)){case 0:e=e,n=t;continue;case 1:return ct(r);default:e=e,n=o;continue}}}),w=l(function(e,n,r,t,o){return{$:-1,a:e,b:n,c:r,d:t,e:o}}),ao=l(function(e,n,r,t,o){var a,i,c,l;return-1!==o.$||o.a?-1!==t.$||t.a||-1!==t.d.$||t.d.a?S(w,e,n,r,t,o):(a=t.d,l=t.e,S(w,0,t.b,t.c,S(w,1,a.b,a.c,a.d,a.e),S(w,1,n,r,l,o))):(a=o.b,i=o.c,c=o.d,o=o.e,-1!==t.$||t.a?S(w,e,a,i,S(w,0,n,r,t,c),o):S(w,0,n,r,S(w,1,t.b,t.c,t.d,l=t.e),S(w,1,a,i,c,o)))}),io=d(function(e,n,r){if(-2===r.$)return S(w,0,e,n,jt,jt);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(z(to,e,o)){case 0:return S(ao,t,o,a,$(io,e,n,i),c);case 1:return S(w,t,o,n,i,c);default:return S(ao,t,o,a,i,$(io,e,n,c))}}),co=d(function(e,n,r){e=$(io,e,n,r);return-1!==e.$||e.a?e:S(w,1,e.b,e.c,e.d,e.e)}),lo=s(function(e,n){var r=e.a,e=e.b,t=z(oo,r,n);return $(co,r,1===t.$?g([e]):z(C,e,t.a),n)}),uo=function(r){return{$:2,b:function(e){var n=r.f;2===n.$&&n.c&&n.c(),r.f=null,e({$:0,a:j})},c:null}},fo=d(function(e,n,r){for(;;){if(-2===r.$)return n;var t=r.e,o=e,a=$(e,r.b,r.c,$(fo,e,n,r.d));e=o,n=a,r=t}}),so=Z(function(l,u,f,e,n,r){e=$(fo,d(function(e,n,r){for(;;){var t=r.a,o=r.b;if(!t.b)return{a:t,b:$(f,e,n,o)};var a=t.a,i=a.a,a=a.b,c=t.b;if(0<=m(i,e))return 0<m(i,e)?{a:t,b:$(f,e,n,o)}:{a:c,b:V(u,i,a,n,o)};e=e,n=n,r={a:c,b:$(l,i,a,o)}}}),{a:et(e),b:r},n),r=e.a,n=e.b;return $(st,s(function(e,n){return $(l,e.a,e.b,n)}),n,r)}),mo=Be,vo=Cn,po=De,go=d(function(n,e,r){var t,o;return e.b?(o=e.b,e=po(z(vo,t=e.a,z(mo,n,t))),z(M,function(e){return $(go,n,o,$(co,t,e,r))},e)):T(r)}),J=d(function(n,e,r){var r=r.eL,t=d(function(e,n,r){var t=r.c;return{a:r.a,b:r.b,c:z(M,function(e){return t},uo(n))}}),o=$(st,lo,Ht,e),e=F(so,d(function(e,n,r){var t=r.b,o=r.c;return{a:z(C,e,r.a),b:t,c:o}}),u(function(e,n,r,t){var o=t.c;return{a:t.a,b:$(co,e,r,t.b),c:o}}),t,o,r,{a:p,b:Ht,c:T(0)}),a=e.a,i=e.b;return z(M,function(e){return T(z(ro,o,e))},z(M,function(e){return $(go,n,a,i)},e.c))}),ho=rr,bo=(Wr=ho,{$:2,b:function(e){e({$:0,a:Wr(Date.now())})},c:null}),pe=d(function(r,e,n){var t,e=z(oo,e,n.e0);return 1===e.$?T(n):(t=e.a,z(M,function(e){return T(n)},z(M,function(n){return tr(z(L,function(e){return z(Rt,r,e(n))},t))},bo)))}),xo=d(function(e,n,r){return e(n(r))}),Co=(_e.Time={b:ae,c:J,d:pe,e:0,f:s(function(e,n){return z(no,n.a,z(xo,e,n.b))})},ke("Time")),Po=s(function(e,n){return Co(z(no,e,n))}),yo=ve,To=de,Lo=d(function(e,n,r){return{c8:r,eP:n,e_:e}}),Mo=T($(Lo,p,lt,0)),wo={$:2,b:function(e){e({$:0,a:Date.now()})},c:null},Do={$:2,b:function(e){var n=bn(function(){e({$:0,a:Date.now()})});return function(){hn(n)}},c:null},ge=d(function(e,r,n){var t=n.eP,n=n.c8,o={a:t,b:r};return 1===o.a.$?o.b.b?z(M,function(n){return z(M,function(e){return T($(Lo,r,ct(n),e))},wo)},po(z(M,mo(e),Do))):Mo:o.b.b?T($(Lo,r,t,n)):z(M,function(e){return Mo},uo(o.a.a))}),Ae=d(function(n,r,e){function t(e){return z(Rt,n,e.$?(0,e.a)(r-a):(0,e.a)(ho(r)))}var o=e.e_,a=e.c8;return z(M,function(n){return z(M,function(e){return T($(Lo,o,ct(n),r))},tr(z(L,t,o)))},po(z(M,mo(n),Do)))}),No=(_e["Browser.AnimationManager"]={b:Mo,c:ge,d:Ae,e:0,f:s(function(e,n){return n.$?{$:1,a:z(xo,e,n.a)}:{$:0,a:z(xo,e,n.a)}})},ke("Browser.AnimationManager")),zo=function(e){return No({$:0,a:e})},$o=d(function(e,n,r){return{$:0,a:e,b:n,c:r}}),Vo=s(function(e,n){return{eH:n,e_:e}}),Q=T(z(Vo,p,Ht)),So=s(function(e,n){return{dS:n,d1:e}}),Yo=d(function(n,r,e){return z(qt,function(e){return{a:r,b:e}},$(Tn,e.a?yn:Pn,e.b,function(e){return z(mo,n,z(So,r,e))}))}),_o=s(function(e,n){return $(fo,co,n,e)}),oe=d(function(o,e,n){var r=d(function(e,n,r){var t=r.c;return{a:r.a,b:r.b,c:z(C,$(Yo,o,e,n),t)}}),t=d(function(e,n,r){var t=r.b,o=r.c;return{a:z(C,n,r.a),b:t,c:o}}),a=u(function(e,n,r,t){var o=t.c;return{a:t.a,b:$(co,e,n,t.b),c:o}}),i=z(L,lr,e),e=F(so,t,a,r,n.eH,ur(i),{a:p,b:Ht,c:p}),c=e.b,l=e.c;return z(M,function(e){return T(z(Vo,i,z(_o,c,ur(e))))},z(M,function(e){return tr(l)},tr(z(L,uo,e.a))))}),Ao=d(function(e,n,r){e=e(n);return e.$?r:z(C,e.a,r)}),Bo=s(function(e,n){return $(kt,Ao(e),p,n)}),gn=d(function(e,n,r){var t=n.d1,o=n.dS,n=z(Bo,function(e){var n=e.b,n=n.c;return f(e.a,t)?z(Ln,n,o):lt},r.e_);return z(M,function(e){return T(r)},tr(z(L,Rt(e),n)))}),ko=(_e["Browser.Events"]={b:Q,c:oe,d:gn,e:0,f:s(function(e,n){return $($o,n.a,n.b,z(St,e,n.c))})},ke("Browser.Events")),G=d(function(e,n,r){return ko($($o,e,n,r))}),qo=z(G,0,"keydown"),Zo=z(G,0,"keyup"),Ro=z(G,0,"mousedown"),Fo=s(function(e,n){return{Y:e,Z:n}}),Eo=me,Io=s(function(r,e){return $(kt,s(function(e,n){return r(e)?z(C,e,n):n}),p,e)}),Go=s(function(e,n){return{Y:n.Y-e.Y,Z:n.Z-e.Z,fa:n.fa-e.fa}}),D=function(e){return e<0?-e:e},jo=ce,Ho=0,Oo=s(function(e,n){return!z(oo,e,n).$}),Uo=s(function(e,n){return z(Oo,e,n)}),Wo=s(function(e,n){return m(e,n)<0?e:n}),Qo={Y:0,Z:0,fa:0},Ko=s(function(e,n){return{Y:n.Y+e.Y,Z:n.Z+e.Z,fa:n.fa+e.fa}}),Xo={Y:0,Z:0,fa:0},Jo=s(function(e,n){var r,t=z(P,D(n.Y),z(P,D(n.Z),D(n.fa)));return t?{Y:e*(r=n.Y/t)/(t=jo(r*r+(r=n.Z/t)*r+(n=n.fa/t)*n)),Z:e*r/t,fa:e*n/t}:Xo}),ea=s(function(r,t){function e(e){return mr(z(Ko,z(Go,Qo,t.m),(n=z(Wo,.05,sr(dr(e=z(Go,t.m,e)))),z(Jo,n,e))));var n}var n=s(function(e,n){return or(e+n/(2*Qt))}),o=z(L,function(e){var n;return e.$?-1<m(r,(n=e.a).eQ)?{$:0,a:{bb:n.bb,af:n.am,L:p,ax:n.ax,m:n.bp,am:n.am,bl:n.bl,bp:n.bp}}:{$:1,a:n}:{$:0,a:v(n=e.a,{L:z(Io,function(e){return 0<m(e.bF,r)},n.L)})}},t.ah),a=z(Io,function(e){return 0<m(e.bF,r)},t.L),i=(c=t.as).b?(i=c.b,f(t.m,c=c.a)?i.b?{a:e(i.a),b:i}:{a:t.m,b:p}:{a:e(c),b:t.as}):{a:t.m,b:t.as},c=i.b,l=(l={a:c,b:t.ad}).a.b||1!==l.b.$?t.ad:{$:2,a:l.b.a},a=v(t,{L:a,m:i.a,ah:o,bS:r,ad:l,as:c});return z(Uo,"ArrowLeft",t.aI)?v(a,{aY:z(n,-.005,t.aY)}):z(Uo,"ArrowRight",t.aI)?v(a,{aY:z(n,.005,t.aY)}):a}),na=d(function(e,t,o){var a,i,n=o.ad;return 2!==n.$||n.a.$?o:(a=n.a.a,i=o.bS+500,n=z(L,function(e){var n,r;return e.$?{$:1,a:n=e.a}:f((n=e.a).ax,a.ax)?(e=z(C,{b7:t,bF:i},n.L),0<(r=n.af-t)?{$:0,a:v(n,{af:r,L:e})}:{$:1,a:{bb:n.bb,L:e,ax:n.ax,am:n.am,bl:n.bl,eQ:o.bS+2e4,bp:n.bp}}):{$:0,a:n}},o.ah),v(o,{a8:o.av?o.a8:o.a8+t,bc:2===o.av?o.bc+t:o.bc,af:z(P,1,o.af-e),L:z(C,{b7:1===o.af?0:e,bF:i},o.L),ah:n,ad:1===(e=vr(z(Io,function(e){return!e.$&&f(e.a.ax,a.ax)},n))).$?Et:{$:2,a:e.a},bs:1===o.av?o.bs+t:o.bs}))}),ra=s(function(e,n){return z(to,e,n)}),ta=s(function(e,n){var r=n.fa-e.fa,t=n.Z-e.Z,n=n.Y-e.Y,e=z(P,D(n),z(P,D(t),D(r)));return e?jo((n=n/e)*n+(n=t/e)*n+(t=r/e)*t)*e:Ho}),oa=d(function(e,n,r){var t;return 0<e?(t=(r.Y-n.Y)/e)*t+(t=(r.Z-n.Z)/e)*t+(t=(r.fa-n.fa)/e)*t<=1:!e&&f(n.Y,r.Y)&&f(n.Z,r.Z)&&f(n.fa,r.fa)}),aa=function(e){return-e},ia=s(function(e,n){return{Y:e.Z*n.fa-e.fa*n.Z,Z:e.fa*n.Y-e.Y*n.fa,fa:e.Y*n.Z-e.Z*n.Y}}),ca=function(e){return e.dB},la=function(e){return e.dC},ua=function(e){return z(ia,ca(e),la(e))},fa=e,sa=re,da=d(function(e,n,r){var n=.5*n,t=fa(n),n=sa(n),e=e.fw,o=e.Y*n,a=t*o,i=o*o,c=e.Z*n,l=t*c,u=o*c,f=c*c,e=e.fa*n,n=t*e,t=o*e,o=c*e,c=e*e;return{Y:(1-2*(f+c))*r.Y+2*(u-n)*r.Z+2*(t+l)*r.fa,Z:2*(u+n)*r.Y+(1-2*(i+c))*r.Z+2*(o-a)*r.fa,fa:2*(t-l)*r.Y+2*(o+a)*r.Z+(1-2*(i+f))*r.fa}}),ma=d(function(e,n,r){var n=.5*n,t=fa(n),n=sa(n),o=e.c9,a=r.Y-o.Y,i=r.Z-o.Z,r=r.fa-o.fa,e=e.fw,c=e.Y*n,l=t*c,u=c*c,f=e.Z*n,s=t*f,d=c*f,m=f*f,e=e.fa*n,n=t*e,t=c*e,c=f*e,f=e*e;return{Y:o.Y+(1-2*(m+f))*a+2*(d-n)*i+2*(t+s)*r,Z:o.Z+2*(d+n)*a+(1-2*(u+f))*i+2*(c-l)*r,fa:o.fa+2*(t-s)*a+2*(c+l)*i+(1-2*(u+m))*r}}),va=function(e){return e},pa=function(e){return e.dB},ga=function(e){return e.dC},ha=d(function(e,n,r){return va({c9:$(ma,e,n,gr(r)),dB:$(da,e,n,pa(r)),dC:$(da,e,n,ga(r)),dD:$(da,e,n,hr(r))})}),ba=d(function(e,n,r){return $(ha,e(r),n,r)}),xa=s(function(e,n){return{Y:n.Y+e.Y,Z:n.Z+e.Z,fa:n.fa+e.fa}}),Ca=s(function(e,n){return va({c9:z(xa,e,gr(n)),dB:pa(n),dC:ga(n),dD:hr(n)})}),Pa=s(function(e,n){return{Y:e*n.Y,Z:e*n.Z,fa:e*n.fa}}),ya=d(function(e,n,r){return z(Ca,z(Pa,n,e),r)}),Ta=d(function(e,n,r){return $(ya,br(e(r)),n,r)}),La=s(function(e,n){return{fw:n,c9:e}}),Ma=function(e){return z(La,e.c9,e.dB)},wa=function(e){return z(La,e.c9,e.dC)},Da=function(e){return z(La,e.c9,e.dD)},Na=function(e){return{$:0,a:e}},N=function(e){return D(e)},za=function(e){return.5*e},$a=te,Va=function(e){return $a(e)},Be={Y:1,Z:0,fa:0},Cn={Y:0,Z:1,fa:0},Sa=rr({c9:Qo,dB:Be,dC:Cn}),Ya=function(e){return function(e){var n=za(N(e.gy)),n=Va(n);return{dk:Na(n),gA:e.gA}}({gy:pr(30),gA:(e={ff:e.aY,fx:15,fC:pr(30),fM:e.m,fN:Sa},n=va({c9:e.fM,dB:la(e.fN),dC:ua(e.fN),dD:ca(e.fN)}),$(Ta,Da,e.fx,$(ba,Ma,aa(e.fC),$(ba,wa,e.ff,n))))});var n},_a=s(function(e,n){return n.Y*e.Y+n.Z*e.Z+n.fa*e.fa}),Aa=s(function(e,n){return e*n}),Ba=s(function(e,n){var r=e.c9,e=e.gc;return(n.Y-r.Y)*e.Y+(n.Z-r.Z)*e.Z+(n.fa-r.fa)*e.fa}),ka=d(function(e,n,r){return{Y:r.Y+n*e.Y,Z:r.Z+n*e.Z,fa:r.fa+n*e.fa}}),qa=s(function(e,n){var r=br(n),t=z(_a,e.gc,r);return t?(n=function(e){return e.c9}(n),ct($(ka,r,z(Aa,-1/t,z(Ba,e,n)),n))):lt}),Za=s(function(e,n){return n.$?lt:ct(e(n.a))}),Ra=s(function(e,n){return n=x(n),r=n.Z,t=n.fa,{Y:e(n.Y),Z:e(r),fa:e(t)};var r,t}),a=d(function(e,n,r){return{Y:e,Z:n,fa:r}}),Fa=s(function(e,n){return mr(z(Ko,e,x(n)))}),Ea=s(function(e,n){return e*n}),Ia=s(function(e,n){return n/e}),Ga={Y:0,Z:0,fa:-1},ja=s(function(e,n){return n/e}),Ha=s(function(e,n){var r=e.dD,t=e.dC,e=e.dB;return{Y:e.Y*n.Y+t.Y*n.Z+r.Y*n.fa,Z:e.Z*n.Y+t.Z*n.Z+r.Z*n.fa,fa:e.fa*n.Y+t.fa*n.Z+r.fa*n.fa}}),Oa=s(function(e,n){return n.$?e:n.a}),Ua=s(function(e,n){var r=e.c9,e=e.dB;return(n.Y-r.Y)*e.Y+(n.Z-r.Z)*e.Z}),Wa=d(function(e,n,r){return{Y:e,Z:n,fa:r}}),Qa=u(function(e,n,r,t){var o=e.c9,a=e.dD,i=e.dC,e=e.dB;return{Y:o.Y+n*e.Y+r*i.Y+t*a.Y,Z:o.Z+n*e.Z+r*i.Z+t*a.Z,fa:o.fa+n*e.fa+r*i.fa+t*a.fa}}),Ka=s(function(e,n){var r=e.c9,e=e.dC;return(n.Y-r.Y)*e.Y+(n.Z-r.Z)*e.Z}),Xa=d(function(e,n,r){var t,o=z(Ka,xr(n),r),r=z(Ua,xr(n),r),a=e.gA,n=Cr(n),n=n.b,i=e.dk;return i.$?z(La,V(Qa,a,z(Ea,t=z(ja,n,i.a),r),z(Ea,t,o),Ho),Tr(e.gA)):(t=aa(z(Ia,i.a,z(Aa,.5,n))),i=z(Ha,a,z(Oa,Ga,function(e){var n,r,t=z(P,D(e.Y),z(P,D(e.Z),D(e.fa)));return t?(t=jo((r=e.Y/t)*r+(n=e.Z/t)*n+(e=e.fa/t)*e),ct({Y:r/t,Z:n/t,fa:e/t})):lt}($(Wa,r,o,t)))),z(La,Pr(e.gA),i))}),Ja=ie,ei=s(function(e,n){return-1<m(n,e)}),ni=s(function(e,n){return e+.5*(n-e)}),ri=s(function(e,n){return n-e}),ti={Y:-1,Z:0},oi={Y:0,Z:-1},ai={Y:1,Z:0},ii={Y:0,Z:1},ci=s(function(e,n){return{Y:e,Z:n}}),li=V(u(function(e,n,r,t){var o=z(ei,n,t)?ii:oi,a=z(ei,e,r)?ai:ti,i={a:N(z(ri,e,r)),b:N(z(ri,n,t))};return{fe:{c9:z(ci,z(ni,e,r),z(ni,n,t)),dB:a,dC:o},fv:i}}),(ae={gD:0,gE:800,gG:600,gH:0}).gD,ae.gG,ae.gE,ae.gH),ui=d(function(e,n,r){return m(r,e)<0?e:0<m(r,n)?n:r}),fi=s(function(e,n){var r,t;return f(e,n)?p:(r=$(ui,-1,1,x(n).Z-x(e).Z),t=$(ui,-1,1,x(n).Y-x(e).Y),t=mr(z(Ko,z(Go,Qo,$(Ut,t,r,0)),z(Go,Qo,e))),z(C,t,z(fi,t,n)))}),si=K,di=function(e){return e},J={Y:0,Z:0,fa:1},mi=z(s(function(e,n){return{gc:n,c9:e}}),Qo,J),vi=s(function(e,r){var n,t,o=$(Xa,Ya(r),li,e),o=z(Za,Ra(z(eo,Ja,nr)),z(qa,mi,o));return 0<m(di(e).Y,800)||0<m(di(e).Z,600)||1===o.$?r:(n=o.a,e=z(Oa,r.m,vr(r.as)),(o=vr(z(Io,function(e){return!e.$&&$(oa,.01,n,e.a.m)},r.ah))).$?v(r,{ad:Et,as:(t=z(fi,e,n)).b?t:g([n])}):(t=o.a,o=z(Oa,z(Fa,$(a,1,0,0),n),vr(z(si,s(function(e,n){return z(ra,z(ta,r.m,e),z(ta,r.m,n))}),g([z(Fa,$(a,1,0,0),n),z(Fa,$(a,-1,0,0),n),z(Fa,$(a,0,1,0),n),z(Fa,$(a,0,-1,0),n)])))),v(r,{ad:{$:1,a:t},as:z(Io,function(e){return!f(e,r.m)},z(C,e,z(fi,e,o)))})))}),pi=s(function(e,n){return{$:5,a:e,b:n}}),gi=s(function(e,n){return{$:0,a:e,b:n}}),pe=z(M,function(e){return T((e=fr(e),n=Lr(z(gi,0,1013904223)),Lr(z(gi,n.a+e>>>0,n.b))));var n},bo),hi=s(function(e,n){return e(n)}),bi=d(function(n,e,r){var t,o;return e.b?(t=e.b,o=(e=z(hi,e.a,r)).b,z(M,function(e){return $(bi,n,t,o)},z(Rt,n,e.a))):T(r)}),ve=d(function(e,n,r){return T(r)}),xi=s(function(r,e){var t=e;return function(e){var e=t(e),n=e.b;return{a:r(e.a),b:n}}}),Ci=(_e.Random={b:pe,c:bi,d:ve,e:s(function(e,n){return z(xi,e,n)}),f:void 0},ke("Random")),de=s(function(e,n){return Ci(z(xi,e,n))}),ge=s(function(l,u){return function(e){var n=m(l,u)<0?{a:l,b:u}:{a:u,b:l},r=n.a,t=n.b-r+1;if(!(t-1&t))return{a:((t-1&Mr(e))>>>0)+r,b:Lr(e)};for(var o=(-t>>>0)%t>>>0,a=e;;){var i=Mr(a),c=Lr(a);if(0<=m(i,o))return{a:i%t+r,b:c};a=c}}}),Pi=d(function(t,e,n){var o=e,a=n;return function(e){var e=o(e),n=e.a,e=a(e.b),r=e.b;return{a:z(t,n,e.a),b:r}}}),yi=z(de,function(e){return z(pi,e.a,e.b)},z(s(function(e,n){return $(Pi,s(function(e,n){return{a:e,b:n}}),e,n)}),z(ge,0,1),z(ge,0,1))),Ti=s(function(e,n){return $(co,e,0,n)}),Li=R(function(e,n,r,t,o,a,i){if(-1!==a.$||a.a){for(;;){if(-1!==i.$||1!==i.a)break;if(-1!==i.d.$)return Dr(n);if(1===i.d.a)return Dr(n);break}return n}return S(w,r,a.b,a.c,a.d,S(w,0,t,o,a.e,i))}),Mi=s(function(e,n){var r,t,o,a,i,c,l;return-2===n.$?jt:(r=n.a,o=n.c,a=n.d,i=n.e,m(e,t=n.b)<0?-1===a.$&&1===a.a?-1!==(c=a.d).$||c.a?-1===(c=wr(n)).$?(l=c.e,S(ao,c.a,c.b,c.c,z(Mi,e,c.d),l)):jt:S(w,r,t,o,z(Mi,e,a),i):S(w,r,t,o,z(Mi,e,a),i):z(wi,e,E(Li,e,n,r,t,o,a,i)))}),wi=s(function(e,n){var r,t,o,a,i;return-1===n.$?(r=n.a,t=n.c,o=n.d,a=n.e,f(e,n=n.b)?-1===(i=function(e){for(;;){if(-1!==e.$||-1!==e.d.$)return e;e=e.d}}(a)).$?S(ao,r,i.b,i.c,o,Nr(a)):jt:S(ao,r,n,t,o,z(Mi,e,a))):jt}),Di=s(function(e,n){e=z(Mi,e,n);return-1!==e.$||e.a?e:S(w,1,e.b,e.c,e.d,e.e)}),Ni=s(function(e,n){return z(Di,e,n)}),Ae=s(function(e,n){switch(e.$){case 0:return{a:z(ea,e.a,n),b:Wt};case 1:return{a:z(vi,e.a,n),b:Wt};case 2:return{a:v(n,{aI:z(Ti,e.a,n.aI)}),b:Wt};case 3:return{a:v(n,{aI:z(Ni,e.a,n.aI)}),b:Wt};case 4:return{a:n,b:yi};case 5:return{a:$(na,e.a,e.b,n),b:Wt};default:return{a:v(n,{av:e.a}),b:Wt}}}),zi=s(function(e,n){return n.b?$(kt,C,n,e):e}),$i=V(It,186/255,189/255,182/255,1),Vi=V(It,78/255,154/255,6/255,1),o=He("div"),Q=s(function(e,n){switch(n){case"G":return 0;case"R":return 1;default:return e}}),Si=z(L,z(eo,U(""),L(Q(0))),g(["GGGGRRGGGG","GGGGRRGGGG","GGGGRRGGGG","GGGGRRGGGG","GGGGRRGGGG","GGGGRRRRRR","GGGGRRRRRR","GGGGRRGGGG","GGGGRRGGGG","GGGGRRGGGG"])),Yi=er(Si)/2,_i=V(It,52/255,101/255,164/255,1),Ai=V(It,32/255,74/255,135/255,1),Bi=V(It,164/255,0,0,1),A=We,i=je,ki=V(u(function(e,n,r,t){return V(It,e,n,r,t)}),0,0,0,0),qi=function(e){return{$:0,a:e}},Zi={$:3},Ri=u(function(e,n,r,t){return{$:4,a:e,b:n,c:r,d:t}}),Fi=s(function(e,n){return zr(z(L,e,n))}),Ei=function(e){return{$:1,a:e}},Ii=function(e){return{$:2,a:e}},c=se,Gi=s(function(e,n){switch(n.$){case 0:return z(Sn,e,n);case 1:return z(Yn,e,n);case 2:return z(_n,e,n);case 3:return z(An,e,n);case 4:return z(Bn,e,n);case 5:return z(kn,e,n);case 6:return z(qn,e,n);case 7:return z(Zn,e,n);default:return function(e){var n=e.sampleAlphaToCoverage;n.toggle=e.toggle,n.enabled||(e.gl.enable(e.gl.SAMPLE_ALPHA_TO_COVERAGE),n.enabled=!0)}(e)}}),ji=d(function(e,n,r){return $(On,e,n,r)}),Hi=Jn,Oi=V(Hi,1,1,1,1),B=d(function(e,n,r){return z(L,function(e){return z(e,n,r)},e)}),Ui=d(function(e,n,r){return{$:0,a:e,b:n,c:r}}),Wi=s(function(e,n){var r=n.Y,n=n.Z;return $(Ui,e*r/n,e,e*(1-r-n)/n)}),Qi=Kn,Ki=s(function(e,n){return $(Qi,3.2406*(n=(e=z(Wi,e,n)).a)-1.5372*(r=e.b)-.4986*(e=e.c),-.9689*n+1.8758*r+.0415*e,.0557*n-.204*r+1.057*e);var r}),Xi=s(function(e,n){return{d0:f(e.d0,n.d0),w:e.w*n.w+e.x*n.z+e.y*n.C,x:e.w*n.x+e.x*n.A+e.y*n.D,y:e.w*n.y+e.x*n.B+e.y*n.E,z:e.z*n.w+e.A*n.z+e.B*n.C,A:e.z*n.x+e.A*n.A+e.B*n.D,B:e.z*n.y+e.A*n.B+e.B*n.E,C:e.C*n.w+e.D*n.z+e.E*n.C,D:e.C*n.x+e.D*n.A+e.E*n.D,E:e.C*n.y+e.D*n.B+e.E*n.E,O:n.O+(e.O*n.w+e.P*n.z+e.Q*n.C)*n.cB,P:n.P+(e.O*n.x+e.P*n.A+e.Q*n.D)*n.cB,Q:n.Q+(e.O*n.y+e.P*n.B+e.Q*n.E)*n.cB,cB:e.cB*n.cB}}),Ji=function(e){var n=new Float64Array(16);return n[0]=e.ea,n[1]=e.ee,n[2]=e.ei,n[3]=e.em,n[4]=e.eb,n[5]=e.ef,n[6]=e.ej,n[7]=e.en,n[8]=e.ec,n[9]=e.eg,n[10]=e.ek,n[11]=e.eo,n[12]=e.ed,n[13]=e.eh,n[14]=e.el,n[15]=e.ep,n},ec=l(function(e,n,r,t,o){return F(o,e,V(Hi,t.cB,t.cB,t.cB,t.d0?1:-1),function(e){return Ji({ea:e.w,eb:e.z,ec:e.C,ed:e.O,ee:e.x,ef:e.A,eg:e.D,eh:e.P,ei:e.y,ej:e.B,ek:e.E,el:e.Q,em:0,en:0,eo:0,ep:1})}(t),t.d0,n,r)}),nc=Z(function(e,n,r,t,o,a){for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;e=e,n=n,r=r,t=z(Xi,o.a,t),o=i,a=a;continue;case 1:return{V:z(C,S(ec,e,n,r,t,o.b),a.V),ai:a.ai,ak:a.ak};case 3:i=z(C,S(ec,e,n,r,t,o.b),a.ai);return{V:a.V,ai:i,ak:a.ak};case 2:var c=z(C,S(ec,e,n,r,t,o.a),a.ak);return{V:a.V,ai:a.ai,ak:c};default:c=o.a;return $(st,V(nc,e,n,r,t),a,c)}}),rc=u(function(e,n,r,t){return{$:4,a:e,b:n,c:r,d:t}}),tc=u(function(e,n,r,t){return{$:1,a:e,b:n,c:r,d:t}}),oe=s(function(e,n){return{$:6,a:e,b:n}}),oc=g([function(e){return V(tc,518,e.at,e.an,e.al)}({al:1,an:0,at:!1}),V(rc,!1,!1,!1,!1),z(oe,0,1)]),ac={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},k=Vn,gn=s(function(e,n){return{$:0,a:e,b:n}}),G=gn({dP:1,d_:0,ey:5}),r=Qn,ic=G(g([{cu:z(r,-1,-1)},{cu:z(r,1,-1)},{cu:z(r,-1,1)},{cu:z(r,1,1)}])),cc={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"cu"},uniforms:{}},lc=d(function(e,n,r){function t(e){return z(eo,i(e.bY),z(eo,c(e.bI),z(eo,c(e.b4),c(e.b5))))}var o=e.dm,a=e.c$,e=e.dA,i=s(function(e,n){return n(e)}),c=s(function(e,n){return n(e)});return z(t,r,z(t,n,$(Yr,o,a,e)))}),uc=Ar({bI:7681,c$:0,dm:8,bY:519,dA:15,b4:7681,b5:7681}),fc=ne,sc=d(function(e,n,r){return zr(g([$(B,e,r,oc),g([Br(n),uc])]))}),dc=s(function(e,n){return zr(z(pt,sc(e),n))}),me=function(e){return V(tc,513,e.at,e.an,e.al)}({al:1,an:0,at:!0}),mc=d(function(e,n,r){return{$:0,a:e,b:n,c:r}}),ce=s(function(e,n){return $(mc,32774,e,n)}),vc=function(e){var a=e.cw,i=e.cg,c=e.b9,l=e.b6,n=e.bb,e=e.a9;return z(s(function(e,n){var r=e.c,t=n.a,o=n.b,n=n.c;return function(u){return function(l){return function(c){return function(i){return function(a){return function(o){return function(t){return function(r){return function(n){return function(e){return{$:0,a:u,b:l,c:c,d:i,e:a,f:o,g:t,h:r,i:n,j:e}}}}}}}}}}}(e.a)(e.b)(r)(t)(o)(n)(a)(i)(c)(l)}),n,e)}({b6:0,a9:z(ce,1,771),b9:0,bb:z(ce,770,771),cg:0,cw:0}),pc=g([me,vc]),gc=function(e){return e.er},hc=function(e){return e.es},bc=function(e){return e.et},xc=function(e){return e.eu},Cc=function(e){return e.ev},Pc=function(e){return e.ew},yc=s(function(e,n){var r=e.dD,t=e.dC,e=e.dB;return{Y:n.Y*e.Y+n.Z*e.Z+n.fa*e.fa,Z:n.Y*t.Y+n.Z*t.Z+n.fa*t.fa,fa:n.Y*r.Y+n.Z*r.Z+n.fa*r.fa}}),Tc=s(function(e,n){var r=e.c9,t=n.Y-r.Y,o=n.Z-r.Z,n=n.fa-r.fa,r=e.dD,a=e.dC,e=e.dB;return{Y:t*e.Y+o*e.Z+n*e.fa,Z:t*a.Y+o*a.Z+n*a.fa,fa:t*r.Y+o*r.Z+n*r.fa}}),Lc=s(function(e,n){return{c9:z(Tc,e,gr(n)),dB:z(yc,e,pa(n)),dC:z(yc,e,ga(n)),dD:z(yc,e,hr(n))}}),Mc=s(function(e,n){return z(P,e,n)}),wc=s(function(e,n){return z(Wo,e,n)}),Dc=s(function(e,n){n=qr(n),e=qr(e);return{er:z(Mc,e.er,n.er),es:z(Mc,e.es,n.es),et:z(Mc,e.et,n.et),eu:z(wc,e.eu,n.eu),ev:z(wc,e.ev,n.ev),ew:z(wc,e.ew,n.ew)}}),Nc=s(function(e,n){return n+e}),zc=s(function(e,n){var r=e.a,t=e.c,e=za(N(e.b)),r=za(N(r)),t=za(N(t)),n=function(e){return{a:e.Y,b:e.Z,c:e.fa}}(n),o=n.a,a=n.b,n=n.c;return{er:z(Nc,r,o),es:z(Nc,e,a),et:z(Nc,t,n),eu:z(ri,r,o),ev:z(ri,e,a),ew:z(ri,t,n)}}),$c=u(function(e,n,r,t){var o=r.fo,a=2*r.fQ*n,i=2*r.fP*n,r=2*r.fO*n,c=o.fa*n,l=o.Z*n,o=o.Y*n,n=Zr(hr(e)),n=D(r*n.Y)+D(i*n.Z)+D(a*n.fa),u=Zr(ga(e)),u=D(r*u.Y)+D(i*u.Z)+D(a*u.fa),f=Zr(pa(e)),r=D(r*f.Y)+D(i*f.Z)+D(a*f.fa),i=z(zc,{a:r,b:u,c:n},z(Tc,e,$(Ut,o,l,c)));return ct(t.$?i:z(Dc,t.a,i))}),Vc=u(function(e,n,r,t){for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:e=c=e,n=l=n,r=u=r,t=a;continue;case 1:var i=V($c,e,n,o.a,r);e=c=e,n=l=n,r=u=i,t=a;continue;case 2:e=c=e,n=l=n,r=u=r,t=a;continue;case 3:i=V($c,e,n,o.a,r);e=c=e,n=l=n,r=u=i,t=a;continue;case 4:var c=e,l=n,u=V(Vc,e,n,r,o.a);e=c,n=l,r=u,t=a;continue;default:var f=o.a,s=o.b,d=z(Lc,function(e){return va({c9:{Y:e.O,Z:e.P,fa:e.Q},dB:{Y:e.w,Z:e.x,fa:e.y},dC:{Y:e.z,Z:e.A,fa:e.B},dD:{Y:e.C,Z:e.D,fa:e.E}})}(f),e),f=n*f.cB;e=c=e,n=l=n,r=u=V(Vc,d,f,r,g([s])),t=a;continue}}}),Sc=function(e){return e[0]},Yc=function(e){return e[1]},_c=function(e){return e[2]},Ac=function(e){return{$:4,a:e}},Bc=s(function(e,n){for(;;){if(!e.b)return n;var r=e.a;e=e.b,n=z(C,r,n)}}),kc={d0:!0,w:1,x:0,y:0,z:0,A:1,B:0,C:0,D:0,E:1,O:0,P:0,Q:0,cB:1},qc=Ar({bI:7681,c$:0,dm:8,bY:519,dA:255,b4:7681,b5:7681}),e={b9:0,fn:!1,cg:0,di:0,cw:0,gv:0,Y:0,Z:0,fa:0},re=s(function(e,n){return Ji({ea:e.Y,eb:e.cw,ec:n.Y,ed:n.cw,ee:e.Z,ef:e.cg,eg:n.Z,eh:n.cg,ei:e.fa,ej:e.b9,ek:n.fa,el:n.b9,em:e.gv,en:e.di,eo:n.gv,ep:n.di})}),Zc={a:{bO:z(re,e,e),ck:z(re,e,e),cl:z(re,e,e),cm:z(re,e,e)},b:V(Hi,0,0,0,0)},Rc=g([Fr({al:1,an:0,at:!0}),_r({bI:7680,c$:240,dm:0,bY:514,dA:0,b4:7680,b5:7680}),vc]),Fc=function(e){return e===1/0||e===-1/0},Ec=s(function(e,n){var r,t=n.fL,o=n.fd,n=N(n.f4),t=N(t),e=e.dk;return e.$?(r=e.a,Fc(t)?Ji({ea:2/(o*r),eb:0,ec:0,ed:0,ee:0,ef:2/r,eg:0,eh:0,ei:0,ej:0,ek:0,el:-1,em:0,en:0,eo:0,ep:1}):Ji({ea:2/(o*r),eb:0,ec:0,ed:0,ee:0,ef:2/r,eg:0,eh:0,ei:0,ej:0,ek:-2/(t-n),el:-(t+n)/(t-n),em:0,en:0,eo:0,ep:1})):(r=e.a,Fc(t)?Ji({ea:1/(o*r),eb:0,ec:0,ed:0,ee:0,ef:1/r,eg:0,eh:0,ei:0,ej:0,ek:-1,el:-2*n,em:0,en:0,eo:-1,ep:0}):Ji({ea:1/(o*r),eb:0,ec:0,ed:0,ee:0,ef:1/r,eg:0,eh:0,ei:0,ej:0,ek:-(t+n)/(t-n),el:-2*t*n/(t-n),em:0,en:0,eo:-1,ep:0}))}),Ic=s(function(e,n){return 1==(1&e>>n)?0:1}),Gc=d(function(r,t,e){return zr(z(L,function(e){var n=e<<4;return $(B,r,{a:t,b:V(Hi,z(Ic,e,0),z(Ic,e,1),z(Ic,e,2),z(Ic,e,3))},function(e){return g([Fr({al:1,an:0,at:!0}),_r({bI:7680,c$:240,dm:e,bY:514,dA:0,b4:7680,b5:7680}),vc])}(n))},z(vt,1,z(fc,2,e)-1)))}),jc=function(e){return{ea:e[0],ee:e[1],ei:e[2],em:e[3],eb:e[4],ef:e[5],ej:e[6],en:e[7],ec:e[8],eg:e[9],ek:e[10],eo:e[11],ed:e[12],eh:e[13],el:e[14],ep:e[15]}},Hc={c9:Qo,dB:Be,dC:Cn,dD:J},Oc=s(function(e,n){var r,t;return e=Er(gr(n=z(Lc,n,e))),r=Zr(hr(n)),t=Zr(ga(n)),n=Zr(pa(n)),Ji({ea:n.Y,eb:t.Y,ec:r.Y,ed:e.Y,ee:n.Z,ef:t.Z,eg:r.Z,eh:e.Z,ei:n.fa,ej:t.fa,ek:r.fa,el:e.fa,em:0,en:0,eo:0,ep:1})}),Uc=s(function(n,e){var r=g([Ei(1),Ii(0),qi(!0),V(Ri,0,0,0,0)]),t=function(){var e=n.ba;switch(e.$){case 0:return{a:r,b:"0",c:1};case 1:return{a:z(C,Zi,r),b:"1",c:1};default:return{a:r,b:"0",c:e.a}}}(),o=t.a,a=t.b,i=t.c,t=n.fv,c=t.a,t=Sr(t.b),l=z(A,"height",ut(t)+"px"),c=Sr(c),u=c/t,e=z(Fi,function(e){return Ir({fd:u,fm:n.fm,fr:n.fr,fE:e.fE,aH:e.aH,aK:e.aK,e$:i,aQ:e.aQ,aT:e.aT})},e),f=z(A,"width",ut(c)+"px"),s=Vr(n.fg);return $($r,"div",g([z(A,"padding","0px"),f,l]),g([{a:a,b:$(ji,o,g([(a=Ja(c*i),z(Qe,"width",ut(a))),function(e){return z(Qe,"height",ut(e))}(Ja(t*i)),f,l,z(A,"display","block"),z(A,"background-color",s)]),e)}]))}),Wc=function(e){return z(Uc,{ba:e.ba,fg:e.fg,fm:e.fm,fr:e.fr,fv:e.fv},g([{fE:e.fE,aH:e.aH,aK:e.aK,aQ:e.aQ,aT:e.aT}]))},Qc={Y:.31271,Z:.32902},Kc=function(e){return N(e)},Xc={$:1},Jc=function(e){return e},el={$:0,a:Zc.a},nl={$:0},rl=function(e){return{$:6,a:e}},tl=function(e){return e?z(A,"background-color","#d33030"):z(A,"","")},ol=He("button"),al=Ue,il=s(function(e,n){return z(al,e,{$:0,a:n})}),cl=function(e){return z(il,"click",_t(e))},ll=s(function(e,n){return e/n}),ul=s(function(e,n){var r=e.c9,e=e.dB;return(n.Y-r.Y)*e.Y+(n.Z-r.Z)*e.Z+(n.fa-r.fa)*e.fa}),fl=d(function(e,n,r){var t=e.c9,o=e.dC,e=e.dB;return{Y:t.Y+n*e.Y+r*o.Y,Z:t.Z+n*e.Z+r*o.Z}}),sl=s(function(e,n){var r=e.c9,e=e.dC;return(n.Y-r.Y)*e.Y+(n.Z-r.Z)*e.Z+(n.fa-r.fa)*e.fa}),dl=s(function(e,n){var r=e.c9,e=e.dD;return(n.Y-r.Y)*e.Y+(n.Z-r.Z)*e.Z+(n.fa-r.fa)*e.fa}),ml=d(function(e,n,r){var t,o,a=e.gA,i=z(ul,a,r),c=z(sl,a,r),a=aa(z(dl,a,r)),r=Cr(n),l=r.a,r=r.b,u=z(ll,l,r),e=e.dk;return e.$?(o=z(ll,c,t=e.a),$(fl,xr(n),z(Aa,z(ll,i,z(Aa,u,t)),l),z(Aa,o,r))):(t=e.a,o=z(ll,c,a)/t,$(fl,xr(n),z(Aa,z(ll,i,a)/(u*t)/2,l),z(Aa,o/2,r)))}),vl=u(function(e,n,r,t){e=di($(ml,e,li,z(Fa,$(a,0,0,1.2),t)));return z(o,g([z(A,"position","absolute"),z(A,"left",c(e.Y-45)+"px"),z(A,"top",c(e.Z)+"px"),z(A,"width",c(90)+"px"),z(A,"height",c(15)+"px"),z(A,"background-color","#d33030")]),g([z(o,g([z(A,"position","absolute"),z(A,"left","0"),z(A,"top","0"),z(A,"width",c(n/r*100)+"%"),z(A,"height",c(15)+"px"),z(A,"background-color","lime")]),p)]))}),pl=d(function(e,n,r){var e=di($(ml,e,li,r)),r=e.Y,e=e.Z,n=vr(n);return 1===n.$?i(""):(n=n.a.b7,z(o,g([z(A,"position","absolute"),z(A,"left",c(r-15)+"px"),z(A,"top",c(e-15)+"px"),z(A,"width",c(30)+"px"),z(A,"height",c(30)+"px"),z(A,"background-color","#d33030"),z(A,"color","white"),z(A,"display","flex"),z(A,"justify-content","center"),z(A,"align-items","center"),z(A,"border-radius","100%"),z(A,"font-weight","bold")]),g([z(o,p,g([i(ut(n))]))])))}),gl={$:0},hl=gl,bl=s(function(e,n){return{$:0,a:e,b:n}}),xl=function(e){return{a9:e.d,cK:e.c,cQ:e.b,dl:e.a}},Cl=s(function(e,n){return{$:1,a:e,b:n}}),Pl={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"cc"}},yl={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aZ"}},Tl={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"be",sceneProperties:"g"}},Ll={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"cG",colorTexture:"cc",sceneProperties:"g"}},Ml=R(function(e,n,r,t,o,a,i){for(;;){if(!i.b)return{er:n,es:t,et:a,eu:e,ev:r,ew:o};var c=i.a,l=i.b,u=c.Y,f=c.Z,c=c.fa;e=z(Wo,u,e),n=z(P,u,n),r=z(Wo,f,r),t=z(P,f,t),o=z(Wo,c,o),a=z(P,c,a),i=l}}),wl=s(function(e,n){var r=e.Y,t=e.Z,e=e.fa;return E(Ml,r,r,t,t,e,e,n)}),Dl={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"aa",lights12:"bO",lights34:"ck",lights56:"cl",lights78:"cm",materialColor:"c0",sceneProperties:"g",viewMatrix:"h"}},Nl={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"aa",lights12:"bO",lights34:"ck",lights56:"cl",lights78:"cm",materialColorTexture:"c1",normalMapTexture:"bn",sceneProperties:"g",useNormalMap:"bu",viewMatrix:"h"}},zl=Hr(1029),$l=Hr(1028),Vl=d(function(e,n,r){return 1===n?z(C,e?zl:$l,r):r}),Sl={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"cI",enabledLights:"aa",lights12:"bO",lights34:"ck",lights56:"cl",lights78:"cm",metallic:"c3",roughness:"dp",sceneProperties:"g",viewMatrix:"h"}},Yl={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"cJ",constantBaseColor:"cL",constantMetallic:"cM",constantRoughness:"cN",enabledLights:"aa",lights12:"bO",lights34:"ck",lights56:"cl",lights78:"cm",metallicTexture:"c4",normalMapTexture:"bn",roughnessTexture:"dq",sceneProperties:"g",useNormalMap:"bu",viewMatrix:"h"}},_l={src:"\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{quadVertex:"cv"},uniforms:{modelMatrix:"d",modelScale:"e",projectionMatrix:"f",quadVertexPositions:"az",sceneProperties:"g",viewMatrix:"h"}},Al=u(function(e,n,r,t){t=x(t),r=x(r),n=x(n),e=x(e);return Ji({ea:e.Y,eb:n.Y,ec:r.Y,ed:t.Y,ee:e.Z,ef:n.Z,eg:r.Z,eh:t.Z,ei:e.fa,ej:n.fa,ek:r.fa,el:t.fa,em:0,en:0,eo:0,ep:0})}),Bl=gn({dP:1,d_:0,ey:6})(g([{cv:$(Qi,0,0,0)},{cv:$(Qi,1,0,1)},{cv:$(Qi,1,1,2)},{cv:$(Qi,0,1,3)}])),kl=s(function(e,n){return{$:1,a:e,b:n}}),ql=s(function(e,n){return n.$?{a:n.a.q,b:1}:{a:e,b:0}}),Zl=V(Hi,0,0,0,0),Rl=s(function(e,n){return n.$?{a:n.a.q,b:Zl}:{a:e,b:V(Hi,Sc(e=n.a),Yc(e),_c(e),1)}}),Fl=s(function(e,n){var r,t={a:e,b:n};return t.a.$?z(kl,{a:r=t.a.a.q,b:Zl},z(ql,r,n)):t.b.$?z(kl,z(Rl,r=t.b.a.q,e),z(ql,r,n)):{$:0,a:t.a.a}}),El=d(function(e,n,r){return{$:0,a:e,b:n,c:r}}),Il=u(function(e,n,r,t){return{$:1,a:e,b:n,c:r,d:t}}),Gl=u(function(e,n,r,t){return{$:0,a:e,b:n,c:r,d:t}}),jl=z(r,0,0),Hl=s(function(e,n){return n.$?{a:n.a.q,b:jl}:{a:e,b:z(r,n.a,1)}}),Ol=u(function(e,n,r,t){var o,a=V(Gl,e,n,r,t);return a.a.$?V(Il,{a:o=a.a.a.q,b:Zl},z(Hl,o,n),z(Hl,o,r),z(ql,o,t)):a.b.$?V(Il,z(Rl,o=a.b.a.q,e),{a:o,b:jl},z(Hl,o,r),z(ql,o,t)):a.c.$?V(Il,z(Rl,o=a.c.a.q,e),z(Hl,o,n),{a:o,b:jl},z(ql,o,t)):a.d.$?V(Il,z(Rl,o=a.d.a.q,e),z(Hl,o,n),z(Hl,o,r),{a:o,b:1}):$(El,a.a.a,a.b.a,a.c.a)}),Ul=Xn,Wl={src:"\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{quadVertex:"cv"},uniforms:{modelMatrix:"d",modelScale:"e",projectionMatrix:"f",quadVertexPositions:"az",sceneProperties:"g",viewMatrix:"h"}},Ql={src:"\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = quadVertex.xy;\n            interpolatedTangent = tangent;\n        }\n    ",attributes:{quadVertex:"cv"},uniforms:{modelMatrix:"d",modelScale:"e",projectionMatrix:"f",quadVertexPositions:"az",sceneProperties:"g",viewMatrix:"h"}},Kl=d(function(e,n,r){return.5<r?n+(1-r)*(e-n):e+r*(n-e)}),Xl=function(e){return $(Kl,e.eu,e.er,.5)},Jl=function(e){return $(Kl,e.ev,e.es,.5)},eu=function(e){return $(Kl,e.ew,e.et,.5)},nu=d(function(e,n,r){return{Y:e,Z:n,fa:r}}),ru={src:"\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = quadVertex.xy;\n        }\n    ",attributes:{quadVertex:"cv"},uniforms:{modelMatrix:"d",modelScale:"e",projectionMatrix:"f",quadVertexPositions:"az",sceneProperties:"g",viewMatrix:"h"}},tu=l(function(r,M,w,D,N){var e=z(wl,M,g([w,D,N])),e=Or(e);return z(Cl,e,function(){switch(r.$){case 0:var l;return r.b.$?(u=r.b.a.q,t(function(e,n,r,t,o,a,i,c){return S(k,$(Vl,t,0,c),ru,Pl,Bl,{cc:u,d:r,e:n,f:a,az:V(Al,M,w,D,N),g:e,h:o})})):(l=r.b.a,t(function(e,n,r,t,o,a,i,c){return S(k,$(Vl,t,0,c),_l,yl,Bl,{aZ:l,d:r,e:n,f:a,az:V(Al,M,w,D,N),g:e,h:o})}));case 1:var u,f,s;return r.b.$?(u=r.b.a.q,s=r.c,t(function(e,n,r,t,o,a,i,c){return S(k,$(Vl,t,0,c),ru,Ll,Bl,{cG:jr(s),cc:u,d:r,e:n,f:a,az:V(Al,M,w,D,N),g:e,h:o})})):(f=r.b.a,s=r.c,t(function(e,n,r,t,o,a,i,c){return S(k,$(Vl,t,0,c),_l,Tl,Bl,{cG:s,be:z(Ul,jr(s),f),d:r,e:n,f:a,az:V(Al,M,w,D,N),g:e,h:o})}));case 2:var d,m,e=z(Fl,r.b,r.c);return e.$?(d=e.a.a,C=(n=e.b).a,P=n.b,t(function(e,n,r,t,o,a,i,c){var l=i.a,i=i.b;return S(k,$(Vl,t,0,c),Ql,Nl,Bl,{aa:i,bO:l.bO,ck:l.ck,cl:l.cl,cm:l.cm,c1:d,d:r,e:n,bn:C,f:a,az:V(Al,M,w,D,N),g:e,bu:P,h:o})})):(m=e.a,t(function(e,n,r,t,o,a,i,c){var l=i.a,i=i.b;return S(k,$(Vl,t,0,c),Wl,Dl,Bl,{aa:i,bO:l.bO,ck:l.ck,cl:l.cl,cm:l.cm,c0:m,d:r,e:n,f:a,az:V(Al,M,w,D,N),g:e,h:o})}));default:var v,p,g,h,b,x,C,P,y,T,L,n=V(Ol,r.b,r.c,r.d,r.e);return n.$?(v=(e=n.a).a,p=e.b,g=(e=n.b).a,h=e.b,b=(e=n.c).a,x=e.b,C=(e=n.d).a,P=e.b,t(function(e,n,r,t,o,a,i,c){var l=i.a,i=i.b;return S(k,$(Vl,t,0,c),Ql,Yl,Bl,{cJ:v,cL:p,cM:x,cN:h,aa:i,bO:l.bO,ck:l.ck,cl:l.cl,cm:l.cm,c4:b,d:r,e:n,bn:C,f:a,az:V(Al,M,w,D,N),dq:g,g:e,bu:P,h:o})})):(y=n.a,T=n.b,L=n.c,t(function(e,n,r,t,o,a,i,c){var l=i.a,i=i.b;return S(k,$(Vl,t,0,c),Wl,Sl,Bl,{cI:y,aa:i,bO:l.bO,ck:l.ck,cl:l.cl,cm:l.cm,c3:L,d:r,e:n,f:a,az:V(Al,M,w,D,N),dp:T,g:e,h:o})}))}}())}),te=d(function(e,n,r){return{$:3,a:e,b:n,c:r}})({dP:1,d_:3,ey:4}),ou=(ie=g([{aP:z(r,0,1)},{aP:z(r,1,1)},{aP:z(r,2,1)},{aP:z(r,3,1)},{aP:z(r,0,-1)},{aP:z(r,1,-1)},{aP:z(r,2,-1)},{aP:z(r,3,-1)}]),ae=g([{a:0,b:1,c:2},{a:0,b:2,c:3},{a:4,b:6,c:5},{a:4,b:7,c:6},{a:4,b:5,c:1},{a:1,b:0,c:4},{a:5,b:6,c:2},{a:2,b:1,c:5},{a:6,b:7,c:3},{a:3,b:2,c:6},{a:7,b:4,c:0},{a:0,b:3,c:7}]),z(te,ie,ae)),au={src:"\n        precision highp float;\n        \n        attribute highp vec2 quadShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 quadVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadShadowVertex.x), quadVertexPositions, position, normal, tangent);\n            normal *= quadShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{quadShadowVertex:"aP"},uniforms:{modelMatrix:"d",modelScale:"e",projectionMatrix:"f",quadVertexPositions:"az",sceneProperties:"g",shadowLight:"cC",viewMatrix:"h"}},iu={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},cu=$(lc,{c$:0,dm:0,dA:15},{bI:7680,bY:519,b4:7680,b5:7683},{bI:7680,bY:519,b4:7680,b5:7682}),lu=$(lc,{c$:0,dm:0,dA:15},{bI:7680,bY:519,b4:7680,b5:7682},{bI:7680,bY:519,b4:7680,b5:7683}),uu=s(function(e,n){return z(C,e?lu:cu,n)}),fu=u(function(l,u,f,s){return{$:2,a:t(function(e,n,r,t,o,a,i,c){return S(k,z(uu,t,c),au,iu,ou,{d:r,e:n,f:a,az:V(Al,l,u,f,s),g:e,cC:i,h:o})})}}),su=R(function(e,n,r,t,o,a,i){r=S(tu,r,t,o,a,i),e={a:e,b:n};return e.a?e.b?Rr(g([r,V(fu,t,o,a,i)])):r:e.b?V(fu,t,o,a,i):gl}),du=l(function(e,n,r,t,o){return E(su,!0,!1,e,n,r,t,o)}),mu=s(function(e,n){return S(du,Gr(e),z(xa,$(a,-.5,-.5,0),n),z(xa,$(a,.5,-.5,0),n),z(xa,$(a,.5,.5,0),n),z(xa,$(a,-.5,.5,0),n))}),vu=function(e){return c(e)+"px"},pu=s(function(e,n){return n.$?i(""):(n=v(n=di($(ml,e,li,(e=n.a).m)),{Y:n.Y-75,Z:n.Z-10}),z(o,g([z(A,"position","absolute"),z(A,"left",vu(n.Y)),z(A,"top",vu(n.Z)),z(A,"width",vu(150)),z(A,"text-align","center"),z(A,"color","white"),z(A,"font-size","12px"),z(A,"font-weight","bold")]),g([i(e.bl)])))}),gu=function(e){switch(e.ad.$){case 0:return e.as.b?"Walking":"Standing";case 1:return"Attacking";default:return"Fighting"}},hu=s(function(e,n){return z(o,p,g([i(e+(" XP: "+ut(n)))]))}),K=X({fV:function(e){return{a:{a8:0,av:0,aY:or(0),bc:0,af:10,L:p,aI:Ot,m:$(Ut,0,0,0),am:10,ah:z(pt,s(function(e,n){return{$:0,a:{bb:Gt,af:3,L:p,ax:e,m:n,am:3,bl:"Goblin (level 2)",bp:n}}}),g([$(Ut,-3,3,0),$(Ut,-3,-3,0),$(Ut,3,3,0),$(Ut,3,-3,0)])),bS:-1,ad:Et,bs:0,as:p},b:Wt}},gq:function(e){return Jt(H(g([qo(z(St,ir,z(yo,"key",Eo))),Zo(z(St,cr,z(yo,"key",Eo))),Ro($(Yt,s(function(e,n){return{$:1,a:z(Fo,e,n)}}),z(yo,"clientX",To),z(yo,"clientY",To))),zo(z(eo,fr,ar))]),2===e.ad.$?g([z(Po,1e3,function(e){return Xt})]):p))},gw:Ae,gz:function(n){return z(o,p,g([z(o,g([z(A,"border","1px solid white"),z(A,"display","inline-block"),z(A,"position","relative"),z(A,"overflow","hidden")]),g([(e={fg:ki,fm:Ya(n),fr:1,fv:{a:Ja(800),b:Ja(600)},fE:H(zr(z(pt,s(function(r,e){return z(pt,s(function(e,n){return z(mu,n?$i:Vi,$(Ut,e-Yi,r-Yi,-.01))}),e)}),Si)),z(C,z(mu,function(e){switch(e.$){case 0:return _i;case 1:return Ai;default:return Bi}}(n.ad),n.m),z(L,Ur,n.ah)))},Wc({ba:Xc,fg:e.fg,fm:e.fm,fr:e.fr,fv:e.fv,fE:e.fE,aH:Kc(Jc(80)),aK:el,aQ:nl,aT:Qc})),z(o,p,z(L,function(e){return e.$?i(""):(e=e.a,V(vl,Ya(n),e.af,e.am,e.m))},n.ah)),function(e){var n=v(n=di($(ml,Ya(e),li,e.m)),{Y:n.Y-75,Z:n.Z-10});return z(o,g([z(A,"position","absolute"),z(A,"left",vu(n.Y)),z(A,"top",vu(n.Z)),z(A,"width",vu(150)),z(A,"text-align","center"),z(A,"color","white"),z(A,"font-size","12px"),z(A,"font-weight","bold")]),g([i(gu(e))]))}(n),V(vl,Ya(n),n.af,n.am,n.m),$(pl,Ya(n),n.L,n.m),z(o,p,z(L,pu(Ya(n)),n.ah)),z(o,p,z(L,function(e){return e.$?i(""):(e=e.a,$(pl,Ya(n),e.L,e.m))},n.ah))])),z(o,g([z(A,"margin-bottom","20px")]),g([function(e){return z(o,p,g([z(ol,g([cl(rl(0)),tl(!e.av)]),g([i("Accuracy")])),z(ol,g([cl(rl(1)),tl(1===e.av)]),g([i("Strength")])),z(ol,g([cl(rl(2)),tl(2===e.av)]),g([i("Defense")]))]))}(n),function(e){return z(o,p,g([z(hu,"Accuracy",e.a8),z(hu,"Strength",e.bs),z(hu,"Defense",e.bc)]))}(n)])),z(o,p,g([i("Use left and right arrow keys to rotate the screen.")])),z(o,p,g([i("Click on the screen to move to that location.")])),z(o,p,g([i("Click on a monster to attack it.")]))]));var e}});pe={Main:{init:K(_t(0))(0)}},n.Elm?function e(n,r){for(var t in r)t in n?"init"==t?ee(6):e(n[t],r[t]):n[t]=r[t]}(n.Elm,pe):n.Elm=pe}(this);