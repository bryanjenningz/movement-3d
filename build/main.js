!function(e){"use strict";function n(e,n,r){return r.a=e,r.f=n,r}function s(r){return n(2,r,function(n){return function(e){return r(n,e)}})}function d(t){return n(3,t,function(r){return function(n){return function(e){return t(r,n,e)}}})}function u(o){return n(4,o,function(t){return function(r){return function(n){return function(e){return o(t,r,n,e)}}}})}function E(a){return n(5,a,function(o){return function(t){return function(r){return function(n){return function(e){return a(o,t,r,n,e)}}}}})}function B(i){return n(6,i,function(a){return function(o){return function(t){return function(r){return function(n){return function(e){return i(a,o,t,r,n,e)}}}}}})}function R(c){return n(7,c,function(i){return function(a){return function(o){return function(t){return function(r){return function(n){return function(e){return c(i,a,o,t,r,n,e)}}}}}}})}function t(l){return n(8,l,function(c){return function(i){return function(a){return function(o){return function(t){return function(r){return function(n){return function(e){return l(c,i,a,o,t,r,n,e)}}}}}}}})}function z(e,n,r){return 2===e.a?e.f(n,r):e(n)(r)}function $(e,n,r,t){return 3===e.a?e.f(n,r,t):e(n)(r)(t)}function V(e,n,r,t,o){return 4===e.a?e.f(n,r,t,o):e(n)(r)(t)(o)}function S(e,n,r,t,o,a){return 5===e.a?e.f(n,r,t,o,a):e(n)(r)(t)(o)(a)}function I(e,n,r,t,o,a,i){return 6===e.a?e.f(n,r,t,o,a,i):e(n)(r)(t)(o)(a)(i)}function j(e,n,r,t,o,a,i,c){return 7===e.a?e.f(n,r,t,o,a,i,c):e(n)(r)(t)(o)(a)(i)(c)}function l(e,n){for(var r,t=[],o=H(e,n,0,t);o&&(r=t.pop());o=H(r.a,r.b,0,t));return o}function H(e,n,r,t){if(e!==n){if("object"!=typeof e||null===e||null===n)return"function"==typeof e&&ee(5),!1;if(100<r)t.push({a:e,b:n});else for(var o in e.$<0&&(e=ot(e),n=ot(n)),e)if(!H(e[o],n[o],r+1,t))return!1}return!0}function b(e,n,r){if("object"!=typeof e)return e===n?0:e<n?-1:1;if(void 0===e.$)return(r=(r=b(e.a,n.a))||b(e.b,n.b))||b(e.c,n.c);for(;e.b&&n.b&&!(r=b(e.a,n.a));e=e.b,n=n.b);return r||(e.b?1:n.b?-1:0)}var U=s(function(e,n){e=b(e,n);return e<0?rt:e?nt:et}),G=0;function f(e,n){var r,t={};for(r in e)t[r]=e[r];for(r in n)t[r]=n[r];return t}function O(e,n){if("string"==typeof e)return e+n;if(!e.b)return n;var r={$:1,a:e.a,b:n};e=e.b;for(var t=r;e.b;e=e.b)t=t.b={$:1,a:e.a,b:n};return r}var m={$:0};function W(e,n){return{$:1,a:e,b:n}}var Y=s(W);function v(e){for(var n=m,r=e.length;r--;)n={$:1,a:e[r],b:n};return n}function Q(e){for(var n=[];e.b;e=e.b)n.push(e.a);return n}var K=d(function(e,n,r){for(var t=[];n.b&&r.b;n=n.b,r=r.b)t.push(z(e,n.a,r.a));return v(t)}),J=s(function(r,e){return v(Q(e).sort(function(e,n){e=z(r,e,n);return e===et?0:e===rt?-1:1}))});var X=d(function(e,n,r){for(var t=Array(e),o=0;o<e;o++)t[o]=r(n+o);return t}),Z=s(function(e,n){for(var r=Array(e),t=0;t<e&&n.b;t++)r[t]=n.a,n=n.b;return r.length=t,{a:r,b:n}});function ee(e){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+e+".md")}var ne=s(function(e,n){return e+n}),re=s(Math.pow),te=Math.cos,oe=Math.sin,ae=Math.tan;var ie=Math.ceil,ce=Math.floor,le=Math.round,ue=Math.sqrt,fe=Math.log;var se=s(function(e,n){return n.join(e)});function de(e){return e+""}var be={$:2,b:function(e){return"number"==typeof e?ut(e):Pe("a FLOAT",e)}},me={$:2,b:function(e){return"string"==typeof e?ut(e):e instanceof String?ut(e+""):Pe("a STRING",e)}};var ve=s(function(e,n){return{$:6,d:e,b:n}});var pe=s(function(e,n){return{$:9,f:e,g:[n]}}),ge=d(function(e,n,r){return{$:9,f:e,g:[n,r]}}),he=s(p);function p(e,n){switch(e.$){case 2:return e.b(n);case 5:return null===n?ut(e.c):Pe("null",n);case 3:return Ce(n)?xe(e.b,n,v):Pe("a LIST",n);case 4:return Ce(n)?xe(e.b,n,ye):Pe("an ARRAY",n);case 6:var r=e.d;return"object"==typeof n&&null!==n&&r in n?(a=p(e.b,n[r]),P(a)?a:at(z(ct,r,a.a))):Pe("an OBJECT with a field named `"+r+"`",n);case 7:r=e.e;return Ce(n)?r<n.length?(a=p(e.b,n[r]),P(a)?a:at(z(lt,r,a.a))):Pe("a LONGER array. Need index "+r+" but only see "+n.length+" entries",n):Pe("an ARRAY",n);case 8:if("object"!=typeof n||null===n||Ce(n))return Pe("an OBJECT",n);var t,o=m;for(t in n)if(n.hasOwnProperty(t)){var a=p(e.b,n[t]);if(!P(a))return at(z(ct,t,a.a));o={$:1,a:{a:t,b:a.a},b:o}}return ut(xt(o));case 9:for(var i=e.f,c=e.g,l=0;l<c.length;l++){a=p(c[l],n);if(!P(a))return a;i=i(a.a)}return ut(i);case 10:a=p(e.b,n);return P(a)?p(e.h(a.a),n):a;case 11:for(var u=m,f=e.g;f.b;f=f.b){a=p(f.a,n);if(P(a))return a;u={$:1,a:a.a,b:u}}return at(ft(xt(u)));case 1:return at(z(it,e.a,n));case 0:return ut(e.a)}}function xe(e,n,r){for(var t=n.length,o=Array(t),a=0;a<t;a++){var i=p(e,n[a]);if(!P(i))return at(z(lt,a,i.a));o[a]=i.a}return ut(r(o))}function Ce(e){return Array.isArray(e)||"undefined"!=typeof FileList&&e instanceof FileList}function ye(n){return z(_t,n.length,function(e){return n[e]})}function Pe(e,n){return at(z(it,"Expecting "+e,n))}function Te(e,n){if(e===n)return!0;if(e.$!==n.$)return!1;switch(e.$){case 0:case 1:return e.a===n.a;case 2:return e.b===n.b;case 5:return e.c===n.c;case 3:case 4:case 8:return Te(e.b,n.b);case 6:return e.d===n.d&&Te(e.b,n.b);case 7:return e.e===n.e&&Te(e.b,n.b);case 9:return e.f===n.f&&Le(e.g,n.g);case 10:return e.h===n.h&&Te(e.b,n.b);case 11:return Le(e.g,n.g)}}function Le(e,n){var r=e.length;if(r!==n.length)return!1;for(var t=0;t<r;t++)if(!Te(e[t],n[t]))return!1;return!0}function Me(e){return{$:0,a:e}}var we=s(function(e,n){return{$:3,b:e,d:n}});var Ne=0;function De(e){e={$:0,e:Ne++,f:e,g:null,h:[]};return _e(e),e}function ze(n){return{$:2,b:function(e){e({$:0,a:De(n)})},c:null}}function $e(e,n){e.h.push(n),_e(e)}var Ve=s(function(n,r){return{$:2,b:function(e){$e(n,r),e({$:0,a:G})},c:null}});var Se=!1,qe=[];function _e(e){if(qe.push(e),!Se){for(Se=!0;e=qe.shift();)!function(n){for(;n.f;){var e=n.f.$;if(0===e||1===e){for(;n.g&&n.g.$!==e;)n.g=n.g.i;if(!n.g)return;n.f=n.g.b(n.f.a),n.g=n.g.i}else{if(2===e)return n.f.c=n.f.b(function(e){n.f=e,_e(n)});if(5===e){if(0===n.h.length)return;n.f=n.f.b(n.h.shift())}else n.g={$:3===e?0:1,b:n.f.b,i:n.g},n.f=n.f.d}}}(e);Se=!1}}function Fe(e,n,r,t,o,a){var e=z(he,e,n?n.flags:void 0),i=(P(e)||ee(2),{}),n=r(e.a),c=n.a,l=a(u,c),r=function(e,n){var r,t;for(t in Ae){var o=Ae[t];o.a&&((r=r||{})[t]=o.a(t,n)),e[t]=function(e,n){var t={g:n,h:void 0},o=e.c,a=e.d,i=e.e,c=e.f;function l(r){return z(we,l,{$:5,b:function(e){var n=e.a;return 0===e.$?$(a,t,n,r):i&&c?V(o,t,n.i,n.j,r):$(o,t,i?n.i:n.j,r)}})}return t.h=De(z(we,l,e.b))}(o,n)}return r}(i,u);function u(e,n){e=z(t,e,c);l(c=e.a,n),He(i,e.b,o(c))}return He(i,n.b,o(c)),r?{ports:r}:{}}var Ae={};var ke=s(function(n,r){return{$:2,b:function(e){n.g(r),e({$:0,a:G})},c:null}}),Ee=s(function(e,n){return z(Ve,e.h,{$:0,a:n})});function Be(n){return function(e){return{$:1,k:n,l:e}}}function Re(e){return{$:2,m:e}}var Ie=[],je=!1;function He(e,n,r){if(Ie.push({p:e,q:n,r:r}),!je){je=!0;for(var t;t=Ie.shift();)!function(e,n,r){var t,o={};for(t in Ue(!0,n,o,null),Ue(!1,r,o,null),e)$e(e[t],{$:"fx",a:o[t]||{i:m,j:m}})}(t.p,t.q,t.r);je=!1}}function Ue(e,n,r,t){switch(n.$){case 1:var o=n.k,a=function(e,n,r,t){function o(e){for(var n=r;n;n=n.t)e=n.s(e);return e}return z(e?Ae[n].e:Ae[n].f,o,t)}(e,o,t,n.l);return void(r[o]=function(e,n,r){return r=r||{i:m,j:m},e?r.i={$:1,a:n,b:r.i}:r.j={$:1,a:n,b:r.j},r}(e,a,r[o]));case 2:for(var i=n.m;i.b;i=i.b)Ue(e,i.a,r,t);return;case 3:Ue(e,n.o,r,{s:n.n,t:t})}}var Ge;var Oe="undefined"!=typeof document?document:{};function We(e){return{$:0,a:e}}var Ye=s(function(a,i){return s(function(e,n){for(var r=[],t=0;n.b;n=n.b){var o=n.a;t+=o.b||0,r.push(o)}return t+=r.length,{$:1,c:i,d:nn(e),e:r,f:a,b:t}})})(void 0),Qe=s(function(a,i){return s(function(e,n){for(var r=[],t=0;n.b;n=n.b){var o=n.a;t+=o.b.b||0,r.push(o)}return t+=r.length,{$:2,c:i,d:nn(e),e:r,f:a,b:t}})})(void 0);var Ke=s(function(e,n){return{$:"a0",n:e,o:n}}),Je=s(function(e,n){return{$:"a1",n:e,o:n}}),Xe=s(function(e,n){return{$:"a3",n:e,o:n}}),Ze=/^script$/i;var en;function nn(e){for(var n={};e.b;e=e.b){var r,t=e.a,o=t.$,a=t.n,t=t.o;"a2"===o?"className"===a?rn(n,a,t):n[a]=t:(r=n[o]||(n[o]={}),"a3"===o&&"class"===a?rn(r,a,t):r[a]=t)}return n}function rn(e,n,r){var t=e[n];e[n]=t?t+" "+r:r}function tn(e,n){var r=e.$;if(5===r)return tn(e.k||(e.k=e.m()),n);if(0===r)return Oe.createTextNode(e.a);if(4===r){for(var t=e.k,o=e.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:n};(i=tn(t,a)).elm_event_node_ref=a}else if(3===r)on(i=e.h(e.g),n,e.d);else{var i=e.f?Oe.createElementNS(e.f,e.c):Oe.createElement(e.c);Ge&&"a"==e.c&&i.addEventListener("click",Ge(i)),on(i,n,e.d);for(var c=e.e,l=0;l<c.length;l++)i.appendChild(tn(1===r?c[l]:c[l].b,n))}return i}function on(e,n,r){for(var t in r){var o=r[t];"a1"===t?function(e,n){var r,t=e.style;for(r in n)t[r]=n[r]}(e,o):"a0"===t?function(e,n,r){var t,o=e.elmFs||(e.elmFs={});for(t in r){var a=r[t],i=o[t];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}e.removeEventListener(t,i)}i=function(l,e){function u(e){var n=u.q,r=p(n.a,e);if(P(r)){for(var t,n=Et(n),r=r.a,o=n?n<3?r.a:r.aK:r,a=1==n?r.b:3==n&&r.dx,i=(a&&e.stopPropagation(),(2==n?r.b:3==n&&r.dm)&&e.preventDefault(),l);t=i.j;){if("function"==typeof t)o=t(o);else for(var c=t.length;c--;)o=t[c](o);i=i.p}i(o,a)}}return u.q=e,u}(n,a),e.addEventListener(t,i,en&&{passive:Et(a)<2}),o[t]=i}else e.removeEventListener(t,i),o[t]=void 0}}(e,n,o):"a3"===t?function(e,n){for(var r in n){var t=n[r];void 0!==t?e.setAttribute(r,t):e.removeAttribute(r)}}(e,o):"a4"===t?function(e,n){for(var r in n){var t=n[r],o=t.f,t=t.o;void 0!==t?e.setAttributeNS(o,r,t):e.removeAttributeNS(o,r)}}(e,o):("value"!==t&&"checked"!==t||e[t]!==o)&&(e[t]=o)}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){en=!0}}))}catch(e){}function an(e,n){var r=[];return _(e,n,r,0),r}function q(e,n,r,t){n={$:n,r:r,s:t,t:void 0,u:void 0};return e.push(n),n}function _(e,n,r,t){if(e!==n){var o=e.$,a=n.$;if(o!==a){if(1!==o||2!==a)return void q(r,0,t,n);n=function(e){for(var n=e.e,r=n.length,t=Array(r),o=0;o<r;o++)t[o]=n[o].b;return{$:1,c:e.c,d:e.d,e:t,f:e.f,b:e.b}}(n),a=1}switch(a){case 5:for(var i=e.l,c=n.l,l=i.length,u=l===c.length;u&&l--;)u=i[l]===c[l];if(u)return void(n.k=e.k);n.k=n.m();var f=[];return _(e.k,n.k,f,0),void(0<f.length&&q(r,1,t,f));case 4:for(var s=e.j,d=n.j,b=!1,m=e.k;4===m.$;)b=!0,"object"!=typeof s?s=[s,m.j]:s.push(m.j),m=m.k;for(var v=n.k;4===v.$;)b=!0,"object"!=typeof d?d=[d,v.j]:d.push(v.j),v=v.k;return b&&s.length!==d.length?void q(r,0,t,n):((b?function(e,n){for(var r=0;r<e.length;r++)if(e[r]!==n[r])return;return 1}(s,d):s===d)||q(r,2,t,d),void _(m,v,r,t+1));case 0:return void(e.a!==n.a&&q(r,3,t,n.a));case 1:return void cn(e,n,r,t,un);case 2:return void cn(e,n,r,t,fn);case 3:if(e.h!==n.h)return void q(r,0,t,n);f=ln(e.d,n.d),f=(f&&q(r,4,t,f),n.i(e.g,n.g));f&&q(r,5,t,f)}}}function cn(e,n,r,t,o){var a;e.c!==n.c||e.f!==n.f?q(r,0,t,n):((a=ln(e.d,n.d))&&q(r,4,t,a),o(e,n,r,t))}function ln(e,n,r){var t,o,a,i,c;for(o in e)"a1"===o||"a0"===o||"a3"===o||"a4"===o?(a=ln(e[o],n[o]||{},o))&&((t=t||{})[o]=a):o in n?(a=e[o])===(i=n[o])&&"value"!==o&&"checked"!==o||"a0"===r&&function(e,n){return e.$==n.$&&Te(e.a,n.a)}(a,i)||((t=t||{})[o]=i):(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:e[o].f,o:void 0}:"string"==typeof e[o]?"":null;for(c in n)c in e||((t=t||{})[c]=n[c]);return t}function un(e,n,r,t){var o=e.e,a=n.e,e=o.length,n=a.length;n<e?q(r,6,t,{v:n,i:e-n}):e<n&&q(r,7,t,{v:e,e:a});for(var i=e<n?e:n,c=0;c<i;c++){var l=o[c];_(l,a[c],r,++t),t+=l.b||0}}function fn(e,n,r,t){for(var o=[],a={},i=[],c=e.e,l=n.e,u=c.length,f=l.length,s=0,d=0,b=t;s<u&&d<f;){var m=c[s],v=l[d],p=m.a,g=v.a,h=m.b,x=v.b,C=void 0,y=void 0;if(p===g)_(h,x,o,++b),b+=h.b||0,s++,d++;else{var P,T,L,M,w=c[s+1],N=l[d+1];if(w&&(T=w.b,y=g===(P=w.a)),N&&(M=N.b,C=p===(L=N.a)),C&&y)_(h,M,o,++b),dn(a,o,p,x,d,i),b+=h.b||0,bn(a,o,p,T,++b),b+=T.b||0,s+=2,d+=2;else if(C)b++,dn(a,o,g,x,d,i),_(h,M,o,b),b+=h.b||0,s+=1,d+=2;else if(y)bn(a,o,p,h,++b),b+=h.b||0,_(T,x,o,++b),b+=T.b||0,s+=2,d+=1;else{if(!w||P!==L)break;bn(a,o,p,h,++b),dn(a,o,g,x,d,i),b+=h.b||0,_(T,M,o,++b),b+=T.b||0,s+=2,d+=2}}}for(;s<u;){h=(m=c[s]).b;bn(a,o,m.a,h,++b),b+=h.b||0,s++}for(;d<f;){var D=D||[];dn(a,o,(v=l[d]).a,v.b,void 0,D),d++}(0<o.length||0<i.length||D)&&q(r,8,t,{w:o,x:i,y:D})}var sn="_elmW6BL";function dn(e,n,r,t,o,a){var i,c=e[r];c?1===c.c?(a.push({r:o,A:c}),c.c=2,_(c.z,t,i=[],c.r),c.r=o,c.s.s={w:i,A:c}):dn(e,n,r+sn,t,o,a):(a.push({r:o,A:c={c:0,z:t,r:o,s:void 0}}),e[r]=c)}function bn(e,n,r,t,o){var a,i=e[r];i?0===i.c?(i.c=2,_(t,i.z,a=[],o),q(n,9,o,{w:a,A:i})):bn(e,n,r+sn,t,o):(a=q(n,9,o,void 0),e[r]={c:1,z:t,r:o,s:a})}function mn(e,n,r,t){!function e(n,r,t,o,a,i,c){var l=t[o];var u=l.r;for(;u===a;){var f,s=l.$;if(1===s?mn(n,r.k,l.s,c):8===s?(l.t=n,l.u=c,0<(f=l.s.w).length&&e(n,r,f,0,a,i,c)):9===s?(l.t=n,l.u=c,(s=l.s)&&(s.A.s=n,0<(f=s.w).length)&&e(n,r,f,0,a,i,c)):(l.t=n,l.u=c),!(l=t[++o])||(u=l.r)>i)return o}var d=r.$;if(4===d){for(var b=r.k;4===b.$;)b=b.k;return e(n,b,t,o,a+1,i,n.elm_event_node_ref)}var m=r.e;var v=n.childNodes;for(var p=0;p<m.length;p++){var g=1===d?m[p]:m[p].b,h=++a+(g.b||0);if(a<=u&&u<=h&&(o=e(v[p],g,t,o,a,h,c),!(l=t[o])||(u=l.r)>i))return o;a=h}return o}(e,n,r,0,0,n.b,t)}function vn(e,n,r,t){return 0===r.length?e:(mn(e,n,r,t),pn(e,r))}function pn(e,n){for(var r=0;r<n.length;r++){var t=n[r],o=t.t,t=function(e,n){switch(n.$){case 0:return function(e,n,r){var t=e.parentNode,n=tn(n,r);n.elm_event_node_ref||(n.elm_event_node_ref=e.elm_event_node_ref);t&&n!==e&&t.replaceChild(n,e);return n}(e,n.s,n.u);case 4:return on(e,n.u,n.s),e;case 3:return e.replaceData(0,e.length,n.s),e;case 1:return pn(e,n.s);case 2:return e.elm_event_node_ref?e.elm_event_node_ref.j=n.s:e.elm_event_node_ref={j:n.s,p:n.u},e;case 6:for(var r=n.s,t=0;t<r.i;t++)e.removeChild(e.childNodes[r.v]);return e;case 7:for(var o=(r=n.s).e,t=r.v,a=e.childNodes[t];t<o.length;t++)e.insertBefore(tn(o[t],n.u),a);return e;case 9:var i;return(r=n.s)?(void 0!==(i=r.A).r&&e.parentNode.removeChild(e),i.s=pn(e,r.w)):e.parentNode.removeChild(e),e;case 8:return function(e,n){for(var r=n.s,t=function(e,n){if(e){for(var r=Oe.createDocumentFragment(),t=0;t<e.length;t++){var o=e[t].A;r.appendChild(2===o.c?o.s:tn(o.z,n.u))}return r}}(r.y,n),o=(e=pn(e,r.w),r.x),a=0;a<o.length;a++){var i=o[a],c=i.A,c=2===c.c?c.s:tn(c.z,n.u);e.insertBefore(c,e.childNodes[i.r])}t&&e.appendChild(t);return e}(e,n);case 5:return n.s(e);default:ee(10)}}(o,t);o===e&&(e=t)}return e}function gn(e){if(3===e.nodeType)return{$:0,a:e.textContent};if(1!==e.nodeType)return{$:0,a:""};for(var n=m,r=e.attributes,t=r.length;t--;)var o=r[t],n={$:1,a:z(Xe,o.name,o.value),b:n};for(var a=e.tagName.toLowerCase(),i=m,c=e.childNodes,t=c.length;t--;)i={$:1,a:gn(c[t]),b:i};return $(Ye,a,n,i)}var hn=u(function(n,e,r,i){return Fe(e,i,n.fX,n.gz,n.gt,function(r,e){var t=n.gC,o=i.node,a=gn(o);return yn(e,function(e){var e=t(e),n=an(a,e);o=vn(o,a,n,r),a=e})})}),xn="undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(e){clearTimeout(e)},Cn="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(e){return setTimeout(e,1e3/60)};function yn(r,t){t(r);var o=0;function a(){o=1===o?0:(Cn(a),t(r),1)}return function(e,n){r=e,n?(t(r),2===o&&(o=1)):(0===o&&Cn(a),o=2)}}var Pn={addEventListener:function(){},removeEventListener:function(){}},Tn="undefined"!=typeof document?document:Pn,Ln="undefined"!=typeof window?window:Pn,Mn=d(function(r,t,o){return ze({$:2,b:function(e){function n(e){De(o(e))}return r.addEventListener(t,n,en&&{passive:!0}),function(){r.removeEventListener(t,n)}},c:null})}),wn=s(function(e,n){e=p(e,n);return P(e)?x(e.a):C});Pn=s(function(r,t){return{$:2,b:function(e){var n=setInterval(function(){De(t)},r);return function(){clearInterval(n)}},c:null}});var Nn=s(function(e,n){return new Float64Array([e,n])});new Float64Array(3),new Float64Array(3),new Float64Array(3);var Dn=d(function(e,n,r){return new Float64Array([e,n,r])});var zn=s(function(e,n){return new Float64Array([n[0]*e,n[1]*e,n[2]*e])});var $n=u(function(e,n,r,t){return new Float64Array([e,n,r,t])});new Float64Array(16),new Float64Array(16),new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);var Vn=0;function Sn(e,n){for(;n.b;n=n.b)e(n.a)}function qn(e){for(var n=0;e.b;e=e.b)n++;return n}function _n(e){e.scissor.enabled&&(e.gl.disable(e.gl.SCISSOR_TEST),e.scissor.enabled=!1)}function Fn(e){var n=e.colorMask;n.a&&n.b&&n.c&&n.d||(e.gl.colorMask(!0,!0,!0,!0),n.a=!0,n.b=!0,n.c=!0,n.d=!0)}var An="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(e){setTimeout(e,1e3/60)},kn=E(function(e,n,r,t,o){return{$:0,a:e,b:n,c:r,d:t,e:o}}),En=s(function(e,n){var r=e.blend;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.BLEND),r.enabled=!0),r.a===n.a&&r.d===n.d||(e.gl.blendEquationSeparate(n.a,n.d),r.a=n.a,r.d=n.d),r.b===n.b&&r.c===n.c&&r.e===n.e&&r.f===n.f||(e.gl.blendFuncSeparate(n.b,n.c,n.e,n.f),r.b=n.b,r.c=n.c,r.e=n.e,r.f=n.f),r.g===n.g&&r.h===n.h&&r.i===n.i&&r.j===n.j||(e.gl.blendColor(n.g,n.h,n.i,n.j),r.g=n.g,r.h=n.h,r.i=n.i,r.j=n.j)}),Bn=s(function(e,n){var r=e.depthTest;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.DEPTH_TEST),r.enabled=!0),r.a!==n.a&&(e.gl.depthFunc(n.a),r.a=n.a),r.b!==n.b&&(e.gl.depthMask(n.b),r.b=n.b),r.c===n.c&&r.d===n.d||(e.gl.depthRange(n.c,n.d),r.c=n.c,r.d=n.d)}),Rn=s(function(e,n){var r=e.stencilTest;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.STENCIL_TEST),r.enabled=!0),r.d===n.d&&r.a===n.a&&r.b===n.b||(e.gl.stencilFuncSeparate(e.gl.FRONT,n.d,n.a,n.b),r.d=n.d),r.e===n.e&&r.f===n.f&&r.g===n.g||(e.gl.stencilOpSeparate(e.gl.FRONT,n.e,n.f,n.g),r.e=n.e,r.f=n.f,r.g=n.g),r.c!==n.c&&(e.gl.stencilMask(n.c),r.c=n.c),r.h===n.h&&r.a===n.a&&r.b===n.b||(e.gl.stencilFuncSeparate(e.gl.BACK,n.h,n.a,n.b),r.h=n.h,r.a=n.a,r.b=n.b),r.i===n.i&&r.j===n.j&&r.k===n.k||(e.gl.stencilOpSeparate(e.gl.BACK,n.i,n.j,n.k),r.i=n.i,r.j=n.j,r.k=n.k)}),In=s(function(e,n){var r=e.scissor;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.SCISSOR_TEST),r.enabled=!0),r.a===n.a&&r.b===n.b&&r.c===n.c&&r.d===n.d||(e.gl.scissor(n.a,n.b,n.c,n.d),r.a=n.a,r.b=n.b,r.c=n.c,r.d=n.d)}),jn=s(function(e,n){var r=e.colorMask;r.toggle=e.toggle,r.enabled=!0,r.a===n.a&&r.b===n.b&&r.c===n.c&&r.d===n.d||(e.gl.colorMask(n.a,n.b,n.c,n.d),r.a=n.a,r.b=n.b,r.c=n.c,r.d=n.d)}),Hn=s(function(e,n){var r=e.cullFace;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.CULL_FACE),r.enabled=!0),r.a!==n.a&&(e.gl.cullFace(n.a),r.a=n.a)}),Un=s(function(e,n){var r=e.polygonOffset;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===n.a&&r.b===n.b||(e.gl.polygonOffset(n.a,n.b),r.a=n.a,r.b=n.b)}),Gn=s(function(e,n){var r=e.sampleCoverage;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===n.a&&r.b===n.b||(e.gl.sampleCoverage(n.a,n.b),r.a=n.a,r.b=n.b)}),On=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],Wn=[function(e){e.blend.enabled&&(e.gl.disable(e.gl.BLEND),e.blend.enabled=!1)},function(e){e.depthTest.enabled&&(e.gl.disable(e.gl.DEPTH_TEST),e.depthTest.enabled=!1)},function(e){e.stencilTest.enabled&&(e.gl.disable(e.gl.STENCIL_TEST),e.stencilTest.enabled=!1)},_n,Fn,function(e){e.gl.disable(e.gl.CULL_FACE)},function(e){e.gl.disable(e.gl.POLYGON_OFFSET_FILL)},function(e){e.gl.disable(e.gl.SAMPLE_COVERAGE)},function(e){e.gl.disable(e.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function Yn(e,n,r){r=e.createShader(r);return e.shaderSource(r,"#extension GL_OES_standard_derivatives : enable\n"+n),e.compileShader(r),r}function Qn(e,n){switch(n){case e.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:e.FLOAT};case e.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:e.FLOAT};case e.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:e.FLOAT};case e.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:e.FLOAT};case e.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:e.FLOAT};case e.INT:return{size:1,arraySize:1,type:Int32Array,baseType:e.INT}}}function Kn(e,n,r,t){for(var c=r.a.dT,l=[],o=0;o<c;o++)l.push(String.fromCharCode(97+o));var a=Qn(e,n.type);if(void 0===a)throw Error("No info available for: "+n.type);var i=0,u=a.size*a.arraySize*c,f=new a.type(qn(r.b)*u),r=(Sn(function(e){!function(n,r,t,o,a){var i;if(1===c)for(i=0;i<r;i++)n[t++]=1===r?o[a]:o[a][i];else l.forEach(function(e){for(i=0;i<r;i++)n[t++]=1===r?o[e][a]:o[e][a][i]})}(f,a.size*a.arraySize,i,e,t[n.name]||n.name),i+=u},r.b),e.createBuffer());return e.bindBuffer(e.ARRAY_BUFFER,r),e.bufferData(e.ARRAY_BUFFER,f,e.STATIC_DRAW),r}function Jn(e,n){var r,t;return 0<n.a.d2?(r=e.createBuffer(),t=function(e,n){var r,t=new Uint32Array(qn(e)*n),o=0;return Sn(function(e){if(1===n)t[o++]=e;else for(r=0;r<n;r++)t[o++]=e[String.fromCharCode(97+r)]},e),t}(n.c,n.a.d2),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,r),e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}):{numIndices:n.a.dT*qn(n.b),indexBuffer:null,buffers:{}}}var Xn=s(function(h,e){var x=h.f,C=x.gl;return C&&(C.viewport(0,0,C.drawingBufferWidth,C.drawingBufferHeight),x.depthTest.b||(C.depthMask(!0),x.depthTest.b=!0),x.stencilTest.c!==x.STENCIL_WRITEMASK&&(C.stencilMask(x.STENCIL_WRITEMASK),x.stencilTest.c=x.STENCIL_WRITEMASK),_n(x),Fn(x),C.clear(C.COLOR_BUFFER_BIT|C.DEPTH_BUFFER_BIT|C.STENCIL_BUFFER_BIT),Sn(function(e){if(e.d.b.b){var n,r,t;if(!(i=e.b.id&&e.c.id?x.programs[n=e.b.id+"#"+e.c.id]:i)){e.b.id?o=x.shaders[e.b.id]:e.b.id=Vn++,o||(o=Yn(C,e.b.src,C.VERTEX_SHADER),x.shaders[e.b.id]=o),e.c.id?a=x.shaders[e.c.id]:e.c.id=Vn++,a||(a=Yn(C,e.c.src,C.FRAGMENT_SHADER),x.shaders[e.c.id]=a);for(var o,a,i,c=function(e,n,r){var t=e.createProgram();if(e.attachShader(t,n),e.attachShader(t,r),e.linkProgram(t),e.getProgramParameter(t,e.LINK_STATUS))return t;throw"Link failed: "+e.getProgramInfoLog(t)+"\nvs info-log: "+e.getShaderInfoLog(n)+"\nfs info-log: "+e.getShaderInfoLog(r)}(C,o,a),l=((i={glProgram:c,attributes:Object.assign({},e.b.attributes,e.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(a,e,n,r){var t=n.glProgram,i=n.currentUniforms,c=0,l=e.f;for(var o={},u=a.getProgramParameter(t,a.ACTIVE_UNIFORMS),f=0;f<u;f++){var s=a.getActiveUniform(t,f);o[r[s.name]||s.name]=function(e,n){var r=n.name,t=a.getUniformLocation(e,r);switch(n.type){case a.INT:return function(e){i[r]!==e&&(a.uniform1i(t,e),i[r]=e)};case a.FLOAT:return function(e){i[r]!==e&&(a.uniform1f(t,e),i[r]=e)};case a.FLOAT_VEC2:return function(e){i[r]!==e&&(a.uniform2f(t,e[0],e[1]),i[r]=e)};case a.FLOAT_VEC3:return function(e){i[r]!==e&&(a.uniform3f(t,e[0],e[1],e[2]),i[r]=e)};case a.FLOAT_VEC4:return function(e){i[r]!==e&&(a.uniform4f(t,e[0],e[1],e[2],e[3]),i[r]=e)};case a.FLOAT_MAT4:return function(e){i[r]!==e&&(a.uniformMatrix4fv(t,!1,new Float32Array(e)),i[r]=e)};case a.SAMPLER_2D:var o=c++;return function(e){a.activeTexture(a.TEXTURE0+o);var n=l.textures.get(e);n||(n=e.fu(a),l.textures.set(e,n)),a.bindTexture(a.TEXTURE_2D,n),i[r]!==e&&(a.uniform1i(t,o),i[r]=e)};case a.BOOL:return function(e){i[r]!==e&&(a.uniform1i(t,e),i[r]=e)};default:return function(){}}}(t,s)}return o}(C,h,i,Object.assign({},e.b.uniforms,e.c.uniforms)),C.getProgramParameter(c,C.ACTIVE_ATTRIBUTES)),u=0;u<l;u++){var f=C.getActiveAttrib(c,u),s=C.getAttribLocation(c,f.name);i.activeAttributes.push(f),i.activeAttributeLocations.push(s)}x.programs[n=e.b.id+"#"+e.c.id]=i}x.lastProgId!==n&&(C.useProgram(i.glProgram),x.lastProgId=n),r=i.uniformSetters,Object.keys(t=e.e).forEach(function(e){var n=r[e];n&&n(t[e])});var d=x.buffers.get(e.d);for(d||(d=Jn(C,e.d),x.buffers.set(e.d,d)),u=0;u<i.activeAttributes.length;u++){s=i.activeAttributeLocations[u],void 0===d.buffers[(f=i.activeAttributes[u]).name]&&(d.buffers[f.name]=Kn(C,f,e.d,i.attributes)),C.bindBuffer(C.ARRAY_BUFFER,d.buffers[f.name]);var b=Qn(C,f.type);if(1===b.arraySize)C.enableVertexAttribArray(s),C.vertexAttribPointer(s,b.size,b.baseType,!1,0,0);else for(var m=4*b.size,v=m*b.arraySize,p=0;p<b.arraySize;p++)C.enableVertexAttribArray(s+p),C.vertexAttribPointer(s+p,b.size,b.baseType,!1,v,m*p)}for(x.toggle=!x.toggle,Sn(vc(x),e.a),u=0;u<9;u++){var g=x[On[u]];g.toggle!==x.toggle&&g.enabled&&(Wn[u](x),g.enabled=!1,g.toggle=x.toggle)}d.indexBuffer?(C.bindBuffer(C.ELEMENT_ARRAY_BUFFER,d.indexBuffer),C.drawElements(e.d.a.eC,d.numIndices,C.UNSIGNED_INT,0)):C.drawArrays(e.d.a.eC,0,d.numIndices)}},h.g)),e});var Zn=d(function(e,n,r){return function(e,n,r,t){return{$:3,d:nn(e),g:n,h:r,i:t}}(n,{g:r,f:{},h:e},er,nr)});function er(e){var n={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]},r=(Sn(function(e){},e.h),Oe.createElement("canvas")),t=r.getContext&&(r.getContext("webgl",n.contextAttributes)||r.getContext("experimental-webgl",n.contextAttributes));return t&&void 0!==WeakMap?(n.sceneSettings.forEach(function(e){e(t)}),t.getExtension("OES_standard_derivatives"),t.getExtension("OES_element_index_uint"),e.f.gl=t,e.f.toggle=!1,e.f.blend={enabled:!1,toggle:!1},e.f.depthTest={enabled:!1,toggle:!1},e.f.stencilTest={enabled:!1,toggle:!1},e.f.scissor={enabled:!1,toggle:!1},e.f.colorMask={enabled:!1,toggle:!1},e.f.cullFace={enabled:!1,toggle:!1},e.f.polygonOffset={enabled:!1,toggle:!1},e.f.sampleCoverage={enabled:!1,toggle:!1},e.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},e.f.shaders=[],e.f.programs={},e.f.lastProgId=null,e.f.buffers=new WeakMap,e.f.textures=new WeakMap,e.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),An(function(){return z(Xn,e,r)})):(r=Oe.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function nr(e,n){return n.f=e.f,Xn(n)}function rr(e){return $(mt,s(function(e,n){return n+1}),0,e)}function tr(e){return e}function or(e){return e}function ar(e){return $(Rt,jt(h),T(m),e)}function ir(e){return no(2*eo*e)}function cr(e){return{$:0,a:e}}function lr(e){return{$:2,a:e}}function ur(e){return{$:3,a:e}}function fr(e){return{a:O(e.a?"w_":"d_",e.b),b:e}}function sr(e){return $(mt,s(function(e,n){return $(so,e.a,e.b,n)}),Wt,e)}function dr(e){return e}function br(e){return{$:7,a:e}}function mr(e){return e.b?x(e.a):C}function g(e){return e}function vr(e){return e}function pr(e){return e}function gr(e){var n,r=z(y,N(e.b0),z(y,N(e.b2),N(e.b4)));return r?Yo((n=e.b0/r)*n+(n=e.b2/r)*n+(n=e.b4/r)*n)*r:Qo}function hr(e){return no(eo*(e/180))}function xr(e){return e.dc}function Cr(e){return e.dH}function yr(e){return e.fy}function Pr(e){return function(e){return e}(e.fg)}function Tr(e){return e.fx}function Lr(e){return xr(e)}function Mr(e){return{b0:-e.b0,b2:-e.b2,b4:-e.b4}}function wr(e){return Mr(Cr(e))}function Nr(e){var n=e.b;return z(zi,1664525*e.a+n>>>0,n)}function Dr(e){return((e=277803737*((e=e.a)^e>>>4+(e>>>28)))>>>22^e)>>>0}function zr(e){return $(Jt,e.a,e.b,0)}function $r(e){return $(Rt,Gi,m,e)}function Vr(e){var n,r,t,o,a,i,c,l;return-1===e.$&&-1===e.d.$&&-1===e.e.$?-1!==e.e.d.$||e.e.d.a?(t=(l=e.e).b,o=l.c,a=l.d,l=l.e,S(w,1,e.b,e.c,S(w,0,(n=e.d).b,n.c,n.d,n.e),S(w,0,t,o,a,l))):(t=(r=e.e).b,o=r.c,i=(a=r.d).d,c=a.e,l=r.e,S(w,0,a.b,a.c,S(w,1,e.b,e.c,S(w,0,(n=e.d).b,n.c,n.d,n.e),i),S(w,1,t,o,c,l))):e}function Sr(e){var n,r,t,o,a,i,c,l,u;return-1===e.$&&-1===e.d.$&&-1===e.e.$?-1!==e.d.d.$||e.d.d.a?(i=(u=e.e).b,c=u.c,l=u.d,u=u.e,S(w,1,n=e.b,r=e.c,S(w,0,(o=e.d).b,o.c,o.d,o=o.e),S(w,0,i,c,l,u))):(n=e.b,r=e.c,o=(t=e.d).e,i=(a=e.e).b,c=a.c,l=a.d,u=a.e,S(w,0,t.b,t.c,S(w,1,(a=t.d).b,a.c,a.d,a.e),S(w,1,n,r,o,S(w,0,i,c,l,u)))):e}function qr(e){var n,r,t,o,a,i;return-1===e.$&&-1===e.d.$?(n=e.a,r=e.b,t=e.c,i=(o=e.d).d,a=e.e,1===o.a?-1!==i.$||i.a?-1===(i=Vr(e)).$?(e=i.e,S(uo,i.a,i.b,i.c,qr(i.d),e)):Ot:S(w,n,r,t,qr(o),a):S(w,n,r,t,qr(o),a)):Ot}function _r(e){return z(ac,0,oc(cc(e)))}function Fr(e){return{$:4,a:z(uc,e,m)}}function Ar(e){return e}function kr(e){return{$:5,a:e}}function Er(e){return{a:z(xi,nl(e),Xc(e)),b:z(xi,rl(e),Zc(e)),c:z(xi,tl(e),el(e))}}function Br(e){return e}function Rr(e){var n=(t=Er(e)).a,r=t.b,t=t.c;return{fq:Br(function(e){return $(Jc,Yc(e),Qc(e),Kc(e))}(e)),fQ:n/2,fR:r/2,fS:t/2}}function Ir(f){return function(u){return function(l){return function(c){return function(i){return function(a){return function(o){return function(t){return function(r){return function(n){return function(e){return{$:2,a:f,b:u,c:l,d:c,e:i,f:a,g:o,h:t,i:r,j:n,k:e}}}}}}}}}}}}function jr(e){return Qe(function(e){return Ze.test(e)?"p":e}(e))}function Hr(e){function n(e){return pi(1e4*e)/100}var r=e.b,t=e.c,o=e.d;return e=v(["rgba(",Tl(n(e.a)),"%,",Tl(n(r)),"%,",Tl(n(t)),"%,",Tl(pi(1e3*o)/1e3),")"]),z(bt,"",e)}function Ur(e){return e}function Gr(e){return $(ul,{c2:e.c2,dp:e.dp,dE:e.dE},{bE:e.bE,bU:e.bU,b5:e.b5,b6:e.b6},{bE:e.bE,bU:e.bU,b5:e.b5,b6:e.b6})}function Or(e){return S(A,v([Gr(e),V(Sl,!1,!1,!1,!1)]),kl,Fl,Al,{})}function Wr(e){return Or({bE:7680,c2:15,dp:8,bU:516,dE:z(Bl,2,e+4),b5:5386,b6:5386})}function Yr(e){return e}function Qr(e){return e}function Kr(e){return V(ql,515,e.aq,e.al,e.ak)}function Jr(n){var e=function(e){return e.gD}(n.fo),r=qa({dc:Lr(e),dF:function(e){return _a(e)}(e),dG:function(e){return Fa(e)}(e),dH:Mr(wr(e))}),t=Fr(n.fG);if(1===(r=V(eu,r,1,C,v([t]))).$)return m;var r=r.a,o=z(su,fu,e),a=z(ei,.99,z(Yl,D(n.ft),La(el(r)))),i=Er(r),i=gr($(di,i.a,i.b,i.c)),r=z(ei,1.01,z(Jl,i,La(tl(r)))),e=(a=uu(r=z(iu,n.fo,{ff:n.ff,fN:r,f7:a})).et)?Qr(Mr(wr(e))):g(Lr(e)),c=(l=function(){var e=n.aO;switch(e.$){case 0:return{a:0,b:0};case 1:return{a:1,b:0};case 2:return{a:2,b:0};case 3:return{a:3,b:e.a};case 4:return{a:4,b:e.a};default:return{a:5,b:0}}}()).a,l=l.b,u=z(Dl,n.aF,n.aR),i=wc({ee:0,ef:e.b0,eg:Vc(u),eh:n.e2,ei:0,ej:e.b2,ek:Sc(u),el:pr(i),em:0,en:e.b4,eo:qc(u),ep:c,eq:0,er:a,es:0,et:l}),f=I(Vl,i,o,r,nu,t,{Y:m,ah:m,aj:m}),s=n.aI;switch(s.$){case 0:var d=s.a;return $r(v([$(k,f.Y,{a:d,b:Ml},Ul),$(k,f.ah,tu,Ul)]));case 1:d=s.a;return $r(v([$(k,f.Y,tu,Ul),v([ru]),$(k,f.aj,d.bK,_l),v([Wr(0)]),$(k,f.Y,{a:d,b:Ml},ou),$(k,f.ah,tu,Ul)]));default:var d=s.a,b=s.b;return $r(v([$(k,f.Y,{a:b,b:Ml},Ul),v([ru]),z(Il,f.aj,d),$(lu,f.Y,b,rr(d)),$(k,f.ah,tu,Ul)]))}}function Xr(e){return e.$?_u:z(Fu,(e=e.a).by,e.m)}var Zr,et=1,nt=2,rt=0,h=Y,tt=d(function(e,n,r){for(;;){if(-2===r.$)return n;var t=r.d,o=e,a=$(e,r.b,r.c,$(tt,e,n,r.e));e=o,n=a,r=t}}),ot=function(e){return $(tt,d(function(e,n,r){return z(h,{a:e,b:n},r)}),m,e)},at=function(e){return{$:1,a:e}},it=s(function(e,n){return{$:3,a:e,b:n}}),ct=s(function(e,n){return{$:0,a:e,b:n}}),lt=s(function(e,n){return{$:1,a:e,b:n}}),ut=function(e){return{$:0,a:e}},ft=function(e){return{$:2,a:e}},st=ne,x=function(e){return{$:0,a:e}},C={$:1},dt=de,bt=s(function(e,n){return z(se,e,Q(n))}),mt=d(function(e,n,r){for(;;){if(!r.b)return n;var t=r.b,o=e,a=z(e,r.a,n);e=o,n=a,r=t}}),vt=K,pt=d(function(e,n,r){for(;;){if(1<=b(e,n))return r;var t=e,o=n-1,a=z(h,n,r);e=t,n=o,r=a}}),gt=s(function(e,n){return $(pt,e,n,m)}),ht=s(function(e,n){return $(vt,e,z(gt,0,rr(n)-1),n)}),xt=function(e){return $(mt,h,m,e)},Ct=u(function(e,n,r,t){return{$:0,a:e,b:n,c:r,d:t}}),yt=[],Pt=ie,Tt=s(function(e,n){return fe(n)/fe(e)}),Lt=Pt(z(Tt,2,32)),Mt=V(Ct,0,Lt,yt,yt),wt=X,Nt=ce,Dt=function(e){return e.length},y=s(function(e,n){return 0<b(e,n)?e:n}),zt=Z,$t=s(function(e,n){for(;;){var r=z(zt,32,e),t=r.b,r=z(h,{$:0,a:r.a},n);if(!t.b)return xt(r);e=t,n=r}}),Vt=s(function(e,n){for(;;){var r=Pt(n/32);if(1===r)return z(zt,32,e).a;e=z($t,e,m),n=r}}),St=s(function(e,n){var r,t;return n.s?(t=Nt(z(Tt,32,(r=32*n.s)-1)),e=e?xt(n.G):n.G,e=z(Vt,e,n.s),V(Ct,Dt(n.w)+r,z(y,5,t*Lt),e,n.w)):V(Ct,Dt(n.w),Lt,yt,n.w)}),qt=E(function(e,n,r,t,o){for(;;){if(n<0)return z(St,!1,{G:t,s:r/32|0,w:o});var a={$:1,a:$(wt,32,n,e)};e=e,n=n-32,r=r,t=z(h,a,t),o=o}}),_t=s(function(e,n){var r;return 0<e?S(qt,n,e-(r=e%32)-32,e,m,$(wt,r,e-r,n)):Mt}),P=function(e){return!e.$},Ft=pe,At=ge,kt=function(e){return{$:0,a:e}},Et=function(e){switch(e.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},T=Me,Y=T(0),Bt=u(function(e,n,r,t){var o,a,i,c;return t.b?(o=t.a,(t=t.b).b?(a=t.a,(t=t.b).b?(i=t.a,(t=t.b).b?(c=t.b,z(e,o,z(e,a,z(e,i,z(e,t.a,500<r?$(mt,e,n,xt(c)):V(Bt,e,n,r+1,c)))))):z(e,o,z(e,a,z(e,i,n)))):z(e,o,z(e,a,n))):z(e,o,n)):n}),Rt=d(function(e,n,r){return V(Bt,e,n,0,r)}),L=s(function(r,e){return $(Rt,s(function(e,n){return z(h,r(e),n)}),m,e)}),M=we,It=s(function(n,e){return z(M,function(e){return T(n(e))},e)}),jt=d(function(r,e,t){return z(M,function(n){return z(M,function(e){return T(z(r,n,e))},t)},e)}),Ht=ke,Ut=s(function(e,n){return ze(z(M,Ht(e),n))}),ne=d(function(e,n,r){return z(It,function(e){return 0},ar(z(L,Ut(e),n)))}),K=(Ae.Task={b:Y,c:ne,d:d(function(e,n,r){return T(0)}),e:s(function(e,n){return z(It,e,n)}),f:void 0},Be("Task"),hn),Gt={$:0},Ot={$:-2},Wt=Ot,Yt=Wt,Qt=u(function(e,n,r,t){return{$:0,a:e,b:n,c:r,d:t}}),Kt=V(Qt,92/255,53/255,.4,1),ie=s(function(e,n){return{$:0,a:{by:Kt,au:3,ae:m,bg:e,m:n,cq:3,f5:"Goblin (level 2)",ax:n,U:m}}}),Jt=d(function(e,n,r){return{b0:e,b2:n,b4:r}}),Xt=z(ht,ie,v([$(Jt,-3,3,0),$(Jt,-3,-3,0),$(Jt,3,3,0),$(Jt,3,-3,0)])),Zt=Re(m),eo=3.141592653589793,no=function(e){return e},ro={$:4},to=Re,oo=d(function(e,n,r){return n(e(r))}),ao=s(function(e,n){return{$:0,a:e,b:n}}),io=s(function(e,n){return{eP:n,e3:e}}),X=T(z(io,Wt,Wt)),co=U,lo=s(function(e,n){for(;;){if(-2===n.$)return C;var r=n.c,t=n.d,o=n.e;switch(z(co,e,n.b)){case 0:e=e,n=t;continue;case 1:return x(r);default:e=e,n=o;continue}}}),w=E(function(e,n,r,t,o){return{$:-1,a:e,b:n,c:r,d:t,e:o}}),uo=E(function(e,n,r,t,o){var a,i,c,l;return-1!==o.$||o.a?-1!==t.$||t.a||-1!==t.d.$||t.d.a?S(w,e,n,r,t,o):(a=t.d,l=t.e,S(w,0,t.b,t.c,S(w,1,a.b,a.c,a.d,a.e),S(w,1,n,r,l,o))):(a=o.b,i=o.c,c=o.d,o=o.e,-1!==t.$||t.a?S(w,e,a,i,S(w,0,n,r,t,c),o):S(w,0,n,r,S(w,1,t.b,t.c,t.d,l=t.e),S(w,1,a,i,c,o)))}),fo=d(function(e,n,r){if(-2===r.$)return S(w,0,e,n,Ot,Ot);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(z(co,e,o)){case 0:return S(uo,t,o,a,$(fo,e,n,i),c);case 1:return S(w,t,o,n,i,c);default:return S(uo,t,o,a,i,$(fo,e,n,c))}}),so=d(function(e,n,r){e=$(fo,e,n,r);return-1!==e.$||e.a?e:S(w,1,e.b,e.c,e.d,e.e)}),bo=s(function(e,n){var r=e.a,e=e.b,t=z(lo,r,n);return $(so,r,1===t.$?v([e]):z(h,e,t.a),n)}),mo=function(r){return{$:2,b:function(e){var n=r.f;2===n.$&&n.c&&n.c(),r.f=null,e({$:0,a:G})},c:null}},vo=d(function(e,n,r){for(;;){if(-2===r.$)return n;var t=r.e,o=e,a=$(e,r.b,r.c,$(vo,e,n,r.d));e=o,n=a,r=t}}),po=B(function(l,u,f,e,n,r){e=$(vo,d(function(e,n,r){for(;;){var t=r.a,o=r.b;if(!t.b)return{a:t,b:$(f,e,n,o)};var a=t.a,i=a.a,a=a.b,c=t.b;if(0<=b(i,e))return 0<b(i,e)?{a:t,b:$(f,e,n,o)}:{a:c,b:V(u,i,a,n,o)};e=e,n=n,r={a:c,b:$(l,i,a,o)}}}),{a:ot(e),b:r},n),r=e.a,n=e.b;return $(mt,s(function(e,n){return $(l,e.a,e.b,n)}),n,r)}),go=Ee,ho=Pn,xo=ze,Co=d(function(n,e,r){var t,o;return e.b?(o=e.b,e=xo(z(ho,t=e.a,z(go,n,t))),z(M,function(e){return $(Co,n,o,$(so,t,e,r))},e)):T(r)}),ce=d(function(n,e,r){var r=r.eP,t=d(function(e,n,r){var t=r.c;return{a:r.a,b:r.b,c:z(M,function(e){return t},mo(n))}}),o=$(mt,bo,Wt,e),e=I(po,d(function(e,n,r){var t=r.b,o=r.c;return{a:z(h,e,r.a),b:t,c:o}}),u(function(e,n,r,t){var o=t.c;return{a:t.a,b:$(so,e,r,t.b),c:o}}),t,o,r,{a:m,b:Wt,c:T(0)}),a=e.a,i=e.b;return z(M,function(e){return T(z(io,o,e))},z(M,function(e){return $(Co,n,a,i)},e.c))}),yo=or,Po=(Zr=yo,{$:2,b:function(e){e({$:0,a:Zr(Date.now())})},c:null}),Z=d(function(r,e,n){var t,e=z(lo,e,n.e3);return 1===e.$?T(n):(t=e.a,z(M,function(e){return T(n)},z(M,function(n){return ar(z(L,function(e){return z(Ht,r,e(n))},t))},Po)))}),To=d(function(e,n,r){return e(n(r))}),Lo=(Ae.Time={b:X,c:ce,d:Z,e:0,f:s(function(e,n){return z(ao,n.a,z(To,e,n.b))})},Be("Time")),Mo=s(function(e,n){return Lo(z(ao,e,n))}),wo=ve,No=be,Do=d(function(e,n,r){return{db:r,eT:n,e1:e}}),zo=T($(Do,m,C,0)),$o={$:2,b:function(e){e({$:0,a:Date.now()})},c:null},Vo={$:2,b:function(e){var n=Cn(function(){e({$:0,a:Date.now()})});return function(){xn(n)}},c:null},pe=d(function(e,r,n){var t=n.eT,n=n.db,o={a:t,b:r};return 1===o.a.$?o.b.b?z(M,function(n){return z(M,function(e){return T($(Do,r,x(n),e))},$o)},xo(z(M,go(e),Vo))):zo:o.b.b?T($(Do,r,t,n)):z(M,function(e){return zo},mo(o.a.a))}),ge=d(function(n,r,e){function t(e){return z(Ht,n,e.$?(0,e.a)(r-a):(0,e.a)(yo(r)))}var o=e.e1,a=e.db;return z(M,function(n){return z(M,function(e){return T($(Do,o,x(n),r))},ar(z(L,t,o)))},xo(z(M,go(n),Vo)))}),So=(Ae["Browser.AnimationManager"]={b:zo,c:pe,d:ge,e:0,f:s(function(e,n){return n.$?{$:1,a:z(To,e,n.a)}:{$:0,a:z(To,e,n.a)}})},Be("Browser.AnimationManager")),qo=function(e){return So({$:0,a:e})},_o=d(function(e,n,r){return{$:0,a:e,b:n,c:r}}),Fo=s(function(e,n){return{eL:n,e1:e}}),ke=T(z(Fo,m,Wt)),Ao=s(function(e,n){return{dW:n,d5:e}}),ko=d(function(n,r,e){return z(It,function(e){return{a:r,b:e}},$(Mn,e.a?Ln:Tn,e.b,function(e){return z(go,n,z(Ao,r,e))}))}),Eo=s(function(e,n){return $(vo,so,n,e)}),Y=d(function(o,e,n){var r=d(function(e,n,r){var t=r.c;return{a:r.a,b:r.b,c:z(h,$(ko,o,e,n),t)}}),t=d(function(e,n,r){var t=r.b,o=r.c;return{a:z(h,n,r.a),b:t,c:o}}),a=u(function(e,n,r,t){var o=t.c;return{a:t.a,b:$(so,e,n,t.b),c:o}}),i=z(L,fr,e),e=I(po,t,a,r,n.eL,sr(i),{a:m,b:Wt,c:m}),c=e.b,l=e.c;return z(M,function(e){return T(z(Fo,i,z(Eo,c,sr(e))))},z(M,function(e){return ar(l)},ar(z(L,mo,e.a))))}),Bo=d(function(e,n,r){e=e(n);return e.$?r:z(h,e.a,r)}),Ro=s(function(e,n){return $(Rt,Bo(e),m,n)}),ne=d(function(e,n,r){var t=n.d5,o=n.dW,n=z(Ro,function(e){var n=e.b,n=n.c;return l(e.a,t)?z(wn,n,o):C},r.e1);return z(M,function(e){return T(r)},ar(z(L,Ht(e),n)))}),Io=(Ae["Browser.Events"]={b:ke,c:Y,d:ne,e:0,f:s(function(e,n){return $(_o,n.a,n.b,z(Ft,e,n.c))})},Be("Browser.Events")),hn=d(function(e,n,r){return Io($(_o,e,n,r))}),jo=z(hn,0,"keydown"),Ho=z(hn,0,"keyup"),Uo=z(hn,0,"mousedown"),Go=s(function(e,n){return{b0:e,b2:n}}),Oo=me,Wo=s(function(e,n){return z(co,e,n)}),N=function(e){return e<0?-e:e},Yo=ue,Qo=0,Ko=s(function(e,n){var r=n.b4-e.b4,t=n.b2-e.b2,n=n.b0-e.b0,e=z(y,N(n),z(y,N(t),N(r)));return e?Yo((n=n/e)*n+(n=t/e)*n+(t=r/e)*t)*e:Qo}),o=d(function(e,n,r){return{b0:e,b2:n,b4:r}}),Jo=s(function(e,n){return{b0:n.b0+e.b0,b2:n.b2+e.b2,b4:n.b4+e.b4}}),Xo=s(function(e,n){return vr(z(Jo,e,g(n)))}),Zo=J,ea=s(function(e,n){return n.$?e:n.a}),na=s(function(e,r){return z(ea,z(Xo,$(o,1,0,0),e),mr(z(Zo,s(function(e,n){return z(Wo,z(Ko,r,e),z(Ko,r,n))}),v([z(Xo,$(o,1,0,0),e),z(Xo,$(o,-1,0,0),e),z(Xo,$(o,0,1,0),e),z(Xo,$(o,0,-1,0),e)]))))}),ra=s(function(r,e){return $(Rt,s(function(e,n){return r(e)?z(h,e,n):n}),m,e)}),ta=s(function(e,n){return!z(lo,e,n).$}),oa=s(function(e,n){return z(ta,e,n)}),aa=s(function(e,n){return-1<b(e,n.dr)?{$:0,a:{by:n.by,au:n.cq,ae:m,bg:n.bg,m:n.ax,cq:n.cq,f5:n.f5,ax:n.ax,U:m}}:{$:1,a:n}}),ia=d(function(e,n,r){return b(r,e)<0?e:0<b(r,n)?n:r}),ca=s(function(e,n){return{b0:n.b0-e.b0,b2:n.b2-e.b2,b4:n.b4-e.b4}}),la={b0:0,b2:0,b4:0},ua=s(function(e,n){var r,t;return l(e,n)?m:(r=$(ia,-1,1,g(n).b2-g(e).b2),t=$(ia,-1,1,g(n).b0-g(e).b0),t=vr(z(Jo,z(ca,la,$(Jt,t,r,0)),z(ca,la,e))),z(h,t,z(ua,t,n)))}),fa=d(function(e,n,r){for(;;){if(e<=0)return r;if(!n.b)return r;var t=n.a;e=e-1,n=n.b,r=z(h,t,r)}}),sa=s(function(e,n){return xt($(fa,e,n,m))}),da=d(function(e,n,r){if(0<n){var t,o,a,i,c,l={a:n,b:r};e:for(;;){n:for(;;){if(!l.b.b)return r;if(!l.b.b.b){if(1===l.a)break e;break}switch(l.a){case 1:break e;case 2:var u=l.b;return v([u.a,u.b.a]);case 3:if(l.b.b.b.b)return v([(u=l.b).a,(t=u.b).a,t.b.a]);break n;default:if(l.b.b.b.b&&l.b.b.b.b.b)return c=(i=(a=(o=(t=l.b).b).b).b).b,z(h,t.a,z(h,o.a,z(h,a.a,z(h,i.a,1e3<e?z(sa,n-4,c):$(da,e+1,n-4,c)))));break n}}return r}return v([l.b.a])}return m}),ba=s(function(e,n){return $(da,0,e,n)}),ma=s(function(e,n){return b(e,n)<0?e:n}),va={b0:0,b2:0,b4:0},pa=s(function(e,n){var r,t=z(y,N(n.b0),z(y,N(n.b2),N(n.b4)));return t?{b0:e*(r=n.b0/t)/(t=Yo(r*r+(r=n.b2/t)*r+(n=n.b4/t)*n)),b2:e*r/t,b4:e*n/t}:va}),ga=s(function(r,e){function n(e){return vr(z(Jo,z(ca,la,r),(n=z(ma,.05,pr(gr(e=z(ca,r,e)))),z(pa,n,e))));var n}var t,o;return e.b?(o=e.b,l(r,t=e.a)?o.b?{a:n(o.a),b:o}:{a:r,b:m}:{a:n(t),b:e}):{a:r,b:e}}),ha=s(function(t,o){var e=s(function(e,n){return ir(e+n/(2*eo))}),n=z(L,function(e){var n,r;return e.$?z(aa,t,n=e.a):(r=(e=z(ga,(n=e.a).m,n.U)).a,e=e.b,{$:0,a:f(n,{ae:z(ra,function(e){return 0<b(e.cd,t)},n.ae),m:r,U:2===(r=o.J).$&&l(n.bg,r.a.bg)?z(ba,1,e):e})})},o.P),r=z(ra,function(e){return 0<b(e.cd,t)},o.ae),a=function(){var e=o.J;switch(e.$){case 1:case 2:var n=z(ea,(n=e.a).m,mr(n.U)),n=z(na,n,o.m);return z(ga,o.m,z(ua,o.m,n));default:return z(ga,o.m,o.U)}}(),i=a.b,c=(c={a:i,b:o.J}).a.b||1!==c.b.$?o.J:{$:2,a:c.b.a},c=f(o,{J:c,ae:r,m:a.a,P:n,bO:t,U:i});return z(oa,"ArrowLeft",o.aG)?f(c,{aW:z(e,-.005,o.aW)}):z(oa,"ArrowRight",o.aG)?f(c,{aW:z(e,.005,o.aW)}):c}),xa=s(function(n,e){return mr(z(Ro,function(e){return!e.$&&l((e=e.a).bg,n)?x(e):C},e))}),Ca=s(function(e,n){return{by:n.by,bg:n.bg,cq:n.cq,f5:n.f5,dr:e+2e4,ax:n.ax}}),ya=d(function(n,r,e){return z(L,function(e){return e.$?{$:1,a:e.a}:l((e=e.a).bg,n)?r(e):{$:0,a:e}},e)}),Pa=d(function(e,r,t){var o,n,a=t.J;return 2===a.$?(o=t.bO+500,n=$(ya,(a=a.a).bg,function(e){var n=e.au-r;return 0<n?{$:0,a:f(e,{au:n,ae:z(h,{cI:r,cd:o},e.ae)})}:{$:1,a:z(Ca,t.bO,e)}},t.P),f(t,{a6:t.as?t.a6:t.a6+r,J:1===(a=z(xa,a.bg,n)).$?Gt:{$:2,a:a.a},a9:2===t.as?t.a9+r:t.a9,au:z(y,1,t.au-e),ae:z(h,{cI:1===t.au?0:e,cd:o},t.ae),P:n,bo:1===t.as?t.bo+r:t.bo})):t}),Ta=d(function(e,n,r){var t;return 0<e?(t=(r.b0-n.b0)/e)*t+(t=(r.b2-n.b2)/e)*t+(t=(r.b4-n.b4)/e)*t<=1:!e&&l(n.b0,r.b0)&&l(n.b2,r.b2)&&l(n.b4,r.b4)}),La=function(e){return-e},Ma=s(function(e,n){return{b0:e.b2*n.b4-e.b4*n.b2,b2:e.b4*n.b0-e.b0*n.b4,b4:e.b0*n.b2-e.b2*n.b0}}),wa=function(e){return e.dF},Na=function(e){return e.dG},Da=function(e){return z(Ma,wa(e),Na(e))},za=te,$a=oe,Va=d(function(e,n,r){var n=.5*n,t=za(n),n=$a(n),e=e.fy,o=e.b0*n,a=t*o,i=o*o,c=e.b2*n,l=t*c,u=o*c,f=c*c,e=e.b4*n,n=t*e,t=o*e,o=c*e,c=e*e;return{b0:(1-2*(f+c))*r.b0+2*(u-n)*r.b2+2*(t+l)*r.b4,b2:2*(u+n)*r.b0+(1-2*(i+c))*r.b2+2*(o-a)*r.b4,b4:2*(t-l)*r.b0+2*(o+a)*r.b2+(1-2*(i+f))*r.b4}}),Sa=d(function(e,n,r){var n=.5*n,t=za(n),n=$a(n),o=e.dc,a=r.b0-o.b0,i=r.b2-o.b2,r=r.b4-o.b4,e=e.fy,c=e.b0*n,l=t*c,u=c*c,f=e.b2*n,s=t*f,d=c*f,b=f*f,e=e.b4*n,n=t*e,t=c*e,c=f*e,f=e*e;return{b0:o.b0+(1-2*(b+f))*a+2*(d-n)*i+2*(t+s)*r,b2:o.b2+2*(d+n)*a+(1-2*(u+f))*i+2*(c-l)*r,b4:o.b4+2*(t-s)*a+2*(c+l)*i+(1-2*(u+b))*r}}),qa=function(e){return e},_a=function(e){return e.dF},Fa=function(e){return e.dG},Aa=d(function(e,n,r){return qa({dc:$(Sa,e,n,xr(r)),dF:$(Va,e,n,_a(r)),dG:$(Va,e,n,Fa(r)),dH:$(Va,e,n,Cr(r))})}),ka=d(function(e,n,r){return $(Aa,e(r),n,r)}),Ea=s(function(e,n){return{b0:n.b0+e.b0,b2:n.b2+e.b2,b4:n.b4+e.b4}}),Ba=s(function(e,n){return qa({dc:z(Ea,e,xr(n)),dF:_a(n),dG:Fa(n),dH:Cr(n)})}),Ra=s(function(e,n){return{b0:e*n.b0,b2:e*n.b2,b4:e*n.b4}}),Ia=d(function(e,n,r){return z(Ba,z(Ra,n,e),r)}),ja=d(function(e,n,r){return $(Ia,yr(e(r)),n,r)}),Ha=s(function(e,n){return{fy:n,dc:e}}),Ua=function(e){return z(Ha,e.dc,e.dF)},Ga=function(e){return z(Ha,e.dc,e.dG)},Oa=function(e){return z(Ha,e.dc,e.dH)},Wa=function(e){return{$:0,a:e}},D=function(e){return N(e)},Ya=function(e){return.5*e},Qa=ae,Ka=function(e){return Qa(e)},ie={b0:1,b2:0,b4:0},U={b0:0,b2:1,b4:0},Ja=or({dc:la,dF:ie,dG:U}),Xa=function(e){return function(e){var n=Ya(D(e.gB)),n=Ka(n);return{dn:Wa(n),gD:e.gD}}({gB:hr(30),gD:(e={fh:e.aW,fz:15,fE:hr(30),fO:e.m,fP:Ja},n=qa({dc:e.fO,dF:Na(e.fP),dG:Da(e.fP),dH:wa(e.fP)}),$(ja,Oa,e.fz,$(ka,Ua,La(e.fE),$(ka,Ga,e.fh,n))))});var n},Za=s(function(e,n){return n.b0*e.b0+n.b2*e.b2+n.b4*e.b4}),ei=s(function(e,n){return e*n}),ni=s(function(e,n){var r=e.dc,e=e.gf;return(n.b0-r.b0)*e.b0+(n.b2-r.b2)*e.b2+(n.b4-r.b4)*e.b4}),ri=d(function(e,n,r){return{b0:r.b0+n*e.b0,b2:r.b2+n*e.b2,b4:r.b4+n*e.b4}}),ti=s(function(e,n){var r=yr(n),t=z(Za,e.gf,r);return t?(n=function(e){return e.dc}(n),x($(ri,r,z(ei,-1/t,z(ni,e,n)),n))):C}),oi=s(function(e,n){return n.$?C:x(e(n.a))}),ai=s(function(e,n){return n=g(n),r=n.b2,t=n.b4,{b0:e(n.b0),b2:e(r),b4:e(t)};var r,t}),ii=s(function(e,n){return e*n}),ci=s(function(e,n){return n/e}),li={b0:0,b2:0,b4:-1},ui=s(function(e,n){return n/e}),fi=s(function(e,n){var r=e.dH,t=e.dG,e=e.dF;return{b0:e.b0*n.b0+t.b0*n.b2+r.b0*n.b4,b2:e.b2*n.b0+t.b2*n.b2+r.b2*n.b4,b4:e.b4*n.b0+t.b4*n.b2+r.b4*n.b4}}),si=s(function(e,n){var r=e.dc,e=e.dF;return(n.b0-r.b0)*e.b0+(n.b2-r.b2)*e.b2}),di=d(function(e,n,r){return{b0:e,b2:n,b4:r}}),bi=u(function(e,n,r,t){var o=e.dc,a=e.dH,i=e.dG,e=e.dF;return{b0:o.b0+n*e.b0+r*i.b0+t*a.b0,b2:o.b2+n*e.b2+r*i.b2+t*a.b2,b4:o.b4+n*e.b4+r*i.b4+t*a.b4}}),mi=s(function(e,n){var r=e.dc,e=e.dG;return(n.b0-r.b0)*e.b0+(n.b2-r.b2)*e.b2}),vi=d(function(e,n,r){var t,o=z(mi,Pr(n),r),r=z(si,Pr(n),r),a=e.gD,n=Tr(n),n=n.b,i=e.dn;return i.$?z(Ha,V(bi,a,z(ii,t=z(ui,n,i.a),r),z(ii,t,o),Qo),wr(e.gD)):(t=La(z(ci,i.a,z(ei,.5,n))),i=z(fi,a,z(ea,li,function(e){var n,r,t=z(y,N(e.b0),z(y,N(e.b2),N(e.b4)));return t?(t=Yo((r=e.b0/t)*r+(n=e.b2/t)*n+(e=e.b4/t)*e),x({b0:r/t,b2:n/t,b4:e/t})):C}($(di,r,o,t)))),z(Ha,Lr(e.gD),i))}),pi=le,gi=s(function(e,n){return-1<b(n,e)}),hi=s(function(e,n){return e+.5*(n-e)}),xi=s(function(e,n){return n-e}),Ci={b0:-1,b2:0},yi={b0:0,b2:-1},Pi={b0:1,b2:0},Ti={b0:0,b2:1},Li=s(function(e,n){return{b0:e,b2:n}}),Mi=V(u(function(e,n,r,t){var o=z(gi,n,t)?Ti:yi,a=z(gi,e,r)?Pi:Ci,i={a:D(z(xi,e,r)),b:D(z(xi,n,t))};return{fg:{dc:z(Li,z(hi,e,r),z(hi,n,t)),dF:a,dG:o},fx:i}}),(Ee={gG:0,gH:800,gJ:600,gK:0}).gG,Ee.gJ,Ee.gH,Ee.gK),wi=function(e){return e},Pn={b0:0,b2:0,b4:1},Ni=z(s(function(e,n){return{gf:n,dc:e}}),la,Pn),Di=s(function(e,n){var r,t,o=$(vi,Xa(n),Mi,e),o=z(oi,ai(z(oo,pi,tr)),z(ti,Ni,o));return 0<b(wi(e).b0,800)||0<b(wi(e).b2,600)||1===o.$?n:(r=o.a,e=z(ea,n.m,mr(n.U)),o=mr(z(ra,function(e){return!e.$&&$(Ta,.5,r,e.a.m)},n.P)),f(n,o.$||o.a.$?{J:Gt,U:(t=z(ua,e,r)).b?t:v([r])}:{J:{$:1,a:o.a.a},U:z(ra,function(e){return!l(e,n.m)},z(h,e,z(ua,e,z(na,r,n.m))))}))}),zi=s(function(e,n){return{$:0,a:e,b:n}}),X=z(M,function(e){return T((e=dr(e),n=Nr(z(zi,0,1013904223)),Nr(z(zi,n.a+e>>>0,n.b))));var n},Po),$i=s(function(e,n){return e(n)}),Vi=d(function(n,e,r){var t,o;return e.b?(t=e.b,o=(e=z($i,e.a,r)).b,z(M,function(e){return $(Vi,n,t,o)},z(Ht,n,e.a))):T(r)}),ce=d(function(e,n,r){return T(r)}),Si=s(function(r,e){var t=e;return function(e){var e=t(e),n=e.b;return{a:r(e.a),b:n}}}),qi=(Ae.Random={b:X,c:Vi,d:ce,e:s(function(e,n){return z(Si,e,n)}),f:void 0},Be("Random")),_i=s(function(e,n){return qi(z(Si,e,n))}),Fi=s(function(e,n){return{$:5,a:e,b:n}}),Z=s(function(l,u){return function(e){var n=b(l,u)<0?{a:l,b:u}:{a:u,b:l},r=n.a,t=n.b-r+1;if(!(t-1&t))return{a:((t-1&Dr(e))>>>0)+r,b:Nr(e)};for(var o=(-t>>>0)%t>>>0,a=e;;){var i=Dr(a),c=Nr(a);if(0<=b(i,o))return{a:i%t+r,b:c};a=c}}}),Ai=d(function(t,e,n){var o=e,a=n;return function(e){var e=o(e),n=e.a,e=a(e.b),r=e.b;return{a:z(t,n,e.a),b:r}}}),ki=z(_i,function(e){return z(Fi,e.a,e.b)},z(s(function(e,n){return $(Ai,s(function(e,n){return{a:e,b:n}}),e,n)}),z(Z,0,1),z(Z,0,1))),Ei=s(function(e,n){return vr(z(Jo,z(ca,la,e),z(ca,la,n)))}),Bi=u(function(e,n,r,t){for(;;){if(n<1)return{a:e,b:t};var o=r(t),a=o.b;e=z(h,o.a,e),n=n-1,r=r,t=a}}),Ri=s(function(n,e){var r=e;return function(e){return V(Bi,m,n,r,e)}}),Ii=s(function(e,n){return{a:n.a,b:e(n.b)}}),ji=s(function(o,a){return function(e){var n=Nr(e),r=N(a-o),t=Dr(n);return{a:(134217728*(67108863&Dr(e))+(134217727&t))/9007199254740992*r+o,b:Nr(n)}}}),Hi=d(function(e,n,r){for(;;){var t=e.a,o=e.b;if(!n.b)return o;var a=n.a,i=n.b;if(b(r,N(t))<1)return o;e=a,n=i,r=r-N(t)}}),Ui=s(function(e,n){function r(e){return N(e.a)}var t=r(e)+$(mt,st,0,z(L,r,n));return z(Si,z(Hi,e,n),z(ji,0,t))}),Gi=s(function(e,n){return n.b?$(Rt,h,n,e):e}),Oi=s(function(e,n){return $r(z(L,e,n))}),Wi=s(function(e,r){return z(Oi,function(n){return z(L,function(e){return{a:e,b:n}},z(gt,e,r))},z(gt,e,r))}),Yi=s(function(e,n){return z(L,function(e){return{a:1,b:e}},z(Wi,e,n))}),Qi=s(function(e,n){return $(so,e,0,n)}),Ki=R(function(e,n,r,t,o,a,i){if(-1!==a.$||a.a){for(;;){if(-1!==i.$||1!==i.a)break;if(-1!==i.d.$)return Sr(n);if(1===i.d.a)return Sr(n);break}return n}return S(w,r,a.b,a.c,a.d,S(w,0,t,o,a.e,i))}),Ji=s(function(e,n){var r,t,o,a,i,c,l;return-2===n.$?Ot:(r=n.a,o=n.c,a=n.d,i=n.e,b(e,t=n.b)<0?-1===a.$&&1===a.a?-1!==(c=a.d).$||c.a?-1===(c=Vr(n)).$?(l=c.e,S(uo,c.a,c.b,c.c,z(Ji,e,c.d),l)):Ot:S(w,r,t,o,z(Ji,e,a),i):S(w,r,t,o,z(Ji,e,a),i):z(Xi,e,j(Ki,e,n,r,t,o,a,i)))}),Xi=s(function(e,n){var r,t,o,a,i;return-1===n.$?(r=n.a,t=n.c,o=n.d,a=n.e,l(e,n=n.b)?-1===(i=function(e){for(;;){if(-1!==e.$||-1!==e.d.$)return e;e=e.d}}(a)).$?S(uo,r,i.b,i.c,o,qr(a)):Ot:S(uo,r,n,t,o,z(Ji,e,a))):Ot}),Zi=s(function(e,n){e=z(Ji,e,n);return-1!==e.$||e.a?e:S(w,1,e.b,e.c,e.d,e.e)}),ec=s(function(e,n){return z(Zi,e,n)}),ve=s(function(e,o){switch(e.$){case 0:return{a:z(ha,e.a,o),b:z(_i,br,(r=o.P,z(Si,function(e){return $(vt,s(function(e,n){e={a:e,b:n};return e.a.$||e.b.$?C:x(z(ua,(n=e.b.a).m,z(Ei,e.a.a,n.ax)))}),e,r)},z(Si,L(oi(zr)),z(Ri,rr(r),z(Ui,{a:500,b:C},z(L,Ii(x),z(Yi,-1,1))))))))};case 1:return{a:z(Di,e.a,o),b:Zt};case 2:return{a:f(o,{aG:z(Qi,e.a,o.aG)}),b:Zt};case 3:return{a:f(o,{aG:z(ec,e.a,o.aG)}),b:Zt};case 4:return{a:o,b:ki};case 5:return{a:$(Pa,e.a,e.b,o),b:Zt};case 6:return{a:f(o,{as:e.a}),b:Zt};default:var n=e.a,n=$(vt,s(function(e,n){var r,t,n={a:e,b:n};return n.a.$||n.b.$||(r=n.a.a,n=n.b.a,2===(t=o.J).$&&l(t.a.bg,r.bg))?e:{$:0,a:f(r,{U:n})}}),o.P,n);return{a:f(o,{P:n}),b:Zt}}var r}),a=Ye("div"),nc=V(Qt,52/255,101/255,164/255,1),rc=V(Qt,32/255,74/255,135/255,1),tc=V(Qt,164/255,0,0,1),F=Je,i=We,be=V(Qt,186/255,189/255,182/255,1),pe=v([{by:V(Qt,78/255,154/255,6/255,1),b0:0,b1:12,b2:0,b3:12,b4:-.02},{by:be,b0:0,b1:3,b2:0,b3:12,b4:-.01},{by:be,b0:3.75,b1:4.5,b2:0,b3:3,b4:-.01}]),oc=function(e){return{$:0,a:e}},ac=s(function(e,n){return{$:0,a:e,b:n}}),ic=Dn,cc=function(e){e=function(e){return{a7:e.d,cN:e.c,cT:e.b,$7:e.a}}(e);return $(ic,e.$7,e.cT,e.cN)},lc={$:0},uc=s(function(e,n){for(;;){if(!e.b)return n;var r=e.a;e=e.b,n=z(h,r,n)}}),fc=s(function(e,n){return{$:1,a:e,b:n}}),sc={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"cc"}},dc={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aX"}},bc={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"bb",sceneProperties:"g"}},mc={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"cJ",colorTexture:"cc",sceneProperties:"g"}},vc=s(function(e,n){switch(n.$){case 0:return z(En,e,n);case 1:return z(Bn,e,n);case 2:return z(Rn,e,n);case 3:return z(In,e,n);case 4:return z(jn,e,n);case 5:return z(Hn,e,n);case 6:return z(Un,e,n);case 7:return z(Gn,e,n);default:return function(e){var n=e.sampleAlphaToCoverage;n.toggle=e.toggle,n.enabled||(e.gl.enable(e.gl.SAMPLE_ALPHA_TO_COVERAGE),n.enabled=!0)}(e)}}),A=kn,pc=R(function(e,n,r,t,o,a,i){for(;;){if(!i.b)return{ev:n,ew:t,ex:a,ey:e,ez:r,eA:o};var c=i.a,l=i.b,u=c.b0,f=c.b2,c=c.b4;e=z(ma,u,e),n=z(y,u,n),r=z(ma,f,r),t=z(y,f,t),o=z(ma,c,o),a=z(y,c,a),i=l}}),gc=s(function(e,n){var r=e.b0,t=e.b2,e=e.b4;return j(pc,r,r,t,t,e,e,n)}),hc={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"ab",lights12:"bK",lights34:"cl",lights56:"cm",lights78:"cn",materialColor:"c3",sceneProperties:"g",viewMatrix:"h"}},xc={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"ab",lights12:"bK",lights34:"cl",lights56:"cm",lights78:"cn",materialColorTexture:"c4",normalMapTexture:"bk",sceneProperties:"g",useNormalMap:"bq",viewMatrix:"h"}},Cc=kr(1029),yc=kr(1028),Pc=d(function(e,n,r){return 1===n?z(h,e?Cc:yc,r):r}),Tc={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"cL",enabledLights:"ab",lights12:"bK",lights34:"cl",lights56:"cm",lights78:"cn",metallic:"c6",roughness:"dt",sceneProperties:"g",viewMatrix:"h"}},Lc={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"cM",constantBaseColor:"cO",constantMetallic:"cP",constantRoughness:"cQ",enabledLights:"ab",lights12:"bK",lights34:"cl",lights56:"cm",lights78:"cn",metallicTexture:"c7",normalMapTexture:"bk",roughnessTexture:"du",sceneProperties:"g",useNormalMap:"bq",viewMatrix:"h"}},Mc={src:"\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{quadVertex:"cx"},uniforms:{modelMatrix:"d",modelScale:"e",projectionMatrix:"f",quadVertexPositions:"aw",sceneProperties:"g",viewMatrix:"h"}},wc=function(e){var n=new Float64Array(16);return n[0]=e.ee,n[1]=e.ei,n[2]=e.em,n[3]=e.eq,n[4]=e.ef,n[5]=e.ej,n[6]=e.en,n[7]=e.er,n[8]=e.eg,n[9]=e.ek,n[10]=e.eo,n[11]=e.es,n[12]=e.eh,n[13]=e.el,n[14]=e.ep,n[15]=e.et,n},Nc=u(function(e,n,r,t){t=g(t),r=g(r),n=g(n),e=g(e);return wc({ee:e.b0,ef:n.b0,eg:r.b0,eh:t.b0,ei:e.b2,ej:n.b2,ek:r.b2,el:t.b2,em:e.b4,en:n.b4,eo:r.b4,ep:t.b4,eq:0,er:0,es:0,et:0})}),ge=s(function(e,n){return{$:0,a:e,b:n}}),Dc=ge({dT:1,d2:0,eC:6})(v([{cx:$(ic,0,0,0)},{cx:$(ic,1,0,1)},{cx:$(ic,1,1,2)},{cx:$(ic,0,1,3)}])),zc=s(function(e,n){return{$:1,a:e,b:n}}),$c=s(function(e,n){return n.$?{a:n.a.q,b:1}:{a:e,b:0}}),Vc=function(e){return e[0]},Sc=function(e){return e[1]},qc=function(e){return e[2]},_c=$n,Fc=V(_c,0,0,0,0),Ac=s(function(e,n){return n.$?{a:n.a.q,b:Fc}:{a:e,b:V(_c,Vc(e=n.a),Sc(e),qc(e),1)}}),kc=s(function(e,n){var r,t={a:e,b:n};return t.a.$?z(zc,{a:r=t.a.a.q,b:Fc},z($c,r,n)):t.b.$?z(zc,z(Ac,r=t.b.a.q,e),z($c,r,n)):{$:0,a:t.a.a}}),Ec=d(function(e,n,r){return{$:0,a:e,b:n,c:r}}),Bc=u(function(e,n,r,t){return{$:1,a:e,b:n,c:r,d:t}}),Rc=u(function(e,n,r,t){return{$:0,a:e,b:n,c:r,d:t}}),r=Nn,Ic=z(r,0,0),jc=s(function(e,n){return n.$?{a:n.a.q,b:Ic}:{a:e,b:z(r,n.a,1)}}),Hc=u(function(e,n,r,t){var o,a=V(Rc,e,n,r,t);return a.a.$?V(Bc,{a:o=a.a.a.q,b:Fc},z(jc,o,n),z(jc,o,r),z($c,o,t)):a.b.$?V(Bc,z(Ac,o=a.b.a.q,e),{a:o,b:Ic},z(jc,o,r),z($c,o,t)):a.c.$?V(Bc,z(Ac,o=a.c.a.q,e),z(jc,o,n),{a:o,b:Ic},z($c,o,t)):a.d.$?V(Bc,z(Ac,o=a.d.a.q,e),z(jc,o,n),z(jc,o,r),{a:o,b:1}):$(Ec,a.a.a,a.b.a,a.c.a)}),Uc=zn,Gc={src:"\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{quadVertex:"cx"},uniforms:{modelMatrix:"d",modelScale:"e",projectionMatrix:"f",quadVertexPositions:"aw",sceneProperties:"g",viewMatrix:"h"}},Oc={src:"\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = quadVertex.xy;\n            interpolatedTangent = tangent;\n        }\n    ",attributes:{quadVertex:"cx"},uniforms:{modelMatrix:"d",modelScale:"e",projectionMatrix:"f",quadVertexPositions:"aw",sceneProperties:"g",viewMatrix:"h"}},Wc=d(function(e,n,r){return.5<r?n+(1-r)*(e-n):e+r*(n-e)}),Yc=function(e){return $(Wc,e.ey,e.ev,.5)},Qc=function(e){return $(Wc,e.ez,e.ew,.5)},Kc=function(e){return $(Wc,e.eA,e.ex,.5)},Jc=d(function(e,n,r){return{b0:e,b2:n,b4:r}}),Xc=function(e){return e.ev},Zc=function(e){return e.ew},el=function(e){return e.ex},nl=function(e){return e.ey},rl=function(e){return e.ez},tl=function(e){return e.eA},ol={src:"\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = quadVertex.xy;\n        }\n    ",attributes:{quadVertex:"cx"},uniforms:{modelMatrix:"d",modelScale:"e",projectionMatrix:"f",quadVertexPositions:"aw",sceneProperties:"g",viewMatrix:"h"}},al=E(function(r,M,w,N,D){var e=z(gc,M,v([w,N,D])),e=Rr(e);return z(fc,e,function(){switch(r.$){case 0:var l;return r.b.$?(u=r.b.a.q,t(function(e,n,r,t,o,a,i,c){return S(A,$(Pc,t,0,c),ol,sc,Dc,{cc:u,d:r,e:n,f:a,aw:V(Nc,M,w,N,D),g:e,h:o})})):(l=r.b.a,t(function(e,n,r,t,o,a,i,c){return S(A,$(Pc,t,0,c),Mc,dc,Dc,{aX:l,d:r,e:n,f:a,aw:V(Nc,M,w,N,D),g:e,h:o})}));case 1:var u,f,s;return r.b.$?(u=r.b.a.q,s=r.c,t(function(e,n,r,t,o,a,i,c){return S(A,$(Pc,t,0,c),ol,mc,Dc,{cJ:Ar(s),cc:u,d:r,e:n,f:a,aw:V(Nc,M,w,N,D),g:e,h:o})})):(f=r.b.a,s=r.c,t(function(e,n,r,t,o,a,i,c){return S(A,$(Pc,t,0,c),Mc,bc,Dc,{cJ:s,bb:z(Uc,Ar(s),f),d:r,e:n,f:a,aw:V(Nc,M,w,N,D),g:e,h:o})}));case 2:var d,b,e=z(kc,r.b,r.c);return e.$?(d=e.a.a,C=(n=e.b).a,y=n.b,t(function(e,n,r,t,o,a,i,c){var l=i.a,i=i.b;return S(A,$(Pc,t,0,c),Oc,xc,Dc,{ab:i,bK:l.bK,cl:l.cl,cm:l.cm,cn:l.cn,c4:d,d:r,e:n,bk:C,f:a,aw:V(Nc,M,w,N,D),g:e,bq:y,h:o})})):(b=e.a,t(function(e,n,r,t,o,a,i,c){var l=i.a,i=i.b;return S(A,$(Pc,t,0,c),Gc,hc,Dc,{ab:i,bK:l.bK,cl:l.cl,cm:l.cm,cn:l.cn,c3:b,d:r,e:n,f:a,aw:V(Nc,M,w,N,D),g:e,h:o})}));default:var m,v,p,g,h,x,C,y,P,T,L,n=V(Hc,r.b,r.c,r.d,r.e);return n.$?(m=(e=n.a).a,v=e.b,p=(e=n.b).a,g=e.b,h=(e=n.c).a,x=e.b,C=(e=n.d).a,y=e.b,t(function(e,n,r,t,o,a,i,c){var l=i.a,i=i.b;return S(A,$(Pc,t,0,c),Oc,Lc,Dc,{cM:m,cO:v,cP:x,cQ:g,ab:i,bK:l.bK,cl:l.cl,cm:l.cm,cn:l.cn,c7:h,d:r,e:n,bk:C,f:a,aw:V(Nc,M,w,N,D),du:p,g:e,bq:y,h:o})})):(P=n.a,T=n.b,L=n.c,t(function(e,n,r,t,o,a,i,c){var l=i.a,i=i.b;return S(A,$(Pc,t,0,c),Gc,Tc,Dc,{cL:P,ab:i,bK:l.bK,cl:l.cl,cm:l.cm,cn:l.cn,c6:L,d:r,e:n,f:a,aw:V(Nc,M,w,N,D),dt:T,g:e,h:o})}))}}())}),ke=d(function(e,n,r){return{$:3,a:e,b:n,c:r}})({dT:1,d2:3,eC:4}),il=(Y=v([{aN:z(r,0,1)},{aN:z(r,1,1)},{aN:z(r,2,1)},{aN:z(r,3,1)},{aN:z(r,0,-1)},{aN:z(r,1,-1)},{aN:z(r,2,-1)},{aN:z(r,3,-1)}]),ne=v([{a:0,b:1,c:2},{a:0,b:2,c:3},{a:4,b:6,c:5},{a:4,b:7,c:6},{a:4,b:5,c:1},{a:1,b:0,c:4},{a:5,b:6,c:2},{a:2,b:1,c:5},{a:6,b:7,c:3},{a:3,b:2,c:6},{a:7,b:4,c:0},{a:0,b:3,c:7}]),z(ke,Y,ne)),cl={src:"\n        precision highp float;\n        \n        attribute highp vec2 quadShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 quadVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadShadowVertex.x), quadVertexPositions, position, normal, tangent);\n            normal *= quadShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{quadShadowVertex:"aN"},uniforms:{modelMatrix:"d",modelScale:"e",projectionMatrix:"f",quadVertexPositions:"aw",sceneProperties:"g",shadowLight:"cE",viewMatrix:"h"}},ll={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},ul=d(function(e,n,r){function t(e){return z(oo,i(e.bU),z(oo,c(e.bE),z(oo,c(e.b5),c(e.b6))))}var o=e.dp,a=e.c2,e=e.dE,i=s(function(e,n){return n(e)}),c=s(function(e,n){return n(e)});return z(t,r,z(t,n,$(Ir,o,a,e)))}),fl=$(ul,{c2:0,dp:0,dE:15},{bE:7680,bU:519,b5:7680,b6:7683},{bE:7680,bU:519,b5:7680,b6:7682}),sl=$(ul,{c2:0,dp:0,dE:15},{bE:7680,bU:519,b5:7680,b6:7682},{bE:7680,bU:519,b5:7680,b6:7683}),dl=s(function(e,n){return z(h,e?sl:fl,n)}),bl=u(function(l,u,f,s){return{$:2,a:t(function(e,n,r,t,o,a,i,c){return S(A,z(dl,t,c),cl,ll,il,{d:r,e:n,f:a,aw:V(Nc,l,u,f,s),g:e,cE:i,h:o})})}}),ml=R(function(e,n,r,t,o,a,i){r=S(al,r,t,o,a,i),e={a:e,b:n};return e.a?e.b?Fr(v([r,V(bl,t,o,a,i)])):r:e.b?V(bl,t,o,a,i):lc}),vl=E(function(e,n,r,t,o){return j(ml,!0,!1,e,n,r,t,o)}),pl=z(L,function(e){var n=e.by,r=e.b1,t=e.b3,e=$(Jt,e.b0,e.b2,e.b4);return S(vl,_r(n),z(Ea,$(o,-r/2,-t/2,0),e),z(Ea,$(o,r/2,-t/2,0),e),z(Ea,$(o,r/2,t/2,0),e),z(Ea,$(o,-r/2,t/2,0),e))},pe),gl=V(u(function(e,n,r,t){return V(Qt,e,n,r,t)}),0,0,0,0),hl=function(e){return{$:0,a:e}},xl={$:3},Cl=u(function(e,n,r,t){return{$:4,a:e,b:n,c:r,d:t}}),yl=function(e){return{$:1,a:e}},Pl=function(e){return{$:2,a:e}},Tl=de,Ll=d(function(e,n,r){return $(Zn,e,n,r)}),Ml=V(_c,1,1,1,1),k=d(function(e,n,r){return z(L,function(e){return z(e,n,r)},e)}),wl=d(function(e,n,r){return{$:0,a:e,b:n,c:r}}),Nl=s(function(e,n){var r=n.b0,n=n.b2;return $(wl,e*r/n,e,e*(1-r-n)/n)}),Dl=s(function(e,n){return $(ic,3.2406*(n=(e=z(Nl,e,n)).a)-1.5372*(r=e.b)-.4986*(e=e.c),-.9689*n+1.8758*r+.0415*e,.0557*n-.204*r+1.057*e);var r}),zl=s(function(e,n){return{d4:l(e.d4,n.d4),x:e.x*n.x+e.y*n.A+e.z*n.D,y:e.x*n.y+e.y*n.B+e.z*n.E,z:e.x*n.z+e.y*n.C+e.z*n.F,A:e.A*n.x+e.B*n.A+e.C*n.D,B:e.A*n.y+e.B*n.B+e.C*n.E,C:e.A*n.z+e.B*n.C+e.C*n.F,D:e.D*n.x+e.E*n.A+e.F*n.D,E:e.D*n.y+e.E*n.B+e.F*n.E,F:e.D*n.z+e.E*n.C+e.F*n.F,Q:n.Q+(e.Q*n.x+e.R*n.A+e.S*n.D)*n.cD,R:n.R+(e.Q*n.y+e.R*n.B+e.S*n.E)*n.cD,S:n.S+(e.Q*n.z+e.R*n.C+e.S*n.F)*n.cD,cD:e.cD*n.cD}}),$l=E(function(e,n,r,t,o){return I(o,e,V(_c,t.cD,t.cD,t.cD,t.d4?1:-1),function(e){return wc({ee:e.x,ef:e.A,eg:e.D,eh:e.Q,ei:e.y,ej:e.B,ek:e.E,el:e.R,em:e.z,en:e.C,eo:e.F,ep:e.S,eq:0,er:0,es:0,et:1})}(t),t.d4,n,r)}),Vl=B(function(e,n,r,t,o,a){for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;e=e,n=n,r=r,t=z(zl,o.a,t),o=i,a=a;continue;case 1:return{Y:z(h,S($l,e,n,r,t,o.b),a.Y),ah:a.ah,aj:a.aj};case 3:i=z(h,S($l,e,n,r,t,o.b),a.ah);return{Y:a.Y,ah:i,aj:a.aj};case 2:var c=z(h,S($l,e,n,r,t,o.a),a.aj);return{Y:a.Y,ah:a.ah,aj:c};default:c=o.a;return $(mt,V(Vl,e,n,r,t),a,c)}}),Sl=u(function(e,n,r,t){return{$:4,a:e,b:n,c:r,d:t}}),ql=u(function(e,n,r,t){return{$:1,a:e,b:n,c:r,d:t}}),hn=s(function(e,n){return{$:6,a:e,b:n}}),_l=v([function(e){return V(ql,518,e.aq,e.al,e.ak)}({ak:1,al:0,aq:!1}),V(Sl,!1,!1,!1,!1),z(hn,0,1)]),Fl={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},Al=ge({dT:1,d2:0,eC:5})(v([{cw:z(r,-1,-1)},{cw:z(r,1,-1)},{cw:z(r,-1,1)},{cw:z(r,1,1)}])),kl={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"cw"},uniforms:{}},El=Or({bE:7681,c2:0,dp:8,bU:519,dE:15,b5:7681,b6:7681}),Bl=re,Rl=d(function(e,n,r){return $r(v([$(k,e,r,_l),v([Wr(n),El])]))}),Il=s(function(e,n){return $r(z(ht,Rl(e),n))}),me=function(e){return V(ql,513,e.aq,e.al,e.ak)}({ak:1,al:0,aq:!0}),jl=d(function(e,n,r){return{$:0,a:e,b:n,c:r}}),ue=s(function(e,n){return $(jl,32774,e,n)}),Hl=function(e){var a=e.cy,i=e.ch,c=e.b9,l=e.b7,n=e.by,e=e.a7;return z(s(function(e,n){var r=e.c,t=n.a,o=n.b,n=n.c;return function(u){return function(l){return function(c){return function(i){return function(a){return function(o){return function(t){return function(r){return function(n){return function(e){return{$:0,a:u,b:l,c:c,d:i,e:a,f:o,g:t,h:r,i:n,j:e}}}}}}}}}}}(e.a)(e.b)(r)(t)(o)(n)(a)(i)(c)(l)}),n,e)}({b7:0,a7:z(ue,1,771),b9:0,by:z(ue,770,771),ch:0,cy:0}),Ul=v([me,Hl]),Gl=s(function(e,n){var r=e.dH,t=e.dG,e=e.dF;return{b0:n.b0*e.b0+n.b2*e.b2+n.b4*e.b4,b2:n.b0*t.b0+n.b2*t.b2+n.b4*t.b4,b4:n.b0*r.b0+n.b2*r.b2+n.b4*r.b4}}),Ol=s(function(e,n){var r=e.dc,t=n.b0-r.b0,o=n.b2-r.b2,n=n.b4-r.b4,r=e.dH,a=e.dG,e=e.dF;return{b0:t*e.b0+o*e.b2+n*e.b4,b2:t*a.b0+o*a.b2+n*a.b4,b4:t*r.b0+o*r.b2+n*r.b4}}),Wl=s(function(e,n){return{dc:z(Ol,e,xr(n)),dF:z(Gl,e,_a(n)),dG:z(Gl,e,Fa(n)),dH:z(Gl,e,Cr(n))}}),Yl=s(function(e,n){return z(y,e,n)}),Ql=s(function(e,n){return z(ma,e,n)}),Kl=s(function(e,n){n=Yr(n),e=Yr(e);return{ev:z(Yl,e.ev,n.ev),ew:z(Yl,e.ew,n.ew),ex:z(Yl,e.ex,n.ex),ey:z(Ql,e.ey,n.ey),ez:z(Ql,e.ez,n.ez),eA:z(Ql,e.eA,n.eA)}}),Jl=s(function(e,n){return n+e}),Xl=s(function(e,n){var r=e.a,t=e.c,e=Ya(D(e.b)),r=Ya(D(r)),t=Ya(D(t)),n=function(e){return{a:e.b0,b:e.b2,c:e.b4}}(n),o=n.a,a=n.b,n=n.c;return{ev:z(Jl,r,o),ew:z(Jl,e,a),ex:z(Jl,t,n),ey:z(xi,r,o),ez:z(xi,e,a),eA:z(xi,t,n)}}),Zl=u(function(e,n,r,t){var o=r.fq,a=2*r.fS*n,i=2*r.fR*n,r=2*r.fQ*n,c=o.b4*n,l=o.b2*n,o=o.b0*n,n=Qr(Cr(e)),n=N(r*n.b0)+N(i*n.b2)+N(a*n.b4),u=Qr(Fa(e)),u=N(r*u.b0)+N(i*u.b2)+N(a*u.b4),f=Qr(_a(e)),r=N(r*f.b0)+N(i*f.b2)+N(a*f.b4),i=z(Xl,{a:r,b:u,c:n},z(Ol,e,$(Jt,o,l,c)));return x(t.$?i:z(Kl,t.a,i))}),eu=u(function(e,n,r,t){for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:e=c=e,n=l=n,r=u=r,t=a;continue;case 1:var i=V(Zl,e,n,o.a,r);e=c=e,n=l=n,r=u=i,t=a;continue;case 2:e=c=e,n=l=n,r=u=r,t=a;continue;case 3:i=V(Zl,e,n,o.a,r);e=c=e,n=l=n,r=u=i,t=a;continue;case 4:var c=e,l=n,u=V(eu,e,n,r,o.a);e=c,n=l,r=u,t=a;continue;default:var f=o.a,s=o.b,d=z(Wl,function(e){return qa({dc:{b0:e.Q,b2:e.R,b4:e.S},dF:{b0:e.x,b2:e.y,b4:e.z},dG:{b0:e.A,b2:e.B,b4:e.C},dH:{b0:e.D,b2:e.E,b4:e.F}})}(f),e),f=n*f.cD;e=c=e,n=l=n,r=u=V(eu,d,f,r,v([s])),t=a;continue}}}),nu={d4:!0,x:1,y:0,z:0,A:0,B:1,C:0,D:0,E:0,F:1,Q:0,R:0,S:0,cD:1},ru=Or({bE:7681,c2:0,dp:8,bU:519,dE:255,b5:7681,b6:7681}),J={b9:0,fp:!1,ch:0,dl:0,cy:0,gy:0,b0:0,b2:0,b4:0},te=s(function(e,n){return wc({ee:e.b0,ef:e.cy,eg:n.b0,eh:n.cy,ei:e.b2,ej:e.ch,ek:n.b2,el:n.ch,em:e.b4,en:e.b9,eo:n.b4,ep:n.b9,eq:e.gy,er:e.dl,es:n.gy,et:n.dl})}),tu={a:{bK:z(te,J,J),cl:z(te,J,J),cm:z(te,J,J),cn:z(te,J,J)},b:V(_c,0,0,0,0)},ou=v([Kr({ak:1,al:0,aq:!0}),Gr({bE:7680,c2:240,dp:0,bU:514,dE:0,b5:7680,b6:7680}),Hl]),au=function(e){return e===1/0||e===-1/0},iu=s(function(e,n){var r,t=n.fN,o=n.ff,n=D(n.f7),t=D(t),e=e.dn;return e.$?(r=e.a,au(t)?wc({ee:2/(o*r),ef:0,eg:0,eh:0,ei:0,ej:2/r,ek:0,el:0,em:0,en:0,eo:0,ep:-1,eq:0,er:0,es:0,et:1}):wc({ee:2/(o*r),ef:0,eg:0,eh:0,ei:0,ej:2/r,ek:0,el:0,em:0,en:0,eo:-2/(t-n),ep:-(t+n)/(t-n),eq:0,er:0,es:0,et:1})):(r=e.a,au(t)?wc({ee:1/(o*r),ef:0,eg:0,eh:0,ei:0,ej:1/r,ek:0,el:0,em:0,en:0,eo:-1,ep:-2*n,eq:0,er:0,es:-1,et:0}):wc({ee:1/(o*r),ef:0,eg:0,eh:0,ei:0,ej:1/r,ek:0,el:0,em:0,en:0,eo:-(t+n)/(t-n),ep:-2*t*n/(t-n),eq:0,er:0,es:-1,et:0}))}),cu=s(function(e,n){return 1==(1&e>>n)?0:1}),lu=d(function(r,t,e){return $r(z(L,function(e){var n=e<<4;return $(k,r,{a:t,b:V(_c,z(cu,e,0),z(cu,e,1),z(cu,e,2),z(cu,e,3))},function(e){return v([Kr({ak:1,al:0,aq:!0}),Gr({bE:7680,c2:240,dp:e,bU:514,dE:0,b5:7680,b6:7680}),Hl])}(n))},z(gt,1,z(Bl,2,e)-1)))}),uu=function(e){return{ee:e[0],ei:e[1],em:e[2],eq:e[3],ef:e[4],ej:e[5],en:e[6],er:e[7],eg:e[8],ek:e[9],eo:e[10],es:e[11],eh:e[12],el:e[13],ep:e[14],et:e[15]}},fu={dc:la,dF:ie,dG:U,dH:Pn},su=s(function(e,n){var r,t;return e=Br(xr(n=z(Wl,n,e))),r=Qr(Cr(n)),t=Qr(Fa(n)),n=Qr(_a(n)),wc({ee:n.b0,ef:t.b0,eg:r.b0,eh:e.b0,ei:n.b2,ej:t.b2,ek:r.b2,el:e.b2,em:n.b4,en:t.b4,eo:r.b4,ep:e.b4,eq:0,er:0,es:0,et:1})}),du=s(function(n,e){var r=v([yl(1),Pl(0),hl(!0),V(Cl,0,0,0,0)]),t=function(){var e=n.a8;switch(e.$){case 0:return{a:r,b:"0",c:1};case 1:return{a:z(h,xl,r),b:"1",c:1};default:return{a:r,b:"0",c:e.a}}}(),o=t.a,a=t.b,i=t.c,t=n.fx,c=t.a,t=Ur(t.b),l=z(F,"height",dt(t)+"px"),c=Ur(c),u=c/t,e=z(Oi,function(e){return Jr({ff:u,fo:n.fo,ft:n.ft,fG:e.fG,aF:e.aF,aI:e.aI,e2:i,aO:e.aO,aR:e.aR})},e),f=z(F,"width",dt(c)+"px"),s=Hr(n.fi);return $(jr,"div",v([z(F,"padding","0px"),f,l]),v([{a:a,b:$(Ll,o,v([(a=pi(c*i),z(Xe,"width",dt(a))),function(e){return z(Xe,"height",dt(e))}(pi(t*i)),f,l,z(F,"display","block"),z(F,"background-color",s)]),e)}]))}),bu=function(e){return z(du,{a8:e.a8,fi:e.fi,fo:e.fo,ft:e.ft,fx:e.fx},v([{fG:e.fG,aF:e.aF,aI:e.aI,aO:e.aO,aR:e.aR}]))},mu={b0:.31271,b2:.32902},vu=function(e){return D(e)},pu={$:1},gu=function(e){return e},hu={$:0,a:tu.a},xu={$:0},Cu=function(e){return{$:6,a:e}},yu=function(e){return e?z(F,"background-color","#d33030"):z(F,"","")},Pu=Ye("button"),Tu=Ke,Lu=s(function(e,n){return z(Tu,e,{$:0,a:n})}),Mu=function(e){return z(Lu,"click",kt(e))},c=function(e){return Tl(e)+"px"},wu=s(function(e,n){return e/n}),Nu=s(function(e,n){var r=e.dc,e=e.dF;return(n.b0-r.b0)*e.b0+(n.b2-r.b2)*e.b2+(n.b4-r.b4)*e.b4}),Du=d(function(e,n,r){var t=e.dc,o=e.dG,e=e.dF;return{b0:t.b0+n*e.b0+r*o.b0,b2:t.b2+n*e.b2+r*o.b2}}),zu=s(function(e,n){var r=e.dc,e=e.dG;return(n.b0-r.b0)*e.b0+(n.b2-r.b2)*e.b2+(n.b4-r.b4)*e.b4}),$u=s(function(e,n){var r=e.dc,e=e.dH;return(n.b0-r.b0)*e.b0+(n.b2-r.b2)*e.b2+(n.b4-r.b4)*e.b4}),Vu=d(function(e,n,r){var t,o,a=e.gD,i=z(Nu,a,r),c=z(zu,a,r),a=La(z($u,a,r)),r=Tr(n),l=r.a,r=r.b,u=z(wu,l,r),e=e.dn;return e.$?(o=z(wu,c,t=e.a),$(Du,Pr(n),z(ei,z(wu,i,z(ei,u,t)),l),z(ei,o,r))):(t=e.a,o=z(wu,c,a)/t,$(Du,Pr(n),z(ei,z(wu,i,a)/(u*t)/2,l),z(ei,o/2,r)))}),Su=u(function(e,n,r,t){e=wi($(Vu,e,Mi,z(Xo,$(o,0,0,1.2),t)));return z(a,v([z(F,"position","absolute"),z(F,"left",c(e.b0-45)),z(F,"top",c(e.b2)),z(F,"width",c(90)),z(F,"height",c(15)),z(F,"background-color","#d33030")]),v([z(a,v([z(F,"position","absolute"),z(F,"left","0"),z(F,"top","0"),z(F,"width",Tl(n/r*100)+"%"),z(F,"height",c(15)),z(F,"background-color","lime")]),m)]))}),qu=d(function(e,n,r){var e=wi($(Vu,e,Mi,r)),r=e.b0,e=e.b2,n=mr(n);return 1===n.$?i(""):(n=n.a.cI,z(a,v([z(F,"position","absolute"),z(F,"left",c(r-15)),z(F,"top",c(e-15)),z(F,"width",c(30)),z(F,"height",c(30)),z(F,"background-color","#d33030"),z(F,"color","white"),z(F,"display","flex"),z(F,"justify-content","center"),z(F,"align-items","center"),z(F,"border-radius","100%"),z(F,"font-weight","bold")]),v([z(a,m,v([i(dt(n))]))])))}),_u=lc,Fu=s(function(e,n){return S(vl,_r(e),z(Ea,$(o,-.5,-.5,0),n),z(Ea,$(o,.5,-.5,0),n),z(Ea,$(o,.5,.5,0),n),z(Ea,$(o,-.5,.5,0),n))}),Au=s(function(e,n){return n.$?i(""):(n=f(n=wi($(Vu,e,Mi,(e=n.a).m)),{b0:n.b0-75,b2:n.b2-10}),z(a,v([z(F,"position","absolute"),z(F,"left",c(n.b0)),z(F,"top",c(n.b2)),z(F,"width",c(150)),z(F,"text-align","center"),z(F,"color","white"),z(F,"font-size","12px"),z(F,"font-weight","bold")]),v([i(e.f5)])))}),ku=function(e){switch(e.J.$){case 0:return e.U.b?"Walking":"Standing";case 1:return"Attacking";default:return"Fighting"}},Eu=s(function(e,n){return z(a,m,v([i(e+(" XP: "+dt(n)))]))}),oe=K({fX:function(e){return{a:{a6:0,J:Gt,as:0,aW:ir(0),a9:0,au:10,ae:m,aG:Yt,m:$(Jt,0,0,0),cq:10,P:Xt,bO:-1,bo:0,U:m},b:Zt}},gt:function(e){return to(O(v([jo(z(Ft,lr,z(wo,"key",Oo))),Ho(z(Ft,ur,z(wo,"key",Oo))),Uo($(At,s(function(e,n){return{$:1,a:z(Go,e,n)}}),z(wo,"clientX",No),z(wo,"clientY",No))),qo(z(oo,dr,cr))]),2===e.J.$?v([z(Mo,1e3,function(e){return ro})]):m))},gz:ve,gC:function(n){return z(a,m,v([z(a,v([z(F,"border","1px solid white"),z(F,"display","inline-block"),z(F,"position","relative"),z(F,"overflow","hidden"),z(F,"user-select","none")]),v([(e={fi:gl,fo:Xa(n),ft:1,fx:{a:pi(800),b:pi(600)},fG:O(pl,z(h,z(Fu,function(e){switch(e.$){case 0:return nc;case 1:return rc;default:return tc}}(n.J),n.m),z(L,Xr,n.P)))},bu({a8:pu,fi:e.fi,fo:e.fo,ft:e.ft,fx:e.fx,fG:e.fG,aF:vu(gu(80)),aI:hu,aO:xu,aR:mu})),z(a,m,z(L,function(e){return e.$?i(""):(e=e.a,V(Su,Xa(n),e.au,e.cq,e.m))},n.P)),function(e){var n=f(n=wi($(Vu,Xa(e),Mi,e.m)),{b0:n.b0-75,b2:n.b2-10});return z(a,v([z(F,"position","absolute"),z(F,"left",c(n.b0)),z(F,"top",c(n.b2)),z(F,"width",c(150)),z(F,"text-align","center"),z(F,"color","white"),z(F,"font-size","12px"),z(F,"font-weight","bold")]),v([i(ku(e))]))}(n),V(Su,Xa(n),n.au,n.cq,n.m),$(qu,Xa(n),n.ae,n.m),z(a,m,z(L,Au(Xa(n)),n.P)),z(a,m,z(L,function(e){return e.$?i(""):(e=e.a,$(qu,Xa(n),e.ae,e.m))},n.P))])),z(a,v([z(F,"margin-bottom","20px")]),v([function(e){return z(a,m,v([z(Pu,v([Mu(Cu(0)),yu(!e.as)]),v([i("Accuracy")])),z(Pu,v([Mu(Cu(1)),yu(1===e.as)]),v([i("Strength")])),z(Pu,v([Mu(Cu(2)),yu(2===e.as)]),v([i("Defense")]))]))}(n),function(e){return z(a,m,v([z(Eu,"Accuracy",e.a6),z(Eu,"Strength",e.bo),z(Eu,"Defense",e.a9)]))}(n)])),z(a,m,v([i("Use left and right arrow keys to rotate the screen.")])),z(a,m,v([i("Click on the screen to move to that location.")])),z(a,m,v([i("Click on a monster to attack it.")]))]));var e}});ae={Main:{init:oe(kt(0))(0)}},e.Elm?function e(n,r){for(var t in r)t in n?"init"==t?ee(6):e(n[t],r[t]):n[t]=r[t]}(e.Elm,ae):e.Elm=ae}(this);