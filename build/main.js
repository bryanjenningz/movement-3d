!function(n){"use strict";function R(e,n,r){return r.a=e,r.f=n,r}function s(r){return R(2,r,function(n){return function(e){return r(n,e)}})}function d(t){return R(3,t,function(r){return function(n){return function(e){return t(r,n,e)}}})}function u(o){return R(4,o,function(t){return function(r){return function(n){return function(e){return o(t,r,n,e)}}}})}function c(a){return R(5,a,function(o){return function(t){return function(r){return function(n){return function(e){return a(o,t,r,n,e)}}}}})}function F(i){return R(6,i,function(a){return function(o){return function(t){return function(r){return function(n){return function(e){return i(a,o,t,r,n,e)}}}}}})}function E(c){return R(7,c,function(i){return function(a){return function(o){return function(t){return function(r){return function(n){return function(e){return c(i,a,o,t,r,n,e)}}}}}}})}function I(l){return R(8,l,function(c){return function(i){return function(a){return function(o){return function(t){return function(r){return function(n){return function(e){return l(c,i,a,o,t,r,n,e)}}}}}}}})}function z(e,n,r){return 2===e.a?e.f(n,r):e(n)(r)}function $(e,n,r,t){return 3===e.a?e.f(n,r,t):e(n)(r)(t)}function S(e,n,r,t,o){return 4===e.a?e.f(n,r,t,o):e(n)(r)(t)(o)}function V(e,n,r,t,o,a){return 5===e.a?e.f(n,r,t,o,a):e(n)(r)(t)(o)(a)}function j(e,n,r,t,o,a,i){return 6===e.a?e.f(n,r,t,o,a,i):e(n)(r)(t)(o)(a)(i)}function G(e,n,r,t,o,a,i,c){return 7===e.a?e.f(n,r,t,o,a,i,c):e(n)(r)(t)(o)(a)(i)(c)}function l(e,n){for(var r,t=[],o=H(e,n,0,t);o&&(r=t.pop());o=H(r.a,r.b,0,t));return o}function H(e,n,r,t){if(e!==n){if("object"!=typeof e||null===e||null===n)return"function"==typeof e&&ne(5),!1;if(100<r)t.push({a:e,b:n});else for(var o in e.$<0&&(e=ot(e),n=ot(n)),e)if(!H(e[o],n[o],r+1,t))return!1}return!0}function v(e,n,r){if("object"!=typeof e)return e===n?0:e<n?-1:1;if(void 0===e.$)return(r=(r=v(e.a,n.a))||v(e.b,n.b))||v(e.c,n.c);for(;e.b&&n.b&&!(r=v(e.a,n.a));e=e.b,n=n.b);return r||(e.b?1:n.b?-1:0)}var O=s(function(e,n){e=v(e,n);return e<0?rt:e?nt:et}),Y=0;function f(e,n){var r,t={};for(r in e)t[r]=e[r];for(r in n)t[r]=n[r];return t}function U(e,n){if("string"==typeof e)return e+n;if(!e.b)return n;var r={$:1,a:e.a,b:n};e=e.b;for(var t=r;e.b;e=e.b)t=t.b={$:1,a:e.a,b:n};return r}var m={$:0};function W(e,n){return{$:1,a:e,b:n}}var Q=s(W);function p(e){for(var n=m,r=e.length;r--;)n={$:1,a:e[r],b:n};return n}function Z(e){for(var n=[];e.b;e=e.b)n.push(e.a);return n}var K=d(function(e,n,r){for(var t=[];n.b&&r.b;n=n.b,r=r.b)t.push(z(e,n.a,r.a));return p(t)}),X=s(function(r,e){return p(Z(e).sort(function(e,n){e=z(r,e,n);return e===et?0:e===rt?-1:1}))});var J=d(function(e,n,r){for(var t=Array(e),o=0;o<e;o++)t[o]=r(n+o);return t}),ee=s(function(e,n){for(var r=Array(e),t=0;t<e&&n.b;t++)r[t]=n.a,n=n.b;return r.length=t,{a:r,b:n}});function ne(e){throw Error("https://github.com/elm/core/blob/1.0.0/hints/"+e+".md")}var re=s(function(e,n){return e+n}),te=s(Math.pow),oe=Math.cos,ae=Math.sin,ie=Math.tan;var ce=Math.ceil,le=Math.floor,ue=Math.round,fe=Math.sqrt,se=Math.log;var de=s(function(e,n){return n.split(e)}),ve=s(function(e,n){return n.join(e)});function me(e){return e+""}var pe={$:2,b:function(e){return"number"==typeof e?ut(e):Le("a FLOAT",e)}},ge={$:2,b:function(e){return"string"==typeof e?ut(e):e instanceof String?ut(e+""):Le("a STRING",e)}};var be=s(function(e,n){return{$:6,d:e,b:n}});var he=s(function(e,n){return{$:9,f:e,g:[n]}}),xe=d(function(e,n,r){return{$:9,f:e,g:[n,r]}}),Ce=s(g);function g(e,n){switch(e.$){case 2:return e.b(n);case 5:return null===n?ut(e.c):Le("null",n);case 3:return ye(n)?Pe(e.b,n,p):Le("a LIST",n);case 4:return ye(n)?Pe(e.b,n,Te):Le("an ARRAY",n);case 6:var r=e.d;return"object"==typeof n&&null!==n&&r in n?(a=g(e.b,n[r]),y(a)?a:at(z(ct,r,a.a))):Le("an OBJECT with a field named `"+r+"`",n);case 7:r=e.e;return ye(n)?r<n.length?(a=g(e.b,n[r]),y(a)?a:at(z(lt,r,a.a))):Le("a LONGER array. Need index "+r+" but only see "+n.length+" entries",n):Le("an ARRAY",n);case 8:if("object"!=typeof n||null===n||ye(n))return Le("an OBJECT",n);var t,o=m;for(t in n)if(n.hasOwnProperty(t)){var a=g(e.b,n[t]);if(!y(a))return at(z(ct,t,a.a));o={$:1,a:{a:t,b:a.a},b:o}}return ut(xt(o));case 9:for(var i=e.f,c=e.g,l=0;l<c.length;l++){a=g(c[l],n);if(!y(a))return a;i=i(a.a)}return ut(i);case 10:a=g(e.b,n);return y(a)?g(e.h(a.a),n):a;case 11:for(var u=m,f=e.g;f.b;f=f.b){a=g(f.a,n);if(y(a))return a;u={$:1,a:a.a,b:u}}return at(ft(xt(u)));case 1:return at(z(it,e.a,n));case 0:return ut(e.a)}}function Pe(e,n,r){for(var t=n.length,o=Array(t),a=0;a<t;a++){var i=g(e,n[a]);if(!y(i))return at(z(lt,a,i.a));o[a]=i.a}return ut(r(o))}function ye(e){return Array.isArray(e)||"undefined"!=typeof FileList&&e instanceof FileList}function Te(n){return z(kt,n.length,function(e){return n[e]})}function Le(e,n){return at(z(it,"Expecting "+e,n))}function Me(e,n){if(e===n)return!0;if(e.$!==n.$)return!1;switch(e.$){case 0:case 1:return e.a===n.a;case 2:return e.b===n.b;case 5:return e.c===n.c;case 3:case 4:case 8:return Me(e.b,n.b);case 6:return e.d===n.d&&Me(e.b,n.b);case 7:return e.e===n.e&&Me(e.b,n.b);case 9:return e.f===n.f&&we(e.g,n.g);case 10:return e.h===n.h&&Me(e.b,n.b);case 11:return we(e.g,n.g)}}function we(e,n){var r=e.length;if(r!==n.length)return!1;for(var t=0;t<r;t++)if(!Me(e[t],n[t]))return!1;return!0}function De(e){return{$:0,a:e}}var Ne=s(function(e,n){return{$:3,b:e,d:n}});var ze=0;function $e(e){e={$:0,e:ze++,f:e,g:null,h:[]};return Be(e),e}function Se(n){return{$:2,b:function(e){e({$:0,a:$e(n)})},c:null}}function Ve(e,n){e.h.push(n),Be(e)}var _e=s(function(n,r){return{$:2,b:function(e){Ve(n,r),e({$:0,a:Y})},c:null}});var ke=!1,Ae=[];function Be(e){if(Ae.push(e),!ke){for(ke=!0;e=Ae.shift();)!function(n){for(;n.f;){var e=n.f.$;if(0===e||1===e){for(;n.g&&n.g.$!==e;)n.g=n.g.i;if(!n.g)return;n.f=n.g.b(n.f.a),n.g=n.g.i}else{if(2===e)return n.f.c=n.f.b(function(e){n.f=e,Be(n)});if(5===e){if(0===n.h.length)return;n.f=n.f.b(n.h.shift())}else n.g={$:3===e?0:1,b:n.f.b,i:n.g},n.f=n.f.d}}}(e);ke=!1}}function qe(e,n,r,t,o,a){var e=z(Ce,e,n?n.flags:void 0),i=(y(e)||ne(2),{}),n=r(e.a),c=n.a,l=a(u,c),r=function(e,n){var r,t;for(t in Re){var o=Re[t];o.a&&((r=r||{})[t]=o.a(t,n)),e[t]=function(e,n){var t={g:n,h:void 0},o=e.c,a=e.d,i=e.e,c=e.f;function l(r){return z(Ne,l,{$:5,b:function(e){var n=e.a;return 0===e.$?$(a,t,n,r):i&&c?S(o,t,n.i,n.j,r):$(o,t,i?n.i:n.j,r)}})}return t.h=$e(z(Ne,l,e.b))}(o,n)}return r}(i,u);function u(e,n){e=z(t,e,c);l(c=e.a,n),Oe(i,e.b,o(c))}return Oe(i,n.b,o(c)),r?{ports:r}:{}}var Re={};var Fe=s(function(n,r){return{$:2,b:function(e){n.g(r),e({$:0,a:Y})},c:null}}),Ee=s(function(e,n){return z(_e,e.h,{$:0,a:n})});function Ie(n){return function(e){return{$:1,k:n,l:e}}}function je(e){return{$:2,m:e}}var Ge=[],He=!1;function Oe(e,n,r){if(Ge.push({p:e,q:n,r:r}),!He){He=!0;for(var t;t=Ge.shift();)!function(e,n,r){var t,o={};for(t in Ye(!0,n,o,null),Ye(!1,r,o,null),e)Ve(e[t],{$:"fx",a:o[t]||{i:m,j:m}})}(t.p,t.q,t.r);He=!1}}function Ye(e,n,r,t){switch(n.$){case 1:var o=n.k,a=function(e,n,r,t){function o(e){for(var n=r;n;n=n.t)e=n.s(e);return e}return z(e?Re[n].e:Re[n].f,o,t)}(e,o,t,n.l);return void(r[o]=function(e,n,r){return r=r||{i:m,j:m},e?r.i={$:1,a:n,b:r.i}:r.j={$:1,a:n,b:r.j},r}(e,a,r[o]));case 2:for(var i=n.m;i.b;i=i.b)Ye(e,i.a,r,t);return;case 3:Ye(e,n.o,r,{s:n.n,t:t})}}var Ue;var We="undefined"!=typeof document?document:{};function Qe(e){return{$:0,a:e}}var Ze=s(function(a,i){return s(function(e,n){for(var r=[],t=0;n.b;n=n.b){var o=n.a;t+=o.b||0,r.push(o)}return t+=r.length,{$:1,c:i,d:tn(e),e:r,f:a,b:t}})})(void 0),Ke=s(function(a,i){return s(function(e,n){for(var r=[],t=0;n.b;n=n.b){var o=n.a;t+=o.b.b||0,r.push(o)}return t+=r.length,{$:2,c:i,d:tn(e),e:r,f:a,b:t}})})(void 0);var Xe=s(function(e,n){return{$:"a0",n:e,o:n}}),Je=s(function(e,n){return{$:"a1",n:e,o:n}}),en=s(function(e,n){return{$:"a3",n:e,o:n}}),nn=/^script$/i;var rn;function tn(e){for(var n={};e.b;e=e.b){var r,t=e.a,o=t.$,a=t.n,t=t.o;"a2"===o?"className"===a?on(n,a,t):n[a]=t:(r=n[o]||(n[o]={}),"a3"===o&&"class"===a?on(r,a,t):r[a]=t)}return n}function on(e,n,r){var t=e[n];e[n]=t?t+" "+r:r}function an(e,n){var r=e.$;if(5===r)return an(e.k||(e.k=e.m()),n);if(0===r)return We.createTextNode(e.a);if(4===r){for(var t=e.k,o=e.j;4===t.$;)"object"!=typeof o?o=[o,t.j]:o.push(t.j),t=t.k;var a={j:o,p:n};(i=an(t,a)).elm_event_node_ref=a}else if(3===r)cn(i=e.h(e.g),n,e.d);else{var i=e.f?We.createElementNS(e.f,e.c):We.createElement(e.c);Ue&&"a"==e.c&&i.addEventListener("click",Ue(i)),cn(i,n,e.d);for(var c=e.e,l=0;l<c.length;l++)i.appendChild(an(1===r?c[l]:c[l].b,n))}return i}function cn(e,n,r){for(var t in r){var o=r[t];"a1"===t?function(e,n){var r,t=e.style;for(r in n)t[r]=n[r]}(e,o):"a0"===t?function(e,n,r){var t,o=e.elmFs||(e.elmFs={});for(t in r){var a=r[t],i=o[t];if(a){if(i){if(i.q.$===a.$){i.q=a;continue}e.removeEventListener(t,i)}i=function(l,e){function u(e){var n=u.q,r=g(n.a,e);if(y(r)){for(var t,n=Rt(n),r=r.a,o=n?n<3?r.a:r.aM:r,a=1==n?r.b:3==n&&r.dt,i=(a&&e.stopPropagation(),(2==n?r.b:3==n&&r.dj)&&e.preventDefault(),l);t=i.j;){if("function"==typeof t)o=t(o);else for(var c=t.length;c--;)o=t[c](o);i=i.p}i(o,a)}}return u.q=e,u}(n,a),e.addEventListener(t,i,rn&&{passive:Rt(a)<2}),o[t]=i}else e.removeEventListener(t,i),o[t]=void 0}}(e,n,o):"a3"===t?function(e,n){for(var r in n){var t=n[r];void 0!==t?e.setAttribute(r,t):e.removeAttribute(r)}}(e,o):"a4"===t?function(e,n){for(var r in n){var t=n[r],o=t.f,t=t.o;void 0!==t?e.setAttributeNS(o,r,t):e.removeAttributeNS(o,r)}}(e,o):("value"!==t&&"checked"!==t||e[t]!==o)&&(e[t]=o)}}try{window.addEventListener("t",null,Object.defineProperty({},"passive",{get:function(){rn=!0}}))}catch(e){}function ln(e,n){var r=[];return k(e,n,r,0),r}function _(e,n,r,t){n={$:n,r:r,s:t,t:void 0,u:void 0};return e.push(n),n}function k(e,n,r,t){if(e!==n){var o=e.$,a=n.$;if(o!==a){if(1!==o||2!==a)return void _(r,0,t,n);n=function(e){for(var n=e.e,r=n.length,t=Array(r),o=0;o<r;o++)t[o]=n[o].b;return{$:1,c:e.c,d:e.d,e:t,f:e.f,b:e.b}}(n),a=1}switch(a){case 5:for(var i=e.l,c=n.l,l=i.length,u=l===c.length;u&&l--;)u=i[l]===c[l];if(u)return void(n.k=e.k);n.k=n.m();var f=[];return k(e.k,n.k,f,0),void(0<f.length&&_(r,1,t,f));case 4:for(var s=e.j,d=n.j,v=!1,m=e.k;4===m.$;)v=!0,"object"!=typeof s?s=[s,m.j]:s.push(m.j),m=m.k;for(var p=n.k;4===p.$;)v=!0,"object"!=typeof d?d=[d,p.j]:d.push(p.j),p=p.k;return v&&s.length!==d.length?void _(r,0,t,n):((v?function(e,n){for(var r=0;r<e.length;r++)if(e[r]!==n[r])return;return 1}(s,d):s===d)||_(r,2,t,d),void k(m,p,r,t+1));case 0:return void(e.a!==n.a&&_(r,3,t,n.a));case 1:return void un(e,n,r,t,sn);case 2:return void un(e,n,r,t,dn);case 3:if(e.h!==n.h)return void _(r,0,t,n);f=fn(e.d,n.d),f=(f&&_(r,4,t,f),n.i(e.g,n.g));f&&_(r,5,t,f)}}}function un(e,n,r,t,o){var a;e.c!==n.c||e.f!==n.f?_(r,0,t,n):((a=fn(e.d,n.d))&&_(r,4,t,a),o(e,n,r,t))}function fn(e,n,r){var t,o,a,i,c;for(o in e)"a1"===o||"a0"===o||"a3"===o||"a4"===o?(a=fn(e[o],n[o]||{},o))&&((t=t||{})[o]=a):o in n?(a=e[o])===(i=n[o])&&"value"!==o&&"checked"!==o||"a0"===r&&function(e,n){return e.$==n.$&&Me(e.a,n.a)}(a,i)||((t=t||{})[o]=i):(t=t||{})[o]=r?"a1"===r?"":"a0"===r||"a3"===r?void 0:{f:e[o].f,o:void 0}:"string"==typeof e[o]?"":null;for(c in n)c in e||((t=t||{})[c]=n[c]);return t}function sn(e,n,r,t){var o=e.e,a=n.e,e=o.length,n=a.length;n<e?_(r,6,t,{v:n,i:e-n}):e<n&&_(r,7,t,{v:e,e:a});for(var i=e<n?e:n,c=0;c<i;c++){var l=o[c];k(l,a[c],r,++t),t+=l.b||0}}function dn(e,n,r,t){for(var o=[],a={},i=[],c=e.e,l=n.e,u=c.length,f=l.length,s=0,d=0,v=t;s<u&&d<f;){var m=c[s],p=l[d],g=m.a,b=p.a,h=m.b,x=p.b,C=void 0,P=void 0;if(g===b)k(h,x,o,++v),v+=h.b||0,s++,d++;else{var y,T,L,M,w=c[s+1],D=l[d+1];if(w&&(T=w.b,P=b===(y=w.a)),D&&(M=D.b,C=g===(L=D.a)),C&&P)k(h,M,o,++v),mn(a,o,g,x,d,i),v+=h.b||0,pn(a,o,g,T,++v),v+=T.b||0,s+=2,d+=2;else if(C)v++,mn(a,o,b,x,d,i),k(h,M,o,v),v+=h.b||0,s+=1,d+=2;else if(P)pn(a,o,g,h,++v),v+=h.b||0,k(T,x,o,++v),v+=T.b||0,s+=2,d+=1;else{if(!w||y!==L)break;pn(a,o,g,h,++v),mn(a,o,b,x,d,i),v+=h.b||0,k(T,M,o,++v),v+=T.b||0,s+=2,d+=2}}}for(;s<u;){h=(m=c[s]).b;pn(a,o,m.a,h,++v),v+=h.b||0,s++}for(;d<f;){var N=N||[];mn(a,o,(p=l[d]).a,p.b,void 0,N),d++}(0<o.length||0<i.length||N)&&_(r,8,t,{w:o,x:i,y:N})}var vn="_elmW6BL";function mn(e,n,r,t,o,a){var i,c=e[r];c?1===c.c?(a.push({r:o,A:c}),c.c=2,k(c.z,t,i=[],c.r),c.r=o,c.s.s={w:i,A:c}):mn(e,n,r+vn,t,o,a):(a.push({r:o,A:c={c:0,z:t,r:o,s:void 0}}),e[r]=c)}function pn(e,n,r,t,o){var a,i=e[r];i?0===i.c?(i.c=2,k(t,i.z,a=[],o),_(n,9,o,{w:a,A:i})):pn(e,n,r+vn,t,o):(a=_(n,9,o,void 0),e[r]={c:1,z:t,r:o,s:a})}function gn(e,n,r,t){!function e(n,r,t,o,a,i,c){var l=t[o];var u=l.r;for(;u===a;){var f,s=l.$;if(1===s?gn(n,r.k,l.s,c):8===s?(l.t=n,l.u=c,0<(f=l.s.w).length&&e(n,r,f,0,a,i,c)):9===s?(l.t=n,l.u=c,(s=l.s)&&(s.A.s=n,0<(f=s.w).length)&&e(n,r,f,0,a,i,c)):(l.t=n,l.u=c),!(l=t[++o])||(u=l.r)>i)return o}var d=r.$;if(4===d){for(var v=r.k;4===v.$;)v=v.k;return e(n,v,t,o,a+1,i,n.elm_event_node_ref)}var m=r.e;var p=n.childNodes;for(var g=0;g<m.length;g++){var b=1===d?m[g]:m[g].b,h=++a+(b.b||0);if(a<=u&&u<=h&&(o=e(p[g],b,t,o,a,h,c),!(l=t[o])||(u=l.r)>i))return o;a=h}return o}(e,n,r,0,0,n.b,t)}function bn(e,n,r,t){return 0===r.length?e:(gn(e,n,r,t),hn(e,r))}function hn(e,n){for(var r=0;r<n.length;r++){var t=n[r],o=t.t,t=function(e,n){switch(n.$){case 0:return function(e,n,r){var t=e.parentNode,n=an(n,r);n.elm_event_node_ref||(n.elm_event_node_ref=e.elm_event_node_ref);t&&n!==e&&t.replaceChild(n,e);return n}(e,n.s,n.u);case 4:return cn(e,n.u,n.s),e;case 3:return e.replaceData(0,e.length,n.s),e;case 1:return hn(e,n.s);case 2:return e.elm_event_node_ref?e.elm_event_node_ref.j=n.s:e.elm_event_node_ref={j:n.s,p:n.u},e;case 6:for(var r=n.s,t=0;t<r.i;t++)e.removeChild(e.childNodes[r.v]);return e;case 7:for(var o=(r=n.s).e,t=r.v,a=e.childNodes[t];t<o.length;t++)e.insertBefore(an(o[t],n.u),a);return e;case 9:var i;return(r=n.s)?(void 0!==(i=r.A).r&&e.parentNode.removeChild(e),i.s=hn(e,r.w)):e.parentNode.removeChild(e),e;case 8:return function(e,n){for(var r=n.s,t=function(e,n){if(e){for(var r=We.createDocumentFragment(),t=0;t<e.length;t++){var o=e[t].A;r.appendChild(2===o.c?o.s:an(o.z,n.u))}return r}}(r.y,n),o=(e=hn(e,r.w),r.x),a=0;a<o.length;a++){var i=o[a],c=i.A,c=2===c.c?c.s:an(c.z,n.u);e.insertBefore(c,e.childNodes[i.r])}t&&e.appendChild(t);return e}(e,n);case 5:return n.s(e);default:ne(10)}}(o,t);o===e&&(e=t)}return e}function xn(e){if(3===e.nodeType)return{$:0,a:e.textContent};if(1!==e.nodeType)return{$:0,a:""};for(var n=m,r=e.attributes,t=r.length;t--;)var o=r[t],n={$:1,a:z(en,o.name,o.value),b:n};for(var a=e.tagName.toLowerCase(),i=m,c=e.childNodes,t=c.length;t--;)i={$:1,a:xn(c[t]),b:i};return $(Ze,a,n,i)}var e=u(function(n,e,r,i){return qe(e,i,n.fV,n.gw,n.gq,function(r,e){var t=n.gz,o=i.node,a=xn(o);return yn(e,function(e){var e=t(e),n=ln(a,e);o=bn(o,a,n,r),a=e})})}),Cn="undefined"!=typeof cancelAnimationFrame?cancelAnimationFrame:function(e){clearTimeout(e)},Pn="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(e){return setTimeout(e,1e3/60)};function yn(r,t){t(r);var o=0;function a(){o=1===o?0:(Pn(a),t(r),1)}return function(e,n){r=e,n?(t(r),2===o&&(o=1)):(0===o&&Pn(a),o=2)}}var Tn={addEventListener:function(){},removeEventListener:function(){}},Ln="undefined"!=typeof document?document:Tn,Mn="undefined"!=typeof window?window:Tn,wn=d(function(r,t,o){return Se({$:2,b:function(e){function n(e){$e(o(e))}return r.addEventListener(t,n,rn&&{passive:!0}),function(){r.removeEventListener(t,n)}},c:null})}),Dn=s(function(e,n){e=g(e,n);return y(e)?x(e.a):C});Tn=s(function(r,t){return{$:2,b:function(e){var n=setInterval(function(){$e(t)},r);return function(){clearInterval(n)}},c:null}});var Nn=0;function zn(e,n){for(;n.b;n=n.b)e(n.a)}function $n(e){for(var n=0;e.b;e=e.b)n++;return n}function Sn(e){e.scissor.enabled&&(e.gl.disable(e.gl.SCISSOR_TEST),e.scissor.enabled=!1)}function Vn(e){var n=e.colorMask;n.a&&n.b&&n.c&&n.d||(e.gl.colorMask(!0,!0,!0,!0),n.a=!0,n.b=!0,n.c=!0,n.d=!0)}var _n="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:function(e){setTimeout(e,1e3/60)},kn=c(function(e,n,r,t,o){return{$:0,a:e,b:n,c:r,d:t,e:o}}),An=s(function(e,n){var r=e.blend;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.BLEND),r.enabled=!0),r.a===n.a&&r.d===n.d||(e.gl.blendEquationSeparate(n.a,n.d),r.a=n.a,r.d=n.d),r.b===n.b&&r.c===n.c&&r.e===n.e&&r.f===n.f||(e.gl.blendFuncSeparate(n.b,n.c,n.e,n.f),r.b=n.b,r.c=n.c,r.e=n.e,r.f=n.f),r.g===n.g&&r.h===n.h&&r.i===n.i&&r.j===n.j||(e.gl.blendColor(n.g,n.h,n.i,n.j),r.g=n.g,r.h=n.h,r.i=n.i,r.j=n.j)}),Bn=s(function(e,n){var r=e.depthTest;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.DEPTH_TEST),r.enabled=!0),r.a!==n.a&&(e.gl.depthFunc(n.a),r.a=n.a),r.b!==n.b&&(e.gl.depthMask(n.b),r.b=n.b),r.c===n.c&&r.d===n.d||(e.gl.depthRange(n.c,n.d),r.c=n.c,r.d=n.d)}),qn=s(function(e,n){var r=e.stencilTest;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.STENCIL_TEST),r.enabled=!0),r.d===n.d&&r.a===n.a&&r.b===n.b||(e.gl.stencilFuncSeparate(e.gl.FRONT,n.d,n.a,n.b),r.d=n.d),r.e===n.e&&r.f===n.f&&r.g===n.g||(e.gl.stencilOpSeparate(e.gl.FRONT,n.e,n.f,n.g),r.e=n.e,r.f=n.f,r.g=n.g),r.c!==n.c&&(e.gl.stencilMask(n.c),r.c=n.c),r.h===n.h&&r.a===n.a&&r.b===n.b||(e.gl.stencilFuncSeparate(e.gl.BACK,n.h,n.a,n.b),r.h=n.h,r.a=n.a,r.b=n.b),r.i===n.i&&r.j===n.j&&r.k===n.k||(e.gl.stencilOpSeparate(e.gl.BACK,n.i,n.j,n.k),r.i=n.i,r.j=n.j,r.k=n.k)}),Rn=s(function(e,n){var r=e.scissor;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.SCISSOR_TEST),r.enabled=!0),r.a===n.a&&r.b===n.b&&r.c===n.c&&r.d===n.d||(e.gl.scissor(n.a,n.b,n.c,n.d),r.a=n.a,r.b=n.b,r.c=n.c,r.d=n.d)}),Fn=s(function(e,n){var r=e.colorMask;r.toggle=e.toggle,r.enabled=!0,r.a===n.a&&r.b===n.b&&r.c===n.c&&r.d===n.d||(e.gl.colorMask(n.a,n.b,n.c,n.d),r.a=n.a,r.b=n.b,r.c=n.c,r.d=n.d)}),En=s(function(e,n){var r=e.cullFace;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.CULL_FACE),r.enabled=!0),r.a!==n.a&&(e.gl.cullFace(n.a),r.a=n.a)}),In=s(function(e,n){var r=e.polygonOffset;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.POLYGON_OFFSET_FILL),r.enabled=!0),r.a===n.a&&r.b===n.b||(e.gl.polygonOffset(n.a,n.b),r.a=n.a,r.b=n.b)}),jn=s(function(e,n){var r=e.sampleCoverage;r.toggle=e.toggle,r.enabled||(e.gl.enable(e.gl.SAMPLE_COVERAGE),r.enabled=!0),r.a===n.a&&r.b===n.b||(e.gl.sampleCoverage(n.a,n.b),r.a=n.a,r.b=n.b)}),Gn=["blend","depthTest","stencilTest","scissor","colorMask","cullFace","polygonOffset","sampleCoverage","sampleAlphaToCoverage"],Hn=[function(e){e.blend.enabled&&(e.gl.disable(e.gl.BLEND),e.blend.enabled=!1)},function(e){e.depthTest.enabled&&(e.gl.disable(e.gl.DEPTH_TEST),e.depthTest.enabled=!1)},function(e){e.stencilTest.enabled&&(e.gl.disable(e.gl.STENCIL_TEST),e.stencilTest.enabled=!1)},Sn,Vn,function(e){e.gl.disable(e.gl.CULL_FACE)},function(e){e.gl.disable(e.gl.POLYGON_OFFSET_FILL)},function(e){e.gl.disable(e.gl.SAMPLE_COVERAGE)},function(e){e.gl.disable(e.gl.SAMPLE_ALPHA_TO_COVERAGE)}];function On(e,n,r){r=e.createShader(r);return e.shaderSource(r,"#extension GL_OES_standard_derivatives : enable\n"+n),e.compileShader(r),r}function Yn(e,n){switch(n){case e.FLOAT:return{size:1,arraySize:1,type:Float32Array,baseType:e.FLOAT};case e.FLOAT_VEC2:return{size:2,arraySize:1,type:Float32Array,baseType:e.FLOAT};case e.FLOAT_VEC3:return{size:3,arraySize:1,type:Float32Array,baseType:e.FLOAT};case e.FLOAT_VEC4:return{size:4,arraySize:1,type:Float32Array,baseType:e.FLOAT};case e.FLOAT_MAT4:return{size:4,arraySize:4,type:Float32Array,baseType:e.FLOAT};case e.INT:return{size:1,arraySize:1,type:Int32Array,baseType:e.INT}}}function Un(e,n,r,t){for(var c=r.a.dP,l=[],o=0;o<c;o++)l.push(String.fromCharCode(97+o));var a=Yn(e,n.type);if(void 0===a)throw Error("No info available for: "+n.type);var i=0,u=a.size*a.arraySize*c,f=new a.type($n(r.b)*u),r=(zn(function(e){!function(n,r,t,o,a){var i;if(1===c)for(i=0;i<r;i++)n[t++]=1===r?o[a]:o[a][i];else l.forEach(function(e){for(i=0;i<r;i++)n[t++]=1===r?o[e][a]:o[e][a][i]})}(f,a.size*a.arraySize,i,e,t[n.name]||n.name),i+=u},r.b),e.createBuffer());return e.bindBuffer(e.ARRAY_BUFFER,r),e.bufferData(e.ARRAY_BUFFER,f,e.STATIC_DRAW),r}function Wn(e,n){var r,t;return 0<n.a.d_?(r=e.createBuffer(),t=function(e,n){var r,t=new Uint32Array($n(e)*n),o=0;return zn(function(e){if(1===n)t[o++]=e;else for(r=0;r<n;r++)t[o++]=e[String.fromCharCode(97+r)]},e),t}(n.c,n.a.d_),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,r),e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW),{numIndices:t.length,indexBuffer:r,buffers:{}}):{numIndices:n.a.dP*$n(n.b),indexBuffer:null,buffers:{}}}var Qn=s(function(h,e){var x=h.f,C=x.gl;return C&&(C.viewport(0,0,C.drawingBufferWidth,C.drawingBufferHeight),x.depthTest.b||(C.depthMask(!0),x.depthTest.b=!0),x.stencilTest.c!==x.STENCIL_WRITEMASK&&(C.stencilMask(x.STENCIL_WRITEMASK),x.stencilTest.c=x.STENCIL_WRITEMASK),Sn(x),Vn(x),C.clear(C.COLOR_BUFFER_BIT|C.DEPTH_BUFFER_BIT|C.STENCIL_BUFFER_BIT),zn(function(e){if(e.d.b.b){var n,r,t;if(!(i=e.b.id&&e.c.id?x.programs[n=e.b.id+"#"+e.c.id]:i)){e.b.id?o=x.shaders[e.b.id]:e.b.id=Nn++,o||(o=On(C,e.b.src,C.VERTEX_SHADER),x.shaders[e.b.id]=o),e.c.id?a=x.shaders[e.c.id]:e.c.id=Nn++,a||(a=On(C,e.c.src,C.FRAGMENT_SHADER),x.shaders[e.c.id]=a);for(var o,a,i,c=function(e,n,r){var t=e.createProgram();if(e.attachShader(t,n),e.attachShader(t,r),e.linkProgram(t),e.getProgramParameter(t,e.LINK_STATUS))return t;throw"Link failed: "+e.getProgramInfoLog(t)+"\nvs info-log: "+e.getShaderInfoLog(n)+"\nfs info-log: "+e.getShaderInfoLog(r)}(C,o,a),l=((i={glProgram:c,attributes:Object.assign({},e.b.attributes,e.c.attributes),currentUniforms:{},activeAttributes:[],activeAttributeLocations:[]}).uniformSetters=function(a,e,n,r){var t=n.glProgram,i=n.currentUniforms,c=0,l=e.f;for(var o={},u=a.getProgramParameter(t,a.ACTIVE_UNIFORMS),f=0;f<u;f++){var s=a.getActiveUniform(t,f);o[r[s.name]||s.name]=function(e,n){var r=n.name,t=a.getUniformLocation(e,r);switch(n.type){case a.INT:return function(e){i[r]!==e&&(a.uniform1i(t,e),i[r]=e)};case a.FLOAT:return function(e){i[r]!==e&&(a.uniform1f(t,e),i[r]=e)};case a.FLOAT_VEC2:return function(e){i[r]!==e&&(a.uniform2f(t,e[0],e[1]),i[r]=e)};case a.FLOAT_VEC3:return function(e){i[r]!==e&&(a.uniform3f(t,e[0],e[1],e[2]),i[r]=e)};case a.FLOAT_VEC4:return function(e){i[r]!==e&&(a.uniform4f(t,e[0],e[1],e[2],e[3]),i[r]=e)};case a.FLOAT_MAT4:return function(e){i[r]!==e&&(a.uniformMatrix4fv(t,!1,new Float32Array(e)),i[r]=e)};case a.SAMPLER_2D:var o=c++;return function(e){a.activeTexture(a.TEXTURE0+o);var n=l.textures.get(e);n||(n=e.fs(a),l.textures.set(e,n)),a.bindTexture(a.TEXTURE_2D,n),i[r]!==e&&(a.uniform1i(t,o),i[r]=e)};case a.BOOL:return function(e){i[r]!==e&&(a.uniform1i(t,e),i[r]=e)};default:return function(){}}}(t,s)}return o}(C,h,i,Object.assign({},e.b.uniforms,e.c.uniforms)),C.getProgramParameter(c,C.ACTIVE_ATTRIBUTES)),u=0;u<l;u++){var f=C.getActiveAttrib(c,u),s=C.getAttribLocation(c,f.name);i.activeAttributes.push(f),i.activeAttributeLocations.push(s)}x.programs[n=e.b.id+"#"+e.c.id]=i}x.lastProgId!==n&&(C.useProgram(i.glProgram),x.lastProgId=n),r=i.uniformSetters,Object.keys(t=e.e).forEach(function(e){var n=r[e];n&&n(t[e])});var d=x.buffers.get(e.d);for(d||(d=Wn(C,e.d),x.buffers.set(e.d,d)),u=0;u<i.activeAttributes.length;u++){s=i.activeAttributeLocations[u],void 0===d.buffers[(f=i.activeAttributes[u]).name]&&(d.buffers[f.name]=Un(C,f,e.d,i.attributes)),C.bindBuffer(C.ARRAY_BUFFER,d.buffers[f.name]);var v=Yn(C,f.type);if(1===v.arraySize)C.enableVertexAttribArray(s),C.vertexAttribPointer(s,v.size,v.baseType,!1,0,0);else for(var m=4*v.size,p=m*v.arraySize,g=0;g<v.arraySize;g++)C.enableVertexAttribArray(s+g),C.vertexAttribPointer(s+g,v.size,v.baseType,!1,p,m*g)}for(x.toggle=!x.toggle,zn(lc(x),e.a),u=0;u<9;u++){var b=x[Gn[u]];b.toggle!==x.toggle&&b.enabled&&(Hn[u](x),b.enabled=!1,b.toggle=x.toggle)}d.indexBuffer?(C.bindBuffer(C.ELEMENT_ARRAY_BUFFER,d.indexBuffer),C.drawElements(e.d.a.ey,d.numIndices,C.UNSIGNED_INT,0)):C.drawArrays(e.d.a.ey,0,d.numIndices)}},h.g)),e});var Zn=d(function(e,n,r){return function(e,n,r,t){return{$:3,d:tn(e),g:n,h:r,i:t}}(n,{g:r,f:{},h:e},Kn,Xn)});function Kn(e){var n={contextAttributes:{alpha:!1,depth:!1,stencil:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1},sceneSettings:[]},r=(zn(function(e){},e.h),We.createElement("canvas")),t=r.getContext&&(r.getContext("webgl",n.contextAttributes)||r.getContext("experimental-webgl",n.contextAttributes));return t&&void 0!==WeakMap?(n.sceneSettings.forEach(function(e){e(t)}),t.getExtension("OES_standard_derivatives"),t.getExtension("OES_element_index_uint"),e.f.gl=t,e.f.toggle=!1,e.f.blend={enabled:!1,toggle:!1},e.f.depthTest={enabled:!1,toggle:!1},e.f.stencilTest={enabled:!1,toggle:!1},e.f.scissor={enabled:!1,toggle:!1},e.f.colorMask={enabled:!1,toggle:!1},e.f.cullFace={enabled:!1,toggle:!1},e.f.polygonOffset={enabled:!1,toggle:!1},e.f.sampleCoverage={enabled:!1,toggle:!1},e.f.sampleAlphaToCoverage={enabled:!1,toggle:!1},e.f.shaders=[],e.f.programs={},e.f.lastProgId=null,e.f.buffers=new WeakMap,e.f.textures=new WeakMap,e.f.STENCIL_WRITEMASK=t.getParameter(t.STENCIL_WRITEMASK),_n(function(){return z(Qn,e,r)})):(r=We.createElement("div")).innerHTML='<a href="https://get.webgl.org/">Enable WebGL</a> to see this content!',r}function Xn(e,n){return n.f=e.f,Qn(n)}var Jn=s(function(e,n){return new Float64Array([e,n])});new Float64Array(3),new Float64Array(3),new Float64Array(3);var er=d(function(e,n,r){return new Float64Array([e,n,r])});var nr=s(function(e,n){return new Float64Array([n[0]*e,n[1]*e,n[2]*e])});var rr=u(function(e,n,r,t){return new Float64Array([e,n,r,t])});new Float64Array(16),new Float64Array(16),new Float64Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);function tr(e){return $(mt,s(function(e,n){return n+1}),0,e)}function or(e){return e}function ar(e){return e}function ir(e){return $(Et,jt(h),T(m),e)}function cr(e){return eo(2*Jt*e)}function lr(e){return{$:0,a:e}}function ur(e){return{$:2,a:e}}function fr(e){return{$:3,a:e}}function sr(e){return{a:U(e.a?"w_":"d_",e.b),b:e}}function dr(e){return $(mt,s(function(e,n){return $(fo,e.a,e.b,n)}),Qt,e)}function vr(e){return e}function mr(e){return e.b?x(e.a):C}function b(e){return e}function pr(e){return e}function gr(e){return e}function br(e){var n,r=z(P,D(e.ab),z(P,D(e.ac),D(e.fa)));return r?Uo((n=e.ab/r)*n+(n=e.ac/r)*n+(n=e.fa/r)*n)*r:Wo}function hr(e){return eo(Jt*(e/180))}function xr(e){return e.c9}function Cr(e){return e.dD}function Pr(e){return e.fw}function yr(e){return function(e){return e}(e.fe)}function Tr(e){return e.fv}function Lr(e){return xr(e)}function Mr(e){return{ab:-e.ab,ac:-e.ac,fa:-e.fa}}function wr(e){return Mr(Cr(e))}function Dr(e){var n=e.b;return z(Mi,1664525*e.a+n>>>0,n)}function Nr(e){return((e=277803737*((e=e.a)^e>>>4+(e>>>28)))>>>22^e)>>>0}function zr(e){return{$:7,a:e}}function $r(e){var n,r,t,o,a,i,c,l;return-1===e.$&&-1===e.d.$&&-1===e.e.$?-1!==e.e.d.$||e.e.d.a?(t=(l=e.e).b,o=l.c,a=l.d,l=l.e,V(w,1,e.b,e.c,V(w,0,(n=e.d).b,n.c,n.d,n.e),V(w,0,t,o,a,l))):(t=(r=e.e).b,o=r.c,i=(a=r.d).d,c=a.e,l=r.e,V(w,0,a.b,a.c,V(w,1,e.b,e.c,V(w,0,(n=e.d).b,n.c,n.d,n.e),i),V(w,1,t,o,c,l))):e}function Sr(e){var n,r,t,o,a,i,c,l,u;return-1===e.$&&-1===e.d.$&&-1===e.e.$?-1!==e.d.d.$||e.d.d.a?(i=(u=e.e).b,c=u.c,l=u.d,u=u.e,V(w,1,n=e.b,r=e.c,V(w,0,(o=e.d).b,o.c,o.d,o=o.e),V(w,0,i,c,l,u))):(n=e.b,r=e.c,o=(t=e.d).e,i=(a=e.e).b,c=a.c,l=a.d,u=a.e,V(w,0,t.b,t.c,V(w,1,(a=t.d).b,a.c,a.d,a.e),V(w,1,n,r,o,V(w,0,i,c,l,u)))):e}function Vr(e){var n,r,t,o,a,i;return-1===e.$&&-1===e.d.$?(n=e.a,r=e.b,t=e.c,i=(o=e.d).d,a=e.e,1===o.a?-1!==i.$||i.a?-1===(i=$r(e)).$?(e=i.e,V(lo,i.a,i.b,i.c,Vr(i.d),e)):Wt:V(w,n,r,t,Vr(o),a):V(w,n,r,t,Vr(o),a)):Wt}function _r(e){return $(Et,Ui,m,e)}function kr(e){return Ke(function(e){return nn.test(e)?"p":e}(e))}function Ar(e){function n(e){return si(1e4*e)/100}var r=e.b,t=e.c,o=e.d;return e=p(["rgba(",i(n(e.a)),"%,",i(n(r)),"%,",i(n(t)),"%,",i(si(1e3*o)/1e3),")"]),z(vt,"",e)}function Br(e){return e}function qr(f){return function(u){return function(l){return function(c){return function(i){return function(a){return function(o){return function(t){return function(r){return function(n){return function(e){return{$:2,a:f,b:u,c:l,d:c,e:i,f:a,g:o,h:t,i:r,j:n,k:e}}}}}}}}}}}}function Rr(e){return $(wc,{c$:e.c$,dm:e.dm,dA:e.dA},{bI:e.bI,bY:e.bY,b4:e.b4,b5:e.b5},{bI:e.bI,bY:e.bY,b4:e.b4,b5:e.b5})}function Fr(e){return V(q,p([Rr(e),S(Cc,!1,!1,!1,!1)]),Mc,Tc,Lc,{})}function Er(e){return Fr({bI:7680,c$:15,dm:8,bY:516,dA:z(Nc,2,e+4),b4:5386,b5:5386})}function Ir(e){return{a:z(mi,qc(e),kc(e)),b:z(mi,Rc(e),Ac(e)),c:z(mi,Fc(e),Bc(e))}}function jr(e){return e}function Gr(e){return e}function Hr(e){return Jc(z(el,e,m))}function Or(e){return S(Pc,515,e.au,e.ap,e.an)}function Yr(e){return e}function Ur(n){var e=function(e){return e.gA}(n.fm),r=Na({c9:Lr(e),dB:function(e){return za(e)}(e),dC:function(e){return $a(e)}(e),dD:Mr(wr(e))}),t=Hr(n.fE);if(1===(r=S(Qc,r,1,C,p([t]))).$)return m;var r=r.a,o=z(sl,fl,e),a=z(Qa,.99,z(Gc,N(n.fr),xa(Bc(r)))),i=Ir(r),i=br($(ci,i.a,i.b,i.c)),r=z(Qa,1.01,z(Yc,i,xa(Fc(r)))),e=(a=ul(r=z(il,n.fm,{fd:n.fd,fL:r,f4:a})).ep)?Gr(Mr(wr(e))):b(Lr(e)),c=(l=function(){var e=n.aQ;switch(e.$){case 0:return{a:0,b:0};case 1:return{a:1,b:0};case 2:return{a:2,b:0};case 3:return{a:3,b:e.a};case 4:return{a:4,b:e.a};default:return{a:5,b:0}}}()).a,l=l.b,u=z(pc,n.aH,n.aT),i=bc({ea:0,eb:e.ab,ec:Zc(u),ed:n.e$,ee:0,ef:e.ac,eg:Kc(u),eh:gr(i),ei:0,ej:e.fa,ek:Xc(u),el:c,em:0,en:a,eo:0,ep:l}),f=j(xc,i,o,r,nl,t,{Z:m,ak:m,am:m}),s=n.aK;switch(s.$){case 0:var d=s.a;return _r(p([$(B,f.Z,{a:d,b:sc},_c),$(B,f.ak,tl,_c)]));case 1:d=s.a;return _r(p([$(B,f.Z,tl,_c),p([rl]),$(B,f.am,d.bO,yc),p([Er(0)]),$(B,f.Z,{a:d,b:sc},ol),$(B,f.ak,tl,_c)]));default:var d=s.a,v=s.b;return _r(p([$(B,f.Z,{a:v,b:sc},_c),p([rl]),z($c,f.am,d),$(ll,f.Z,v,tr(d)),$(B,f.ak,tl,_c)]))}}function Wr(e){return z(Bl,0,{$:0,a:function(e){e=ql(e);return $(mc,e.dl,e.cQ,e.cK)}(e)})}function Qr(e){return e}function Zr(e){return{$:5,a:e}}function Kr(e){var n=(t=Ir(e)).a,r=t.b,t=t.c;return{fo:Yr(function(e){return $(xu,gu(e),bu(e),hu(e))}(e)),fO:n/2,fP:r/2,fQ:t/2}}function Xr(e){return e.$?Al:z(Su,(e=e.a).bc,e.j)}var Jr,et=1,nt=2,rt=0,h=Q,tt=d(function(e,n,r){for(;;){if(-2===r.$)return n;var t=r.d,o=e,a=$(e,r.b,r.c,$(tt,e,n,r.e));e=o,n=a,r=t}}),ot=function(e){return $(tt,d(function(e,n,r){return z(h,{a:e,b:n},r)}),m,e)},at=function(e){return{$:1,a:e}},it=s(function(e,n){return{$:3,a:e,b:n}}),ct=s(function(e,n){return{$:0,a:e,b:n}}),lt=s(function(e,n){return{$:1,a:e,b:n}}),ut=function(e){return{$:0,a:e}},ft=function(e){return{$:2,a:e}},st=re,x=function(e){return{$:0,a:e}},C={$:1},dt=me,vt=s(function(e,n){return z(ve,e,Z(n))}),Q=s(function(e,n){return p(z(de,e,n))}),mt=d(function(e,n,r){for(;;){if(!r.b)return n;var t=r.b,o=e,a=z(e,r.a,n);e=o,n=a,r=t}}),pt=K,gt=d(function(e,n,r){for(;;){if(1<=v(e,n))return r;var t=e,o=n-1,a=z(h,n,r);e=t,n=o,r=a}}),bt=s(function(e,n){return $(gt,e,n,m)}),ht=s(function(e,n){return $(pt,e,z(bt,0,tr(n)-1),n)}),xt=function(e){return $(mt,h,m,e)},Ct=u(function(e,n,r,t){return{$:0,a:e,b:n,c:r,d:t}}),Pt=[],yt=ce,Tt=s(function(e,n){return se(n)/se(e)}),Lt=yt(z(Tt,2,32)),Mt=S(Ct,0,Lt,Pt,Pt),wt=J,Dt=le,Nt=function(e){return e.length},P=s(function(e,n){return 0<v(e,n)?e:n}),zt=ee,$t=s(function(e,n){for(;;){var r=z(zt,32,e),t=r.b,r=z(h,{$:0,a:r.a},n);if(!t.b)return xt(r);e=t,n=r}}),St=s(function(e,n){for(;;){var r=yt(n/32);if(1===r)return z(zt,32,e).a;e=z($t,e,m),n=r}}),Vt=s(function(e,n){var r,t;return n.s?(t=Dt(z(Tt,32,(r=32*n.s)-1)),e=e?xt(n.F):n.F,e=z(St,e,n.s),S(Ct,Nt(n.v)+r,z(P,5,t*Lt),e,n.v)):S(Ct,Nt(n.v),Lt,Pt,n.v)}),_t=c(function(e,n,r,t,o){for(;;){if(n<0)return z(Vt,!1,{F:t,s:r/32|0,v:o});var a={$:1,a:$(wt,32,n,e)};e=e,n=n-32,r=r,t=z(h,a,t),o=o}}),kt=s(function(e,n){var r;return 0<e?V(_t,n,e-(r=e%32)-32,e,m,$(wt,r,e-r,n)):Mt}),y=function(e){return!e.$},At=he,Bt=xe,qt=function(e){return{$:0,a:e}},Rt=function(e){switch(e.$){case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}},T=De,re=T(0),Ft=u(function(e,n,r,t){var o,a,i,c;return t.b?(o=t.a,(t=t.b).b?(a=t.a,(t=t.b).b?(i=t.a,(t=t.b).b?(c=t.b,z(e,o,z(e,a,z(e,i,z(e,t.a,500<r?$(mt,e,n,xt(c)):S(Ft,e,n,r+1,c)))))):z(e,o,z(e,a,z(e,i,n)))):z(e,o,z(e,a,n))):z(e,o,n)):n}),Et=d(function(e,n,r){return S(Ft,e,n,0,r)}),L=s(function(r,e){return $(Et,s(function(e,n){return z(h,r(e),n)}),m,e)}),M=Ne,It=s(function(n,e){return z(M,function(e){return T(n(e))},e)}),jt=d(function(r,e,t){return z(M,function(n){return z(M,function(e){return T(z(r,n,e))},t)},e)}),Gt=Fe,Ht=s(function(e,n){return Se(z(M,Gt(e),n))}),K=d(function(e,n,r){return z(It,function(e){return 0},ir(z(L,Ht(e),n)))}),ce=(Re.Task={b:re,c:K,d:d(function(e,n,r){return T(0)}),e:s(function(e,n){return z(It,e,n)}),f:void 0},Ie("Task"),e),Ot={$:0},Yt=u(function(e,n,r,t){return{$:0,a:e,b:n,c:r,d:t}}),Ut=S(Yt,92/255,53/255,.4,1),Wt={$:-2},Qt=Wt,Zt=Qt,Kt=d(function(e,n,r){return{ab:e,ac:n,fa:r}}),Xt=je(m),Jt=3.141592653589793,eo=function(e){return e},no={$:4},ro=je,to=d(function(e,n,r){return n(e(r))}),oo=s(function(e,n){return{$:0,a:e,b:n}}),ao=s(function(e,n){return{eL:n,e0:e}}),J=T(z(ao,Qt,Qt)),io=O,co=s(function(e,n){for(;;){if(-2===n.$)return C;var r=n.c,t=n.d,o=n.e;switch(z(io,e,n.b)){case 0:e=e,n=t;continue;case 1:return x(r);default:e=e,n=o;continue}}}),w=c(function(e,n,r,t,o){return{$:-1,a:e,b:n,c:r,d:t,e:o}}),lo=c(function(e,n,r,t,o){var a,i,c,l;return-1!==o.$||o.a?-1!==t.$||t.a||-1!==t.d.$||t.d.a?V(w,e,n,r,t,o):(a=t.d,l=t.e,V(w,0,t.b,t.c,V(w,1,a.b,a.c,a.d,a.e),V(w,1,n,r,l,o))):(a=o.b,i=o.c,c=o.d,o=o.e,-1!==t.$||t.a?V(w,e,a,i,V(w,0,n,r,t,c),o):V(w,0,n,r,V(w,1,t.b,t.c,t.d,l=t.e),V(w,1,a,i,c,o)))}),uo=d(function(e,n,r){if(-2===r.$)return V(w,0,e,n,Wt,Wt);var t=r.a,o=r.b,a=r.c,i=r.d,c=r.e;switch(z(io,e,o)){case 0:return V(lo,t,o,a,$(uo,e,n,i),c);case 1:return V(w,t,o,n,i,c);default:return V(lo,t,o,a,i,$(uo,e,n,c))}}),fo=d(function(e,n,r){e=$(uo,e,n,r);return-1!==e.$||e.a?e:V(w,1,e.b,e.c,e.d,e.e)}),so=s(function(e,n){var r=e.a,e=e.b,t=z(co,r,n);return $(fo,r,1===t.$?p([e]):z(h,e,t.a),n)}),vo=function(r){return{$:2,b:function(e){var n=r.f;2===n.$&&n.c&&n.c(),r.f=null,e({$:0,a:Y})},c:null}},mo=d(function(e,n,r){for(;;){if(-2===r.$)return n;var t=r.e,o=e,a=$(e,r.b,r.c,$(mo,e,n,r.d));e=o,n=a,r=t}}),po=F(function(l,u,f,e,n,r){e=$(mo,d(function(e,n,r){for(;;){var t=r.a,o=r.b;if(!t.b)return{a:t,b:$(f,e,n,o)};var a=t.a,i=a.a,a=a.b,c=t.b;if(0<=v(i,e))return 0<v(i,e)?{a:t,b:$(f,e,n,o)}:{a:c,b:S(u,i,a,n,o)};e=e,n=n,r={a:c,b:$(l,i,a,o)}}}),{a:ot(e),b:r},n),r=e.a,n=e.b;return $(mt,s(function(e,n){return $(l,e.a,e.b,n)}),n,r)}),go=Ee,bo=Tn,ho=Se,xo=d(function(n,e,r){var t,o;return e.b?(o=e.b,e=ho(z(bo,t=e.a,z(go,n,t))),z(M,function(e){return $(xo,n,o,$(fo,t,e,r))},e)):T(r)}),le=d(function(n,e,r){var r=r.eL,t=d(function(e,n,r){var t=r.c;return{a:r.a,b:r.b,c:z(M,function(e){return t},vo(n))}}),o=$(mt,so,Qt,e),e=j(po,d(function(e,n,r){var t=r.b,o=r.c;return{a:z(h,e,r.a),b:t,c:o}}),u(function(e,n,r,t){var o=t.c;return{a:t.a,b:$(fo,e,r,t.b),c:o}}),t,o,r,{a:m,b:Qt,c:T(0)}),a=e.a,i=e.b;return z(M,function(e){return T(z(ao,o,e))},z(M,function(e){return $(xo,n,a,i)},e.c))}),Co=ar,Po=(Jr=Co,{$:2,b:function(e){e({$:0,a:Jr(Date.now())})},c:null}),ee=d(function(r,e,n){var t,e=z(co,e,n.e0);return 1===e.$?T(n):(t=e.a,z(M,function(e){return T(n)},z(M,function(n){return ir(z(L,function(e){return z(Gt,r,e(n))},t))},Po)))}),yo=d(function(e,n,r){return e(n(r))}),To=(Re.Time={b:J,c:le,d:ee,e:0,f:s(function(e,n){return z(oo,n.a,z(yo,e,n.b))})},Ie("Time")),Lo=s(function(e,n){return To(z(oo,e,n))}),Mo=be,wo=pe,Do=d(function(e,n,r){return{c8:r,eP:n,e_:e}}),No=T($(Do,m,C,0)),zo={$:2,b:function(e){e({$:0,a:Date.now()})},c:null},$o={$:2,b:function(e){var n=Pn(function(){e({$:0,a:Date.now()})});return function(){Cn(n)}},c:null},he=d(function(e,r,n){var t=n.eP,n=n.c8,o={a:t,b:r};return 1===o.a.$?o.b.b?z(M,function(n){return z(M,function(e){return T($(Do,r,x(n),e))},zo)},ho(z(M,go(e),$o))):No:o.b.b?T($(Do,r,t,n)):z(M,function(e){return No},vo(o.a.a))}),xe=d(function(n,r,e){function t(e){return z(Gt,n,e.$?(0,e.a)(r-a):(0,e.a)(Co(r)))}var o=e.e_,a=e.c8;return z(M,function(n){return z(M,function(e){return T($(Do,o,x(n),r))},ir(z(L,t,o)))},ho(z(M,go(n),$o)))}),So=(Re["Browser.AnimationManager"]={b:No,c:he,d:xe,e:0,f:s(function(e,n){return n.$?{$:1,a:z(yo,e,n.a)}:{$:0,a:z(yo,e,n.a)}})},Ie("Browser.AnimationManager")),Vo=function(e){return So({$:0,a:e})},_o=d(function(e,n,r){return{$:0,a:e,b:n,c:r}}),ko=s(function(e,n){return{eH:n,e_:e}}),Fe=T(z(ko,m,Qt)),Ao=s(function(e,n){return{dS:n,d1:e}}),Bo=d(function(n,r,e){return z(It,function(e){return{a:r,b:e}},$(wn,e.a?Mn:Ln,e.b,function(e){return z(go,n,z(Ao,r,e))}))}),qo=s(function(e,n){return $(mo,fo,n,e)}),re=d(function(o,e,n){var r=d(function(e,n,r){var t=r.c;return{a:r.a,b:r.b,c:z(h,$(Bo,o,e,n),t)}}),t=d(function(e,n,r){var t=r.b,o=r.c;return{a:z(h,n,r.a),b:t,c:o}}),a=u(function(e,n,r,t){var o=t.c;return{a:t.a,b:$(fo,e,n,t.b),c:o}}),i=z(L,sr,e),e=j(po,t,a,r,n.eH,dr(i),{a:m,b:Qt,c:m}),c=e.b,l=e.c;return z(M,function(e){return T(z(ko,i,z(qo,c,dr(e))))},z(M,function(e){return ir(l)},ir(z(L,vo,e.a))))}),Ro=d(function(e,n,r){e=e(n);return e.$?r:z(h,e.a,r)}),Fo=s(function(e,n){return $(Et,Ro(e),m,n)}),K=d(function(e,n,r){var t=n.d1,o=n.dS,n=z(Fo,function(e){var n=e.b,n=n.c;return l(e.a,t)?z(Dn,n,o):C},r.e_);return z(M,function(e){return T(r)},ir(z(L,Gt(e),n)))}),Eo=(Re["Browser.Events"]={b:Fe,c:re,d:K,e:0,f:s(function(e,n){return $(_o,n.a,n.b,z(At,e,n.c))})},Ie("Browser.Events")),e=d(function(e,n,r){return Eo($(_o,e,n,r))}),Io=z(e,0,"keydown"),jo=z(e,0,"keyup"),Go=z(e,0,"mousedown"),Ho=s(function(e,n){return{ab:e,ac:n}}),Oo=ge,Yo=s(function(e,n){return z(io,e,n)}),D=function(e){return e<0?-e:e},Uo=fe,Wo=0,Qo=s(function(e,n){var r=n.fa-e.fa,t=n.ac-e.ac,n=n.ab-e.ab,e=z(P,D(n),z(P,D(t),D(r)));return e?Uo((n=n/e)*n+(n=t/e)*n+(t=r/e)*t)*e:Wo}),o=d(function(e,n,r){return{ab:e,ac:n,fa:r}}),Zo=s(function(e,n){return{ab:n.ab+e.ab,ac:n.ac+e.ac,fa:n.fa+e.fa}}),Ko=s(function(e,n){return pr(z(Zo,e,b(n)))}),Xo=X,Jo=s(function(e,n){return n.$?e:n.a}),ea=s(function(e,r){return z(Jo,z(Ko,$(o,1,0,0),e),mr(z(Xo,s(function(e,n){return z(Yo,z(Qo,r,e),z(Qo,r,n))}),p([z(Ko,$(o,1,0,0),e),z(Ko,$(o,-1,0,0),e),z(Ko,$(o,0,1,0),e),z(Ko,$(o,0,-1,0),e)]))))}),na=s(function(r,e){return $(Et,s(function(e,n){return r(e)?z(h,e,n):n}),m,e)}),ra=s(function(e,n){return!z(co,e,n).$}),ta=s(function(e,n){return z(ra,e,n)}),oa=d(function(e,n,r){return v(r,e)<0?e:0<v(r,n)?n:r}),aa=s(function(e,n){return{ab:n.ab-e.ab,ac:n.ac-e.ac,fa:n.fa-e.fa}}),ia={ab:0,ac:0,fa:0},ca=s(function(e,n){var r,t;return l(e,n)?m:(r=$(oa,-1,1,b(n).ac-b(e).ac),t=$(oa,-1,1,b(n).ab-b(e).ab),t=pr(z(Zo,z(aa,ia,$(Kt,t,r,0)),z(aa,ia,e))),z(h,t,z(ca,t,n)))}),la=d(function(e,n,r){for(;;){if(e<=0)return r;if(!n.b)return r;var t=n.a;e=e-1,n=n.b,r=z(h,t,r)}}),ua=s(function(e,n){return xt($(la,e,n,m))}),fa=d(function(e,n,r){if(0<n){var t,o,a,i,c,l={a:n,b:r};e:for(;;){n:for(;;){if(!l.b.b)return r;if(!l.b.b.b){if(1===l.a)break e;break}switch(l.a){case 1:break e;case 2:var u=l.b;return p([u.a,u.b.a]);case 3:if(l.b.b.b.b)return p([(u=l.b).a,(t=u.b).a,t.b.a]);break n;default:if(l.b.b.b.b&&l.b.b.b.b.b)return c=(i=(a=(o=(t=l.b).b).b).b).b,z(h,t.a,z(h,o.a,z(h,a.a,z(h,i.a,1e3<e?z(ua,n-4,c):$(fa,e+1,n-4,c)))));break n}}return r}return p([l.b.a])}return m}),sa=s(function(e,n){return $(fa,0,e,n)}),da=s(function(e,n){return v(e,n)<0?e:n}),va={ab:0,ac:0,fa:0},ma=s(function(e,n){var r,t=z(P,D(n.ab),z(P,D(n.ac),D(n.fa)));return t?{ab:e*(r=n.ab/t)/(t=Uo(r*r+(r=n.ac/t)*r+(n=n.fa/t)*n)),ac:e*r/t,fa:e*n/t}:va}),pa=s(function(r,e){function n(e){return pr(z(Zo,z(aa,ia,r),(n=z(da,.05,gr(br(e=z(aa,r,e)))),z(ma,n,e))));var n}var t,o;return e.b?(o=e.b,l(r,t=e.a)?o.b?{a:n(o.a),b:o}:{a:r,b:m}:{a:n(t),b:e}):{a:r,b:e}}),ga=s(function(t,o){var e=s(function(e,n){return cr(e+n/(2*Jt))}),n=z(L,function(e){var n,r;return e.$?-1<v(t,(n=e.a).eQ)?{$:0,a:{bc:n.bc,ai:n.ao,M:m,Y:n.Y,j:n.a3,ao:n.ao,bm:n.bm,a3:n.a3,I:m}}:{$:1,a:n}:(r=(e=z(pa,(n=e.a).j,n.I)).a,e=e.b,{$:0,a:f(n,{M:z(na,function(e){return 0<v(e.bF,t)},n.M),j:r,I:2===(r=o.P).$&&!r.a.$&&l(n.Y,r.a.a.Y)?z(sa,1,e):e})})},o.Q),r=z(na,function(e){return 0<v(e.bF,t)},o.M),a=function(){var e,n=o.P;e:for(;;)switch(n.$){case 1:case 2:if(n.a.$)break e;return e=z(Jo,(e=n.a.a).j,mr(e.I)),e=z(ea,e,o.j),z(pa,o.j,z(ca,o.j,e));default:break e}return z(pa,o.j,o.I)}(),i=a.b,c=(c={a:i,b:o.P}).a.b||1!==c.b.$?o.P:{$:2,a:c.b.a},r=f(o,{M:r,j:a.a,Q:n,bS:t,P:c,I:i});return z(ta,"ArrowLeft",o.aI)?f(r,{aY:z(e,-.005,o.aY)}):z(ta,"ArrowRight",o.aI)?f(r,{aY:z(e,.005,o.aY)}):r}),ba=d(function(e,t,o){var a,i,n=o.P;return 2!==n.$||n.a.$?o:(a=n.a.a,i=o.bS+500,n=z(L,function(e){var n,r;return e.$?{$:1,a:n=e.a}:l((n=e.a).Y,a.Y)?(e=z(h,{b7:t,bF:i},n.M),0<(r=n.ai-t)?{$:0,a:f(n,{ai:r,M:e})}:{$:1,a:{bc:n.bc,M:e,Y:n.Y,ao:n.ao,bm:n.bm,eQ:o.bS+2e4,a3:n.a3}}):{$:0,a:n}},o.Q),f(o,{a9:o.aw?o.a9:o.a9+t,bd:2===o.aw?o.bd+t:o.bd,ai:z(P,1,o.ai-e),M:z(h,{b7:1===o.ai?0:e,bF:i},o.M),Q:n,P:1===(e=mr(z(na,function(e){return!e.$&&l(e.a.Y,a.Y)},n))).$?Ot:{$:2,a:e.a},bs:1===o.aw?o.bs+t:o.bs}))}),ha=d(function(e,n,r){var t;return 0<e?(t=(r.ab-n.ab)/e)*t+(t=(r.ac-n.ac)/e)*t+(t=(r.fa-n.fa)/e)*t<=1:!e&&l(n.ab,r.ab)&&l(n.ac,r.ac)&&l(n.fa,r.fa)}),xa=function(e){return-e},Ca=s(function(e,n){return{ab:e.ac*n.fa-e.fa*n.ac,ac:e.fa*n.ab-e.ab*n.fa,fa:e.ab*n.ac-e.ac*n.ab}}),Pa=function(e){return e.dB},ya=function(e){return e.dC},Ta=function(e){return z(Ca,Pa(e),ya(e))},La=oe,Ma=ae,wa=d(function(e,n,r){var n=.5*n,t=La(n),n=Ma(n),e=e.fw,o=e.ab*n,a=t*o,i=o*o,c=e.ac*n,l=t*c,u=o*c,f=c*c,e=e.fa*n,n=t*e,t=o*e,o=c*e,c=e*e;return{ab:(1-2*(f+c))*r.ab+2*(u-n)*r.ac+2*(t+l)*r.fa,ac:2*(u+n)*r.ab+(1-2*(i+c))*r.ac+2*(o-a)*r.fa,fa:2*(t-l)*r.ab+2*(o+a)*r.ac+(1-2*(i+f))*r.fa}}),Da=d(function(e,n,r){var n=.5*n,t=La(n),n=Ma(n),o=e.c9,a=r.ab-o.ab,i=r.ac-o.ac,r=r.fa-o.fa,e=e.fw,c=e.ab*n,l=t*c,u=c*c,f=e.ac*n,s=t*f,d=c*f,v=f*f,e=e.fa*n,n=t*e,t=c*e,c=f*e,f=e*e;return{ab:o.ab+(1-2*(v+f))*a+2*(d-n)*i+2*(t+s)*r,ac:o.ac+2*(d+n)*a+(1-2*(u+f))*i+2*(c-l)*r,fa:o.fa+2*(t-s)*a+2*(c+l)*i+(1-2*(u+v))*r}}),Na=function(e){return e},za=function(e){return e.dB},$a=function(e){return e.dC},Sa=d(function(e,n,r){return Na({c9:$(Da,e,n,xr(r)),dB:$(wa,e,n,za(r)),dC:$(wa,e,n,$a(r)),dD:$(wa,e,n,Cr(r))})}),Va=d(function(e,n,r){return $(Sa,e(r),n,r)}),_a=s(function(e,n){return{ab:n.ab+e.ab,ac:n.ac+e.ac,fa:n.fa+e.fa}}),ka=s(function(e,n){return Na({c9:z(_a,e,xr(n)),dB:za(n),dC:$a(n),dD:Cr(n)})}),Aa=s(function(e,n){return{ab:e*n.ab,ac:e*n.ac,fa:e*n.fa}}),Ba=d(function(e,n,r){return z(ka,z(Aa,n,e),r)}),qa=d(function(e,n,r){return $(Ba,Pr(e(r)),n,r)}),Ra=s(function(e,n){return{fw:n,c9:e}}),Fa=function(e){return z(Ra,e.c9,e.dB)},Ea=function(e){return z(Ra,e.c9,e.dC)},Ia=function(e){return z(Ra,e.c9,e.dD)},ja=function(e){return{$:0,a:e}},N=function(e){return D(e)},Ga=function(e){return.5*e},Ha=ie,Oa=function(e){return Ha(e)},O={ab:1,ac:0,fa:0},Ee={ab:0,ac:1,fa:0},Ya=ar({c9:ia,dB:O,dC:Ee}),Ua=function(e){return function(e){var n=Ga(N(e.gy)),n=Oa(n);return{dk:ja(n),gA:e.gA}}({gy:hr(30),gA:(e={ff:e.aY,fx:15,fC:hr(30),fM:e.j,fN:Ya},n=Na({c9:e.fM,dB:ya(e.fN),dC:Ta(e.fN),dD:Pa(e.fN)}),$(qa,Ia,e.fx,$(Va,Fa,xa(e.fC),$(Va,Ea,e.ff,n))))});var n},Wa=s(function(e,n){return n.ab*e.ab+n.ac*e.ac+n.fa*e.fa}),Qa=s(function(e,n){return e*n}),Za=s(function(e,n){var r=e.c9,e=e.gc;return(n.ab-r.ab)*e.ab+(n.ac-r.ac)*e.ac+(n.fa-r.fa)*e.fa}),Ka=d(function(e,n,r){return{ab:r.ab+n*e.ab,ac:r.ac+n*e.ac,fa:r.fa+n*e.fa}}),Xa=s(function(e,n){var r=Pr(n),t=z(Wa,e.gc,r);return t?(n=function(e){return e.c9}(n),x($(Ka,r,z(Qa,-1/t,z(Za,e,n)),n))):C}),Ja=s(function(e,n){return n.$?C:x(e(n.a))}),ei=s(function(e,n){return n=b(n),r=n.ac,t=n.fa,{ab:e(n.ab),ac:e(r),fa:e(t)};var r,t}),ni=s(function(e,n){return e*n}),ri=s(function(e,n){return n/e}),ti={ab:0,ac:0,fa:-1},oi=s(function(e,n){return n/e}),ai=s(function(e,n){var r=e.dD,t=e.dC,e=e.dB;return{ab:e.ab*n.ab+t.ab*n.ac+r.ab*n.fa,ac:e.ac*n.ab+t.ac*n.ac+r.ac*n.fa,fa:e.fa*n.ab+t.fa*n.ac+r.fa*n.fa}}),ii=s(function(e,n){var r=e.c9,e=e.dB;return(n.ab-r.ab)*e.ab+(n.ac-r.ac)*e.ac}),ci=d(function(e,n,r){return{ab:e,ac:n,fa:r}}),li=u(function(e,n,r,t){var o=e.c9,a=e.dD,i=e.dC,e=e.dB;return{ab:o.ab+n*e.ab+r*i.ab+t*a.ab,ac:o.ac+n*e.ac+r*i.ac+t*a.ac,fa:o.fa+n*e.fa+r*i.fa+t*a.fa}}),ui=s(function(e,n){var r=e.c9,e=e.dC;return(n.ab-r.ab)*e.ab+(n.ac-r.ac)*e.ac}),fi=d(function(e,n,r){var t,o=z(ui,yr(n),r),r=z(ii,yr(n),r),a=e.gA,n=Tr(n),n=n.b,i=e.dk;return i.$?z(Ra,S(li,a,z(ni,t=z(oi,n,i.a),r),z(ni,t,o),Wo),wr(e.gA)):(t=xa(z(ri,i.a,z(Qa,.5,n))),i=z(ai,a,z(Jo,ti,function(e){var n,r,t=z(P,D(e.ab),z(P,D(e.ac),D(e.fa)));return t?(t=Uo((r=e.ab/t)*r+(n=e.ac/t)*n+(e=e.fa/t)*e),x({ab:r/t,ac:n/t,fa:e/t})):C}($(ci,r,o,t)))),z(Ra,Lr(e.gA),i))}),si=ue,di=s(function(e,n){return-1<v(n,e)}),vi=s(function(e,n){return e+.5*(n-e)}),mi=s(function(e,n){return n-e}),pi={ab:-1,ac:0},gi={ab:0,ac:-1},bi={ab:1,ac:0},hi={ab:0,ac:1},xi=s(function(e,n){return{ab:e,ac:n}}),Ci=S(u(function(e,n,r,t){var o=z(di,n,t)?hi:gi,a=z(di,e,r)?bi:pi,i={a:N(z(mi,e,r)),b:N(z(mi,n,t))};return{fe:{c9:z(xi,z(vi,e,r),z(vi,n,t)),dB:a,dC:o},fv:i}}),(Tn={gD:0,gE:800,gG:600,gH:0}).gD,Tn.gG,Tn.gE,Tn.gH),Pi=function(e){return e},J={ab:0,ac:0,fa:1},yi=z(s(function(e,n){return{gc:n,c9:e}}),ia,J),Ti=s(function(e,n){var r,t,o=$(fi,Ua(n),Ci,e),o=z(Ja,ei(z(to,si,or)),z(Xa,yi,o));return 0<v(Pi(e).ab,800)||0<v(Pi(e).ac,600)||1===o.$?n:(r=o.a,e=z(Jo,n.j,mr(n.I)),o=mr(z(na,function(e){return!e.$&&$(ha,.01,r,e.a.j)},n.Q)),f(n,o.$?{P:Ot,I:(t=z(ca,e,r)).b?t:p([r])}:{P:{$:1,a:o.a},I:z(na,function(e){return!l(e,n.j)},z(h,e,z(ca,e,z(ea,r,n.j))))}))}),Li=s(function(e,n){return{$:5,a:e,b:n}}),Mi=s(function(e,n){return{$:0,a:e,b:n}}),le=z(M,function(e){return T((e=vr(e),n=Dr(z(Mi,0,1013904223)),Dr(z(Mi,n.a+e>>>0,n.b))));var n},Po),wi=s(function(e,n){return e(n)}),Di=d(function(n,e,r){var t,o;return e.b?(t=e.b,o=(e=z(wi,e.a,r)).b,z(M,function(e){return $(Di,n,t,o)},z(Gt,n,e.a))):T(r)}),ee=d(function(e,n,r){return T(r)}),Ni=s(function(r,e){var t=e;return function(e){var e=t(e),n=e.b;return{a:r(e.a),b:n}}}),zi=(Re.Random={b:le,c:Di,d:ee,e:s(function(e,n){return z(Ni,e,n)}),f:void 0},Ie("Random")),$i=s(function(e,n){return zi(z(Ni,e,n))}),Si=s(function(l,u){return function(e){var n=v(l,u)<0?{a:l,b:u}:{a:u,b:l},r=n.a,t=n.b-r+1;if(!(t-1&t))return{a:((t-1&Nr(e))>>>0)+r,b:Dr(e)};for(var o=(-t>>>0)%t>>>0,a=e;;){var i=Nr(a),c=Dr(a);if(0<=v(i,o))return{a:i%t+r,b:c};a=c}}}),Vi=d(function(t,e,n){var o=e,a=n;return function(e){var e=o(e),n=e.a,e=a(e.b),r=e.b;return{a:z(t,n,e.a),b:r}}}),_i=s(function(e,n){return $(Vi,s(function(e,n){return{a:e,b:n}}),e,n)}),ki=z($i,function(e){return z(Li,e.a,e.b)},z(_i,z(Si,0,1),z(Si,0,1))),Ai=s(function(e,n){return pr(z(Zo,z(aa,ia,e),z(aa,ia,n)))}),Bi=u(function(e,n,r,t){for(;;){if(n<1)return{a:e,b:t};var o=r(t),a=o.b;e=z(h,o.a,e),n=n-1,r=r,t=a}}),qi=s(function(n,e){var r=e;return function(e){return S(Bi,m,n,r,e)}}),Ri=s(function(o,a){return function(e){var n=Dr(e),r=D(a-o),t=Nr(n);return{a:(134217728*(67108863&Nr(e))+(134217727&t))/9007199254740992*r+o,b:Dr(n)}}}),Fi=d(function(e,n,r){for(;;){var t=e.a,o=e.b;if(!n.b)return o;var a=n.a,i=n.b;if(v(r,D(t))<1)return o;e=a,n=i,r=r-D(t)}}),Ei=s(function(e,n){function r(e){return D(e.a)}var t=r(e)+$(mt,st,0,z(L,r,n));return z(Ni,z(Fi,e,n),z(Ri,0,t))}),Ii=s(function(e,n){return $(fo,e,0,n)}),ji=E(function(e,n,r,t,o,a,i){if(-1!==a.$||a.a){for(;;){if(-1!==i.$||1!==i.a)break;if(-1!==i.d.$)return Sr(n);if(1===i.d.a)return Sr(n);break}return n}return V(w,r,a.b,a.c,a.d,V(w,0,t,o,a.e,i))}),Gi=s(function(e,n){var r,t,o,a,i,c,l;return-2===n.$?Wt:(r=n.a,o=n.c,a=n.d,i=n.e,v(e,t=n.b)<0?-1===a.$&&1===a.a?-1!==(c=a.d).$||c.a?-1===(c=$r(n)).$?(l=c.e,V(lo,c.a,c.b,c.c,z(Gi,e,c.d),l)):Wt:V(w,r,t,o,z(Gi,e,a),i):V(w,r,t,o,z(Gi,e,a),i):z(Hi,e,G(ji,e,n,r,t,o,a,i)))}),Hi=s(function(e,n){var r,t,o,a,i;return-1===n.$?(r=n.a,t=n.c,o=n.d,a=n.e,l(e,n=n.b)?-1===(i=function(e){for(;;){if(-1!==e.$||-1!==e.d.$)return e;e=e.d}}(a)).$?V(lo,r,i.b,i.c,o,Vr(a)):Wt:V(lo,r,n,t,o,z(Gi,e,a))):Wt}),Oi=s(function(e,n){e=z(Gi,e,n);return-1!==e.$||e.a?e:V(w,1,e.b,e.c,e.d,e.e)}),Yi=s(function(e,n){return z(Oi,e,n)}),be=s(function(e,o){switch(e.$){case 0:return{a:z(ga,e.a,o),b:z($i,zr,z(Ni,function(e){e=$(pt,s(function(e,n){e={a:e,b:n};return e.a.$||e.b.$?C:x(z(Ai,e.a.a,e.b.a.a3))}),e,r);return $(pt,s(function(e,n){e={a:e,b:n};return e.a.$||e.b.$?C:x(z(ca,e.a.a.j,e.b.a))}),r,e)},z(Ni,function(e){return z(L,function(e){var n=e.a;return 1===n.$?C:x($(Kt,n.a,e.b,0))},e)},z(qi,tr(r=o.Q),z(_i,z(Ei,{a:99,b:C},p([{a:1,b:x(-1)},{a:1,b:x(0)},{a:1,b:x(1)}])),z(Si,-1,1))))))};case 1:return{a:z(Ti,e.a,o),b:Xt};case 2:return{a:f(o,{aI:z(Ii,e.a,o.aI)}),b:Xt};case 3:return{a:f(o,{aI:z(Yi,e.a,o.aI)}),b:Xt};case 4:return{a:o,b:ki};case 5:return{a:$(ba,e.a,e.b,o),b:Xt};case 6:return{a:f(o,{aw:e.a}),b:Xt};default:var n=e.a,n=$(pt,s(function(e,n){var r,t,n={a:e,b:n};return n.a.$||n.b.$||(r=n.a.a,n=n.b.a,2===(t=o.P).$&&!t.a.$&&l(t.a.a.Y,r.Y))?e:{$:0,a:f(r,{I:n})}}),o.Q,n);return{a:f(o,{Q:n}),b:Xt}}var r}),Ui=s(function(e,n){return n.b?$(Et,h,n,e):e}),Wi=S(Yt,186/255,189/255,182/255,1),Qi=S(Yt,78/255,154/255,6/255,1),a=Ze("div"),pe=s(function(e,n){switch(n){case"G":return 0;case"R":return 1;default:return e}}),Zi=z(L,z(to,Q(""),L(pe(0))),p(["GGGGRRGGGG","GGGGRRGGGG","GGGGRRGGGG","GGGGRRGGGG","GGGGRRGGGG","GGGGRRRRRR","GGGGRRRRRR","GGGGRRGGGG","GGGGRRGGGG","GGGGRRGGGG"])),Ki=tr(Zi)/2,Xi=S(Yt,52/255,101/255,164/255,1),Ji=S(Yt,32/255,74/255,135/255,1),ec=S(Yt,164/255,0,0,1),A=Je,t=Qe,nc=S(u(function(e,n,r,t){return S(Yt,e,n,r,t)}),0,0,0,0),rc=function(e){return{$:0,a:e}},tc={$:3},oc=u(function(e,n,r,t){return{$:4,a:e,b:n,c:r,d:t}}),ac=s(function(e,n){return _r(z(L,e,n))}),ic=function(e){return{$:1,a:e}},cc=function(e){return{$:2,a:e}},i=me,lc=s(function(e,n){switch(n.$){case 0:return z(An,e,n);case 1:return z(Bn,e,n);case 2:return z(qn,e,n);case 3:return z(Rn,e,n);case 4:return z(Fn,e,n);case 5:return z(En,e,n);case 6:return z(In,e,n);case 7:return z(jn,e,n);default:return function(e){var n=e.sampleAlphaToCoverage;n.toggle=e.toggle,n.enabled||(e.gl.enable(e.gl.SAMPLE_ALPHA_TO_COVERAGE),n.enabled=!0)}(e)}}),uc=d(function(e,n,r){return $(Zn,e,n,r)}),fc=rr,sc=S(fc,1,1,1,1),B=d(function(e,n,r){return z(L,function(e){return z(e,n,r)},e)}),dc=d(function(e,n,r){return{$:0,a:e,b:n,c:r}}),vc=s(function(e,n){var r=n.ab,n=n.ac;return $(dc,e*r/n,e,e*(1-r-n)/n)}),mc=er,pc=s(function(e,n){return $(mc,3.2406*(n=(e=z(vc,e,n)).a)-1.5372*(r=e.b)-.4986*(e=e.c),-.9689*n+1.8758*r+.0415*e,.0557*n-.204*r+1.057*e);var r}),gc=s(function(e,n){return{d0:l(e.d0,n.d0),w:e.w*n.w+e.x*n.z+e.y*n.C,x:e.w*n.x+e.x*n.A+e.y*n.D,y:e.w*n.y+e.x*n.B+e.y*n.E,z:e.z*n.w+e.A*n.z+e.B*n.C,A:e.z*n.x+e.A*n.A+e.B*n.D,B:e.z*n.y+e.A*n.B+e.B*n.E,C:e.C*n.w+e.D*n.z+e.E*n.C,D:e.C*n.x+e.D*n.A+e.E*n.D,E:e.C*n.y+e.D*n.B+e.E*n.E,R:n.R+(e.R*n.w+e.S*n.z+e.T*n.C)*n.cB,S:n.S+(e.R*n.x+e.S*n.A+e.T*n.D)*n.cB,T:n.T+(e.R*n.y+e.S*n.B+e.T*n.E)*n.cB,cB:e.cB*n.cB}}),bc=function(e){var n=new Float64Array(16);return n[0]=e.ea,n[1]=e.ee,n[2]=e.ei,n[3]=e.em,n[4]=e.eb,n[5]=e.ef,n[6]=e.ej,n[7]=e.en,n[8]=e.ec,n[9]=e.eg,n[10]=e.ek,n[11]=e.eo,n[12]=e.ed,n[13]=e.eh,n[14]=e.el,n[15]=e.ep,n},hc=c(function(e,n,r,t,o){return j(o,e,S(fc,t.cB,t.cB,t.cB,t.d0?1:-1),function(e){return bc({ea:e.w,eb:e.z,ec:e.C,ed:e.R,ee:e.x,ef:e.A,eg:e.D,eh:e.S,ei:e.y,ej:e.B,ek:e.E,el:e.T,em:0,en:0,eo:0,ep:1})}(t),t.d0,n,r)}),xc=F(function(e,n,r,t,o,a){for(;;)switch(o.$){case 0:return a;case 5:var i=o.b;e=e,n=n,r=r,t=z(gc,o.a,t),o=i,a=a;continue;case 1:return{Z:z(h,V(hc,e,n,r,t,o.b),a.Z),ak:a.ak,am:a.am};case 3:i=z(h,V(hc,e,n,r,t,o.b),a.ak);return{Z:a.Z,ak:i,am:a.am};case 2:var c=z(h,V(hc,e,n,r,t,o.a),a.am);return{Z:a.Z,ak:a.ak,am:c};default:c=o.a;return $(mt,S(xc,e,n,r,t),a,c)}}),Cc=u(function(e,n,r,t){return{$:4,a:e,b:n,c:r,d:t}}),Pc=u(function(e,n,r,t){return{$:1,a:e,b:n,c:r,d:t}}),he=s(function(e,n){return{$:6,a:e,b:n}}),yc=p([function(e){return S(Pc,518,e.au,e.ap,e.an)}({an:1,ap:0,au:!1}),S(Cc,!1,!1,!1,!1),z(he,0,1)]),Tc={src:"\n        precision lowp float;\n\n        void main() {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    ",attributes:{},uniforms:{}},q=kn,xe=s(function(e,n){return{$:0,a:e,b:n}}),Fe=xe({dP:1,d_:0,ey:5}),r=Jn,Lc=Fe(p([{cu:z(r,-1,-1)},{cu:z(r,1,-1)},{cu:z(r,-1,1)},{cu:z(r,1,1)}])),Mc={src:"\n        precision lowp float;\n\n        attribute vec2 position;\n\n        void main() {\n            gl_Position = vec4(position, 0.0, 1.0);\n        }\n    ",attributes:{position:"cu"},uniforms:{}},wc=d(function(e,n,r){function t(e){return z(to,i(e.bY),z(to,c(e.bI),z(to,c(e.b4),c(e.b5))))}var o=e.dm,a=e.c$,e=e.dA,i=s(function(e,n){return n(e)}),c=s(function(e,n){return n(e)});return z(t,r,z(t,n,$(qr,o,a,e)))}),Dc=Fr({bI:7681,c$:0,dm:8,bY:519,dA:15,b4:7681,b5:7681}),Nc=te,zc=d(function(e,n,r){return _r(p([$(B,e,r,yc),p([Er(n),Dc])]))}),$c=s(function(e,n){return _r(z(ht,zc(e),n))}),re=function(e){return S(Pc,513,e.au,e.ap,e.an)}({an:1,ap:0,au:!0}),Sc=d(function(e,n,r){return{$:0,a:e,b:n,c:r}}),K=s(function(e,n){return $(Sc,32774,e,n)}),Vc=function(e){var a=e.cw,i=e.cg,c=e.b9,l=e.b6,n=e.bc,e=e.ba;return z(s(function(e,n){var r=e.c,t=n.a,o=n.b,n=n.c;return function(u){return function(l){return function(c){return function(i){return function(a){return function(o){return function(t){return function(r){return function(n){return function(e){return{$:0,a:u,b:l,c:c,d:i,e:a,f:o,g:t,h:r,i:n,j:e}}}}}}}}}}}(e.a)(e.b)(r)(t)(o)(n)(a)(i)(c)(l)}),n,e)}({b6:0,ba:z(K,1,771),b9:0,bc:z(K,770,771),cg:0,cw:0}),_c=p([re,Vc]),kc=function(e){return e.er},Ac=function(e){return e.es},Bc=function(e){return e.et},qc=function(e){return e.eu},Rc=function(e){return e.ev},Fc=function(e){return e.ew},Ec=s(function(e,n){var r=e.dD,t=e.dC,e=e.dB;return{ab:n.ab*e.ab+n.ac*e.ac+n.fa*e.fa,ac:n.ab*t.ab+n.ac*t.ac+n.fa*t.fa,fa:n.ab*r.ab+n.ac*r.ac+n.fa*r.fa}}),Ic=s(function(e,n){var r=e.c9,t=n.ab-r.ab,o=n.ac-r.ac,n=n.fa-r.fa,r=e.dD,a=e.dC,e=e.dB;return{ab:t*e.ab+o*e.ac+n*e.fa,ac:t*a.ab+o*a.ac+n*a.fa,fa:t*r.ab+o*r.ac+n*r.fa}}),jc=s(function(e,n){return{c9:z(Ic,e,xr(n)),dB:z(Ec,e,za(n)),dC:z(Ec,e,$a(n)),dD:z(Ec,e,Cr(n))}}),Gc=s(function(e,n){return z(P,e,n)}),Hc=s(function(e,n){return z(da,e,n)}),Oc=s(function(e,n){n=jr(n),e=jr(e);return{er:z(Gc,e.er,n.er),es:z(Gc,e.es,n.es),et:z(Gc,e.et,n.et),eu:z(Hc,e.eu,n.eu),ev:z(Hc,e.ev,n.ev),ew:z(Hc,e.ew,n.ew)}}),Yc=s(function(e,n){return n+e}),Uc=s(function(e,n){var r=e.a,t=e.c,e=Ga(N(e.b)),r=Ga(N(r)),t=Ga(N(t)),n=function(e){return{a:e.ab,b:e.ac,c:e.fa}}(n),o=n.a,a=n.b,n=n.c;return{er:z(Yc,r,o),es:z(Yc,e,a),et:z(Yc,t,n),eu:z(mi,r,o),ev:z(mi,e,a),ew:z(mi,t,n)}}),Wc=u(function(e,n,r,t){var o=r.fo,a=2*r.fQ*n,i=2*r.fP*n,r=2*r.fO*n,c=o.fa*n,l=o.ac*n,o=o.ab*n,n=Gr(Cr(e)),n=D(r*n.ab)+D(i*n.ac)+D(a*n.fa),u=Gr($a(e)),u=D(r*u.ab)+D(i*u.ac)+D(a*u.fa),f=Gr(za(e)),r=D(r*f.ab)+D(i*f.ac)+D(a*f.fa),i=z(Uc,{a:r,b:u,c:n},z(Ic,e,$(Kt,o,l,c)));return x(t.$?i:z(Oc,t.a,i))}),Qc=u(function(e,n,r,t){for(;;){if(!t.b)return r;var o=t.a,a=t.b;switch(o.$){case 0:e=c=e,n=l=n,r=u=r,t=a;continue;case 1:var i=S(Wc,e,n,o.a,r);e=c=e,n=l=n,r=u=i,t=a;continue;case 2:e=c=e,n=l=n,r=u=r,t=a;continue;case 3:i=S(Wc,e,n,o.a,r);e=c=e,n=l=n,r=u=i,t=a;continue;case 4:var c=e,l=n,u=S(Qc,e,n,r,o.a);e=c,n=l,r=u,t=a;continue;default:var f=o.a,s=o.b,d=z(jc,function(e){return Na({c9:{ab:e.R,ac:e.S,fa:e.T},dB:{ab:e.w,ac:e.x,fa:e.y},dC:{ab:e.z,ac:e.A,fa:e.B},dD:{ab:e.C,ac:e.D,fa:e.E}})}(f),e),f=n*f.cB;e=c=e,n=l=n,r=u=S(Qc,d,f,r,p([s])),t=a;continue}}}),Zc=function(e){return e[0]},Kc=function(e){return e[1]},Xc=function(e){return e[2]},Jc=function(e){return{$:4,a:e}},el=s(function(e,n){for(;;){if(!e.b)return n;var r=e.a;e=e.b,n=z(h,r,n)}}),nl={d0:!0,w:1,x:0,y:0,z:0,A:1,B:0,C:0,D:0,E:1,R:0,S:0,T:0,cB:1},rl=Fr({bI:7681,c$:0,dm:8,bY:519,dA:255,b4:7681,b5:7681}),e={b9:0,fn:!1,cg:0,di:0,cw:0,gv:0,ab:0,ac:0,fa:0},ge=s(function(e,n){return bc({ea:e.ab,eb:e.cw,ec:n.ab,ed:n.cw,ee:e.ac,ef:e.cg,eg:n.ac,eh:n.cg,ei:e.fa,ej:e.b9,ek:n.fa,el:n.b9,em:e.gv,en:e.di,eo:n.gv,ep:n.di})}),tl={a:{bO:z(ge,e,e),ck:z(ge,e,e),cl:z(ge,e,e),cm:z(ge,e,e)},b:S(fc,0,0,0,0)},ol=p([Or({an:1,ap:0,au:!0}),Rr({bI:7680,c$:240,dm:0,bY:514,dA:0,b4:7680,b5:7680}),Vc]),al=function(e){return e===1/0||e===-1/0},il=s(function(e,n){var r,t=n.fL,o=n.fd,n=N(n.f4),t=N(t),e=e.dk;return e.$?(r=e.a,al(t)?bc({ea:2/(o*r),eb:0,ec:0,ed:0,ee:0,ef:2/r,eg:0,eh:0,ei:0,ej:0,ek:0,el:-1,em:0,en:0,eo:0,ep:1}):bc({ea:2/(o*r),eb:0,ec:0,ed:0,ee:0,ef:2/r,eg:0,eh:0,ei:0,ej:0,ek:-2/(t-n),el:-(t+n)/(t-n),em:0,en:0,eo:0,ep:1})):(r=e.a,al(t)?bc({ea:1/(o*r),eb:0,ec:0,ed:0,ee:0,ef:1/r,eg:0,eh:0,ei:0,ej:0,ek:-1,el:-2*n,em:0,en:0,eo:-1,ep:0}):bc({ea:1/(o*r),eb:0,ec:0,ed:0,ee:0,ef:1/r,eg:0,eh:0,ei:0,ej:0,ek:-(t+n)/(t-n),el:-2*t*n/(t-n),em:0,en:0,eo:-1,ep:0}))}),cl=s(function(e,n){return 1==(1&e>>n)?0:1}),ll=d(function(r,t,e){return _r(z(L,function(e){var n=e<<4;return $(B,r,{a:t,b:S(fc,z(cl,e,0),z(cl,e,1),z(cl,e,2),z(cl,e,3))},function(e){return p([Or({an:1,ap:0,au:!0}),Rr({bI:7680,c$:240,dm:e,bY:514,dA:0,b4:7680,b5:7680}),Vc])}(n))},z(bt,1,z(Nc,2,e)-1)))}),ul=function(e){return{ea:e[0],ee:e[1],ei:e[2],em:e[3],eb:e[4],ef:e[5],ej:e[6],en:e[7],ec:e[8],eg:e[9],ek:e[10],eo:e[11],ed:e[12],eh:e[13],el:e[14],ep:e[15]}},fl={c9:ia,dB:O,dC:Ee,dD:J},sl=s(function(e,n){var r,t;return e=Yr(xr(n=z(jc,n,e))),r=Gr(Cr(n)),t=Gr($a(n)),n=Gr(za(n)),bc({ea:n.ab,eb:t.ab,ec:r.ab,ed:e.ab,ee:n.ac,ef:t.ac,eg:r.ac,eh:e.ac,ei:n.fa,ej:t.fa,ek:r.fa,el:e.fa,em:0,en:0,eo:0,ep:1})}),dl=s(function(n,e){var r=p([ic(1),cc(0),rc(!0),S(oc,0,0,0,0)]),t=function(){var e=n.bb;switch(e.$){case 0:return{a:r,b:"0",c:1};case 1:return{a:z(h,tc,r),b:"1",c:1};default:return{a:r,b:"0",c:e.a}}}(),o=t.a,a=t.b,i=t.c,t=n.fv,c=t.a,t=Br(t.b),l=z(A,"height",dt(t)+"px"),c=Br(c),u=c/t,e=z(ac,function(e){return Ur({fd:u,fm:n.fm,fr:n.fr,fE:e.fE,aH:e.aH,aK:e.aK,e$:i,aQ:e.aQ,aT:e.aT})},e),f=z(A,"width",dt(c)+"px"),s=Ar(n.fg);return $(kr,"div",p([z(A,"padding","0px"),f,l]),p([{a:a,b:$(uc,o,p([(a=si(c*i),z(en,"width",dt(a))),function(e){return z(en,"height",dt(e))}(si(t*i)),f,l,z(A,"display","block"),z(A,"background-color",s)]),e)}]))}),vl=function(e){return z(dl,{bb:e.bb,fg:e.fg,fm:e.fm,fr:e.fr,fv:e.fv},p([{fE:e.fE,aH:e.aH,aK:e.aK,aQ:e.aQ,aT:e.aT}]))},ml={ab:.31271,ac:.32902},pl=function(e){return N(e)},gl={$:1},bl=function(e){return e},hl={$:0,a:tl.a},xl={$:0},Cl=function(e){return{$:6,a:e}},Pl=function(e){return e?z(A,"background-color","#d33030"):z(A,"","")},yl=Ze("button"),Tl=Xe,Ll=s(function(e,n){return z(Tl,e,{$:0,a:n})}),Ml=function(e){return z(Ll,"click",qt(e))},wl=s(function(e,n){return e/n}),Dl=s(function(e,n){var r=e.c9,e=e.dB;return(n.ab-r.ab)*e.ab+(n.ac-r.ac)*e.ac+(n.fa-r.fa)*e.fa}),Nl=d(function(e,n,r){var t=e.c9,o=e.dC,e=e.dB;return{ab:t.ab+n*e.ab+r*o.ab,ac:t.ac+n*e.ac+r*o.ac}}),zl=s(function(e,n){var r=e.c9,e=e.dC;return(n.ab-r.ab)*e.ab+(n.ac-r.ac)*e.ac+(n.fa-r.fa)*e.fa}),$l=s(function(e,n){var r=e.c9,e=e.dD;return(n.ab-r.ab)*e.ab+(n.ac-r.ac)*e.ac+(n.fa-r.fa)*e.fa}),Sl=d(function(e,n,r){var t,o,a=e.gA,i=z(Dl,a,r),c=z(zl,a,r),a=xa(z($l,a,r)),r=Tr(n),l=r.a,r=r.b,u=z(wl,l,r),e=e.dk;return e.$?(o=z(wl,c,t=e.a),$(Nl,yr(n),z(Qa,z(wl,i,z(Qa,u,t)),l),z(Qa,o,r))):(t=e.a,o=z(wl,c,a)/t,$(Nl,yr(n),z(Qa,z(wl,i,a)/(u*t)/2,l),z(Qa,o/2,r)))}),Vl=u(function(e,n,r,t){e=Pi($(Sl,e,Ci,z(Ko,$(o,0,0,1.2),t)));return z(a,p([z(A,"position","absolute"),z(A,"left",i(e.ab-45)+"px"),z(A,"top",i(e.ac)+"px"),z(A,"width",i(90)+"px"),z(A,"height",i(15)+"px"),z(A,"background-color","#d33030")]),p([z(a,p([z(A,"position","absolute"),z(A,"left","0"),z(A,"top","0"),z(A,"width",i(n/r*100)+"%"),z(A,"height",i(15)+"px"),z(A,"background-color","lime")]),m)]))}),_l=d(function(e,n,r){var e=Pi($(Sl,e,Ci,r)),r=e.ab,e=e.ac,n=mr(n);return 1===n.$?t(""):(n=n.a.b7,z(a,p([z(A,"position","absolute"),z(A,"left",i(r-15)+"px"),z(A,"top",i(e-15)+"px"),z(A,"width",i(30)+"px"),z(A,"height",i(30)+"px"),z(A,"background-color","#d33030"),z(A,"color","white"),z(A,"display","flex"),z(A,"justify-content","center"),z(A,"align-items","center"),z(A,"border-radius","100%"),z(A,"font-weight","bold")]),p([z(a,m,p([t(dt(n))]))])))}),kl={$:0},Al=kl,Bl=s(function(e,n){return{$:0,a:e,b:n}}),ql=function(e){return{ba:e.d,cK:e.c,cQ:e.b,dl:e.a}},Rl=s(function(e,n){return{$:1,a:e,b:n}}),Fl={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void main () {\n            gl_FragColor = texture2D(colorTexture, interpolatedUv);\n        }\n    ",attributes:{},uniforms:{colorTexture:"cc"}},El={src:"\n        precision lowp float;\n        \n        uniform lowp vec3 constantColor;\n        \n        void main () {\n            gl_FragColor = vec4(constantColor, 1.0);\n        }\n    ",attributes:{},uniforms:{constantColor:"aZ"}},Il={src:"\n        precision mediump float;\n        \n        uniform mediump vec3 emissiveColor;\n        uniform highp mat4 sceneProperties;\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{emissiveColor:"bf",sceneProperties:"g"}},jl={src:"\n        precision mediump float;\n        \n        uniform mediump sampler2D colorTexture;\n        uniform mediump float backlight;\n        uniform highp mat4 sceneProperties;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main () {\n            vec3 emissiveColor = fromSrgb(texture2D(colorTexture, interpolatedUv).rgb) * backlight;\n            gl_FragColor = toSrgb(emissiveColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{backlight:"cG",colorTexture:"cc",sceneProperties:"g"}},Gl=E(function(e,n,r,t,o,a,i){for(;;){if(!i.b)return{er:n,es:t,et:a,eu:e,ev:r,ew:o};var c=i.a,l=i.b,u=c.ab,f=c.ac,c=c.fa;e=z(da,u,e),n=z(P,u,n),r=z(da,f,r),t=z(P,f,t),o=z(da,c,o),a=z(P,c,a),i=l}}),Hl=s(function(e,n){var r=e.ab,t=e.ac,e=e.fa;return G(Gl,r,r,t,t,e,e,n)}),Ol={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 materialColor;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"ae",lights12:"bO",lights34:"ck",lights56:"cl",lights78:"cm",materialColor:"c0",sceneProperties:"g",viewMatrix:"h"}},Yl={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D materialColorTexture;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        uniform highp mat4 viewMatrix;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 lambertianLight(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                vec3 upDirection = xyz_type.xyz;\n                vec3 aboveLuminance = rgb_parameter.rgb;\n                vec3 belowLuminance = rgb_parameter.a * aboveLuminance;\n                vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, upDirection, surfaceNormal);\n                return luminance * materialColor;\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(\n                xyz_type,\n                rgb_parameter,\n                surfacePosition,\n                directionToLight,\n                normalIlluminance\n            );\n        \n            float dotNL = positiveDotProduct(directionToLight, surfaceNormal);\n            return (normalIlluminance * dotNL) * (materialColor / kPi);\n        }\n        \n        vec3 lambertianLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 materialColor,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            vec3 litColor1 = enabledLights[0] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[0], lights12[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights12[2], lights12[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[0], lights34[1]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? lambertianLight(surfacePosition, surfaceNormal, materialColor, lights34[2], lights34[3]) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[0], lights56[1]);\n            vec3 litColor6 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights56[2], lights56[3]);\n            vec3 litColor7 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[0], lights78[1]);\n            vec3 litColor8 = lambertianLight(surfacePosition, surfaceNormal, materialColor, lights78[2], lights78[3]);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n            vec3 materialColor = fromSrgb(texture2D(materialColorTexture, interpolatedUv).rgb);\n        \n            vec3 linearColor = lambertianLighting(\n                interpolatedPosition,\n                normalDirection,\n                materialColor,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{enabledLights:"ae",lights12:"bO",lights34:"ck",lights56:"cl",lights78:"cm",materialColorTexture:"c1",normalMapTexture:"bo",sceneProperties:"g",useNormalMap:"bu",viewMatrix:"h"}},Ul=Zr(1029),Wl=Zr(1028),Ql=d(function(e,n,r){return 1===n?z(h,e?Ul:Wl,r):r}),Zl={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform lowp vec3 baseColor;\n        uniform lowp float roughness;\n        uniform lowp float metallic;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 normalDirection = normalize(interpolatedNormal) * getNormalSign();\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColor:"cI",enabledLights:"ae",lights12:"bO",lights34:"ck",lights56:"cl",lights78:"cm",metallic:"c3",roughness:"dp",sceneProperties:"g",viewMatrix:"h"}},Kl={src:"\n        precision highp float;\n        \n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 lights12;\n        uniform highp mat4 lights34;\n        uniform highp mat4 lights56;\n        uniform highp mat4 lights78;\n        uniform lowp vec4 enabledLights;\n        uniform mediump sampler2D baseColorTexture;\n        uniform lowp vec4 constantBaseColor;\n        uniform mediump sampler2D roughnessTexture;\n        uniform lowp vec2 constantRoughness;\n        uniform mediump sampler2D metallicTexture;\n        uniform lowp vec2 constantMetallic;\n        uniform mediump sampler2D normalMapTexture;\n        uniform lowp float useNormalMap;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        const lowp float kPerspectiveProjection = 0.0;\n        const lowp float kOrthographicProjection = 1.0;\n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        const highp float kPi = 3.14159265359;\n        const mediump float kMediumpFloatMax = 65504.0;\n        const lowp float kDisabledLight = 0.0;\n        const lowp float kSoftLighting = 3.0;\n        \n        float getFloatValue(sampler2D texture, vec2 uv, vec2 constantValue) {\n            if (constantValue.y == 1.0) {\n                return constantValue.x;\n            } else {\n                vec4 textureColor = texture2D(texture, uv);\n                return dot(textureColor, vec4(0.2126, 0.7152, 0.0722, 0.0));\n            }\n        }\n        \n        vec3 getLocalNormal(sampler2D normalMap, float useNormalMap, vec2 uv) {\n            vec3 rgb = useNormalMap * texture2D(normalMap, uv).rgb + (1.0 - useNormalMap) * vec3(0.5, 0.5, 1.0);\n            float x = 2.0 * (rgb.r - 0.5);\n            float y = 2.0 * (rgb.g - 0.5);\n            float z = 2.0 * (rgb.b - 0.5);\n            return normalize(vec3(-x, -y, z));\n        }\n        \n        float getNormalSign() {\n            return 2.0 * float(gl_FrontFacing) - 1.0;\n        }\n        \n        vec3 getMappedNormal(vec3 normal, vec3 tangent, float normalSign, vec3 localNormal) {\n            vec3 bitangent = cross(normal, tangent) * normalSign;\n            return normalize(localNormal.x * tangent + localNormal.y * bitangent + localNormal.z * normal);\n        }\n        \n        vec3 getDirectionToCamera(vec3 surfacePosition, mat4 sceneProperties) {\n            float projectionType = sceneProperties[1].w;\n            if (projectionType == kPerspectiveProjection) {\n                vec3 cameraPoint = sceneProperties[1].xyz;\n                return normalize(cameraPoint - surfacePosition);\n            } else if (projectionType == kOrthographicProjection) {\n                return sceneProperties[1].xyz;\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        void getDirectionToLightAndNormalIlluminance(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            out vec3 directionToLight,\n            out vec3 normalIlluminance\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                directionToLight = xyz_type.xyz;\n                normalIlluminance = rgb_parameter.rgb;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                vec3 displacement = lightPosition - surfacePosition;\n                float distance = length(displacement);\n                directionToLight = displacement / distance;\n                normalIlluminance = rgb_parameter.rgb / (4.0 * kPi * distance * distance);\n            }\n        }\n        \n        float positiveDotProduct(vec3 v1, vec3 v2) {\n            return clamp(dot(v1, v2), 0.0, 1.0);\n        }\n        \n        // Adapted from https://google.github.io/filament/Filament.md.html#materialsystem/specularbrdf/normaldistributionfunction(speculard)\n        float specularD(float alpha, float dotNH, vec3 normalDirection, vec3 halfDirection) {\n            vec3 crossNH = cross(normalDirection, halfDirection);\n            float a = dotNH * alpha;\n            float k = alpha / (dot(crossNH, crossNH) + a * a);\n            float d = k * k * (1.0 / kPi);\n            return min(d, kMediumpFloatMax);\n        }\n        \n        float safeQuotient(float numerator, float denominator) {\n            if (denominator == 0.0) {\n                return 0.0;\n            } else {\n                return numerator / denominator;\n            }\n        }\n        \n        float g1(float dotNV, float alphaSquared) {\n            return safeQuotient(2.0 * dotNV, dotNV + sqrt(alphaSquared + (1.0 - alphaSquared) * dotNV * dotNV));\n        }\n        \n        float specularG(float dotNL, float dotNV, float alphaSquared) {\n            return g1(dotNV, alphaSquared) * g1(dotNL, alphaSquared);\n        }\n        \n        vec3 fresnelColor(vec3 specularBaseColor, float dotVH) {\n            vec3 one = vec3(1.0, 1.0, 1.0);\n            float scale = exp2((-5.55473 * dotVH - 6.98316) * dotVH);\n            return specularBaseColor + (one - specularBaseColor) * scale;\n        }\n        \n        vec3 brdf(vec3 normalDirection, vec3 directionToCamera, vec3 directionToLight, float alpha, float dotNV, float dotNL, vec3 specularBaseColor, vec3 normalIlluminance) {\n            vec3 halfDirection = normalize(directionToCamera + directionToLight);\n            float dotVH = positiveDotProduct(directionToCamera, halfDirection);\n            float dotNH = positiveDotProduct(normalDirection, halfDirection);\n            float dotNHSquared = dotNH * dotNH;\n        \n            float d = specularD(alpha, dotNH, normalDirection, halfDirection);\n            float g = specularG(dotNL, dotNV, alpha * alpha);\n            vec3 f = fresnelColor(specularBaseColor, dotVH);\n            return safeQuotient(d * g, 4.0 * dotNL * dotNV) * f;\n        }\n        \n        vec3 sampleFacetNormal(vec3 vH, vec3 vT1, vec3 vT2, float s, float alpha) {\n            float t2 = (1.0 - s);\n            vec3 vNh = t2 * vT2 + sqrt(max(0.0, 1.0 - t2 * t2)) * vH;\n            return normalize(vec3(alpha * vNh.x, alpha * vNh.y, max(0.0, vNh.z)));\n        }\n        \n        vec3 softLightingLuminance(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localLightDirection\n        ) {\n            float sinElevation = dot(localLightDirection, localUpDirection);\n            float t = (sinElevation + 1.0) / 2.0;\n            return aboveLuminance * t + belowLuminance * (1.0 - t);\n        }\n        \n        vec3 softLightingSpecularSample(\n            vec3 aboveLuminance,\n            vec3 belowLuminance,\n            vec3 localUpDirection,\n            vec3 localViewDirection,\n            vec3 localLightDirection,\n            vec3 localHalfDirection,\n            float alphaSquared,\n            vec3 specularBaseColor\n        ) {\n            vec3 luminance = softLightingLuminance(aboveLuminance, belowLuminance, localUpDirection, localLightDirection);\n            float dotVH = positiveDotProduct(localViewDirection, localHalfDirection);\n            float dotNL = localLightDirection.z;\n            return luminance * (fresnelColor(specularBaseColor, dotVH) * g1(dotNL, alphaSquared));\n        }\n        \n        vec3 softLighting(\n            vec3 normalDirection,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha,\n            vec3 directionToCamera,\n            vec3 viewY,\n            vec4 xyz_type,\n            vec4 rgb_parameter\n        ) {\n            float alphaSquared = alpha * alpha;\n            vec3 upDirection = xyz_type.xyz;\n            vec3 luminanceAbove = rgb_parameter.rgb;\n            vec3 luminanceBelow = rgb_parameter.a * luminanceAbove;\n            vec3 crossProduct = cross(normalDirection, directionToCamera);\n            float crossMagnitude = length(crossProduct);\n            vec3 xDirection = vec3(0.0, 0.0, 0.0);\n            vec3 yDirection = vec3(0.0, 0.0, 0.0);\n            if (crossMagnitude > 1.0e-6) {\n                yDirection = (1.0 / crossMagnitude) * crossProduct;\n                xDirection = cross(yDirection, normalDirection);\n            } else {\n                vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n                xDirection = normalize(cross(viewY, normalDirection));\n                yDirection = cross(normalDirection, xDirection);\n            }\n            float localViewX = dot(directionToCamera, xDirection);\n            float localViewZ = dot(directionToCamera, normalDirection);\n            vec3 localViewDirection = vec3(localViewX, 0, localViewZ);\n            float localUpX = dot(upDirection, xDirection);\n            float localUpY = dot(upDirection, yDirection);\n            float localUpZ = dot(upDirection, normalDirection);\n            vec3 localUpDirection = vec3(localUpX, localUpY, localUpZ);\n        \n            vec3 vH = normalize(vec3(alpha * localViewX, 0.0, localViewZ));\n            vec3 vT1 = vec3(0.0, 1.0, 0.0);\n            vec3 vT2 = cross(vH, vT1);\n            float s = 0.5 * (1.0 + vH.z);\n            \n            vec3 localHalfDirection = sampleFacetNormal(vH, vT1, vT2, s, alpha);\n            vec3 localLightDirection = vec3(0.0, 0.0, 0.0);\n            \n            localLightDirection = -reflect(localViewDirection, localHalfDirection);\n            vec3 specular = softLightingSpecularSample(luminanceAbove, luminanceBelow, localUpDirection, localViewDirection, localLightDirection, localHalfDirection, alphaSquared, specularBaseColor);\n            \n            localLightDirection = vec3(0.000000, 0.000000, 1.000000);\n            vec3 diffuse = softLightingLuminance(luminanceAbove, luminanceBelow, localUpDirection, localLightDirection) * localLightDirection.z;\n            \n            return specular + diffuse * diffuseBaseColor;\n        }\n        \n        vec3 physicalLight(\n            vec4 xyz_type,\n            vec4 rgb_parameter,\n            vec3 surfacePosition,\n            vec3 normalDirection,\n            vec3 directionToCamera,\n            vec3 viewY,\n            float dotNV,\n            vec3 diffuseBaseColor,\n            vec3 specularBaseColor,\n            float alpha\n        ) {\n            float lightType = xyz_type.w;\n            if (lightType == kDisabledLight) {\n                return vec3(0.0, 0.0, 0.0);\n            } else if (lightType == kSoftLighting) {\n                return softLighting(normalDirection, diffuseBaseColor, specularBaseColor, alpha, directionToCamera, viewY, xyz_type, rgb_parameter);\n            }\n        \n            vec3 directionToLight = vec3(0.0, 0.0, 0.0);\n            vec3 normalIlluminance = vec3(0.0, 0.0, 0.0);\n            getDirectionToLightAndNormalIlluminance(xyz_type, rgb_parameter, surfacePosition, directionToLight, normalIlluminance);\n        \n            float dotNL = positiveDotProduct(normalDirection, directionToLight);\n            vec3 specularColor = brdf(normalDirection, directionToCamera, directionToLight, alpha, dotNV, dotNL, specularBaseColor, normalIlluminance);\n            return (normalIlluminance * dotNL) * ((diffuseBaseColor / kPi) + specularColor);\n        }\n        \n        vec3 physicalLighting(\n            vec3 surfacePosition,\n            vec3 surfaceNormal,\n            vec3 baseColor,\n            vec3 directionToCamera,\n            mat4 viewMatrix,\n            float roughness,\n            float metallic,\n            mat4 lights12,\n            mat4 lights34,\n            mat4 lights56,\n            mat4 lights78,\n            vec4 enabledLights\n        ) {\n            float dotNV = positiveDotProduct(surfaceNormal, directionToCamera);\n            float alpha = roughness * roughness;\n            float nonmetallic = 1.0 - metallic;\n            vec3 diffuseBaseColor = nonmetallic * 0.96 * baseColor;\n            vec3 specularBaseColor = nonmetallic * 0.04 * vec3(1.0, 1.0, 1.0) + metallic * baseColor;\n            vec3 viewY = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);\n        \n            vec3 litColor1 = enabledLights[0] == 1.0 ? physicalLight(lights12[0], lights12[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor2 = enabledLights[1] == 1.0 ? physicalLight(lights12[2], lights12[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor3 = enabledLights[2] == 1.0 ? physicalLight(lights34[0], lights34[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor4 = enabledLights[3] == 1.0 ? physicalLight(lights34[2], lights34[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha) : vec3(0.0, 0.0, 0.0);\n            vec3 litColor5 = physicalLight(lights56[0], lights56[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor6 = physicalLight(lights56[2], lights56[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor7 = physicalLight(lights78[0], lights78[1], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            vec3 litColor8 = physicalLight(lights78[2], lights78[3], surfacePosition, surfaceNormal, directionToCamera, viewY, dotNV, diffuseBaseColor, specularBaseColor, alpha);\n            return litColor1 + litColor2 + litColor3 + litColor4 + litColor5 + litColor6 + litColor7 + litColor8;\n        }\n        \n        float inverseGamma(float u) {\n            if (u <= 0.04045) {\n                return clamp(u / 12.92, 0.0, 1.0);\n            } else {\n                return clamp(pow((u + 0.055) / 1.055, 2.4), 0.0, 1.0);\n            }\n        }\n        \n        vec3 fromSrgb(vec3 srgbColor) {\n            return vec3(\n                inverseGamma(srgbColor.r),\n                inverseGamma(srgbColor.g),\n                inverseGamma(srgbColor.b)\n            );\n        }\n        \n        float gammaCorrect(float u) {\n            if (u <= 0.0031308) {\n                return 12.92 * u;\n            } else {\n                return 1.055 * pow(u, 1.0 / 2.4) - 0.055;\n            }\n        }\n        \n        vec3 gammaCorrectedColor(vec3 color) {\n            float red = gammaCorrect(color.r);\n            float green = gammaCorrect(color.g);\n            float blue = gammaCorrect(color.b);\n            return vec3(red, green, blue);\n        }\n        \n        vec3 reinhardLuminanceToneMap(vec3 color) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scale = 1.0 / (1.0 + luminance);\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 reinhardPerChannelToneMap(vec3 color) {\n            return gammaCorrectedColor(color / (color + 1.0));\n        }\n        \n        float extendedReinhardToneMap(float x, float xMax) {\n            return x * (1.0 + (x / (xMax * xMax))) / (1.0 + x);\n        }\n        \n        vec3 extendedReinhardLuminanceToneMap(vec3 color, float overexposureLimit) {\n            float luminance = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;\n            float scaledLuminance = extendedReinhardToneMap(luminance, overexposureLimit);\n            float scale = scaledLuminance / luminance;\n            return gammaCorrectedColor(color * scale);\n        }\n        \n        vec3 extendedReinhardPerChannelToneMap(vec3 color, float overexposureLimit) {\n            float red = extendedReinhardToneMap(color.r, overexposureLimit);\n            float green = extendedReinhardToneMap(color.g, overexposureLimit);\n            float blue = extendedReinhardToneMap(color.b, overexposureLimit);\n            return gammaCorrectedColor(vec3(red, green, blue));\n        }\n        \n        vec3 hableFilmicHelper(vec3 color) {\n            float a = 0.15;\n            float b = 0.5;\n            float c = 0.1;\n            float d = 0.2;\n            float e = 0.02;\n            float f = 0.3;\n            return (color * (a * color + c * b) + d * e) / (color * (a * color + b) + d * f) - e / f;\n        }\n        \n        vec3 hableFilmicToneMap(vec3 color) {\n            float exposureBias = 2.0;\n            vec3 unscaled = hableFilmicHelper(exposureBias * color);\n            vec3 scale = 1.0 / hableFilmicHelper(vec3(11.2));\n            return gammaCorrectedColor(scale * unscaled);\n        }\n        \n        vec3 toneMap(vec3 color, float toneMapType, float toneMapParam) {\n            if (toneMapType == 0.0) {\n                return gammaCorrectedColor(color);\n            } else if (toneMapType == 1.0) {\n                return reinhardLuminanceToneMap(color);\n            } else if (toneMapType == 2.0) {\n                return reinhardPerChannelToneMap(color);\n            } else if (toneMapType == 3.0) {\n                return extendedReinhardLuminanceToneMap(color, toneMapParam);\n            } else if (toneMapType == 4.0) {\n                return extendedReinhardPerChannelToneMap(color, toneMapParam);\n            } else if (toneMapType == 5.0) {\n                return hableFilmicToneMap(color);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 toSrgb(vec3 linearColor, mat4 sceneProperties) {\n            vec3 referenceWhite = sceneProperties[2].rgb;\n            float unitR = linearColor.r / referenceWhite.r;\n            float unitG = linearColor.g / referenceWhite.g;\n            float unitB = linearColor.b / referenceWhite.b;\n            float toneMapType = sceneProperties[3][2];\n            float toneMapParam = sceneProperties[3][3];\n            vec3 toneMapped = toneMap(vec3(unitR, unitG, unitB), toneMapType, toneMapParam);\n            return vec4(toneMapped, 1.0);\n        }\n        \n        void main() {\n            vec3 baseColor = fromSrgb(texture2D(baseColorTexture, interpolatedUv).rgb) * (1.0 - constantBaseColor.w) + constantBaseColor.rgb * constantBaseColor.w;\n            float roughness = getFloatValue(roughnessTexture, interpolatedUv, constantRoughness);\n            float metallic = getFloatValue(metallicTexture, interpolatedUv, constantMetallic);\n        \n            vec3 localNormal = getLocalNormal(normalMapTexture, useNormalMap, interpolatedUv);\n            float normalSign = getNormalSign();\n            vec3 originalNormal = normalize(interpolatedNormal) * normalSign;\n            vec3 normalDirection = getMappedNormal(originalNormal, interpolatedTangent, normalSign, localNormal);\n            vec3 directionToCamera = getDirectionToCamera(interpolatedPosition, sceneProperties);\n        \n            vec3 linearColor = physicalLighting(\n                interpolatedPosition,\n                normalDirection,\n                baseColor,\n                directionToCamera,\n                viewMatrix,\n                roughness,\n                metallic,\n                lights12,\n                lights34,\n                lights56,\n                lights78,\n                enabledLights\n            );\n        \n            gl_FragColor = toSrgb(linearColor, sceneProperties);\n        }\n    ",attributes:{},uniforms:{baseColorTexture:"cJ",constantBaseColor:"cL",constantMetallic:"cM",constantRoughness:"cN",enabledLights:"ae",lights12:"bO",lights34:"ck",lights56:"cl",lights78:"cm",metallicTexture:"c4",normalMapTexture:"bo",roughnessTexture:"dq",sceneProperties:"g",useNormalMap:"bu",viewMatrix:"h"}},Xl={src:"\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n        }\n    ",attributes:{quadVertex:"cv"},uniforms:{modelMatrix:"d",modelScale:"e",projectionMatrix:"f",quadVertexPositions:"az",sceneProperties:"g",viewMatrix:"h"}},Jl=u(function(e,n,r,t){t=b(t),r=b(r),n=b(n),e=b(e);return bc({ea:e.ab,eb:n.ab,ec:r.ab,ed:t.ab,ee:e.ac,ef:n.ac,eg:r.ac,eh:t.ac,ei:e.fa,ej:n.fa,ek:r.fa,el:t.fa,em:0,en:0,eo:0,ep:0})}),eu=xe({dP:1,d_:0,ey:6})(p([{cv:$(mc,0,0,0)},{cv:$(mc,1,0,1)},{cv:$(mc,1,1,2)},{cv:$(mc,0,1,3)}])),nu=s(function(e,n){return{$:1,a:e,b:n}}),ru=s(function(e,n){return n.$?{a:n.a.q,b:1}:{a:e,b:0}}),tu=S(fc,0,0,0,0),ou=s(function(e,n){return n.$?{a:n.a.q,b:tu}:{a:e,b:S(fc,Zc(e=n.a),Kc(e),Xc(e),1)}}),au=s(function(e,n){var r,t={a:e,b:n};return t.a.$?z(nu,{a:r=t.a.a.q,b:tu},z(ru,r,n)):t.b.$?z(nu,z(ou,r=t.b.a.q,e),z(ru,r,n)):{$:0,a:t.a.a}}),iu=d(function(e,n,r){return{$:0,a:e,b:n,c:r}}),cu=u(function(e,n,r,t){return{$:1,a:e,b:n,c:r,d:t}}),lu=u(function(e,n,r,t){return{$:0,a:e,b:n,c:r,d:t}}),uu=z(r,0,0),fu=s(function(e,n){return n.$?{a:n.a.q,b:uu}:{a:e,b:z(r,n.a,1)}}),su=u(function(e,n,r,t){var o,a=S(lu,e,n,r,t);return a.a.$?S(cu,{a:o=a.a.a.q,b:tu},z(fu,o,n),z(fu,o,r),z(ru,o,t)):a.b.$?S(cu,z(ou,o=a.b.a.q,e),{a:o,b:uu},z(fu,o,r),z(ru,o,t)):a.c.$?S(cu,z(ou,o=a.c.a.q,e),z(fu,o,n),{a:o,b:uu},z(ru,o,t)):a.d.$?S(cu,z(ou,o=a.d.a.q,e),z(fu,o,n),z(fu,o,r),{a:o,b:1}):$(iu,a.a.a,a.b.a,a.c.a)}),du=nr,vu={src:"\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n        }\n    ",attributes:{quadVertex:"cv"},uniforms:{modelMatrix:"d",modelScale:"e",projectionMatrix:"f",quadVertexPositions:"az",sceneProperties:"g",viewMatrix:"h"}},mu={src:"\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        varying highp vec3 interpolatedPosition;\n        varying highp vec3 interpolatedNormal;\n        varying mediump vec2 interpolatedUv;\n        varying highp vec3 interpolatedTangent;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedPosition = worldPosition.xyz;\n            interpolatedNormal = getWorldNormal(normal, modelScale, modelMatrix);\n            interpolatedUv = quadVertex.xy;\n            interpolatedTangent = tangent;\n        }\n    ",attributes:{quadVertex:"cv"},uniforms:{modelMatrix:"d",modelScale:"e",projectionMatrix:"f",quadVertexPositions:"az",sceneProperties:"g",viewMatrix:"h"}},pu=d(function(e,n,r){return.5<r?n+(1-r)*(e-n):e+r*(n-e)}),gu=function(e){return $(pu,e.eu,e.er,.5)},bu=function(e){return $(pu,e.ev,e.es,.5)},hu=function(e){return $(pu,e.ew,e.et,.5)},xu=d(function(e,n,r){return{ab:e,ac:n,fa:r}}),Cu={src:"\n        precision highp float;\n        \n        attribute highp vec3 quadVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 quadVertexPositions;\n        \n        varying mediump vec2 interpolatedUv;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        void main() {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadVertex.z), quadVertexPositions, position, normal, tangent);\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            gl_Position = projectionMatrix * (viewMatrix * worldPosition);\n            interpolatedUv = quadVertex.xy;\n        }\n    ",attributes:{quadVertex:"cv"},uniforms:{modelMatrix:"d",modelScale:"e",projectionMatrix:"f",quadVertexPositions:"az",sceneProperties:"g",viewMatrix:"h"}},Pu=c(function(r,M,w,D,N){var e=z(Hl,M,p([w,D,N])),e=Kr(e);return z(Rl,e,function(){switch(r.$){case 0:var l;return r.b.$?(u=r.b.a.q,I(function(e,n,r,t,o,a,i,c){return V(q,$(Ql,t,0,c),Cu,Fl,eu,{cc:u,d:r,e:n,f:a,az:S(Jl,M,w,D,N),g:e,h:o})})):(l=r.b.a,I(function(e,n,r,t,o,a,i,c){return V(q,$(Ql,t,0,c),Xl,El,eu,{aZ:l,d:r,e:n,f:a,az:S(Jl,M,w,D,N),g:e,h:o})}));case 1:var u,f,s;return r.b.$?(u=r.b.a.q,s=r.c,I(function(e,n,r,t,o,a,i,c){return V(q,$(Ql,t,0,c),Cu,jl,eu,{cG:Qr(s),cc:u,d:r,e:n,f:a,az:S(Jl,M,w,D,N),g:e,h:o})})):(f=r.b.a,s=r.c,I(function(e,n,r,t,o,a,i,c){return V(q,$(Ql,t,0,c),Xl,Il,eu,{cG:s,bf:z(du,Qr(s),f),d:r,e:n,f:a,az:S(Jl,M,w,D,N),g:e,h:o})}));case 2:var d,v,e=z(au,r.b,r.c);return e.$?(d=e.a.a,C=(n=e.b).a,P=n.b,I(function(e,n,r,t,o,a,i,c){var l=i.a,i=i.b;return V(q,$(Ql,t,0,c),mu,Yl,eu,{ae:i,bO:l.bO,ck:l.ck,cl:l.cl,cm:l.cm,c1:d,d:r,e:n,bo:C,f:a,az:S(Jl,M,w,D,N),g:e,bu:P,h:o})})):(v=e.a,I(function(e,n,r,t,o,a,i,c){var l=i.a,i=i.b;return V(q,$(Ql,t,0,c),vu,Ol,eu,{ae:i,bO:l.bO,ck:l.ck,cl:l.cl,cm:l.cm,c0:v,d:r,e:n,f:a,az:S(Jl,M,w,D,N),g:e,h:o})}));default:var m,p,g,b,h,x,C,P,y,T,L,n=S(su,r.b,r.c,r.d,r.e);return n.$?(m=(e=n.a).a,p=e.b,g=(e=n.b).a,b=e.b,h=(e=n.c).a,x=e.b,C=(e=n.d).a,P=e.b,I(function(e,n,r,t,o,a,i,c){var l=i.a,i=i.b;return V(q,$(Ql,t,0,c),mu,Kl,eu,{cJ:m,cL:p,cM:x,cN:b,ae:i,bO:l.bO,ck:l.ck,cl:l.cl,cm:l.cm,c4:h,d:r,e:n,bo:C,f:a,az:S(Jl,M,w,D,N),dq:g,g:e,bu:P,h:o})})):(y=n.a,T=n.b,L=n.c,I(function(e,n,r,t,o,a,i,c){var l=i.a,i=i.b;return V(q,$(Ql,t,0,c),vu,Zl,eu,{cI:y,ae:i,bO:l.bO,ck:l.ck,cl:l.cl,cm:l.cm,c3:L,d:r,e:n,f:a,az:S(Jl,M,w,D,N),dp:T,g:e,h:o})}))}}())}),fe=d(function(e,n,r){return{$:3,a:e,b:n,c:r}})({dP:1,d_:3,ey:4}),yu=(X=p([{aP:z(r,0,1)},{aP:z(r,1,1)},{aP:z(r,2,1)},{aP:z(r,3,1)},{aP:z(r,0,-1)},{aP:z(r,1,-1)},{aP:z(r,2,-1)},{aP:z(r,3,-1)}]),oe=p([{a:0,b:1,c:2},{a:0,b:2,c:3},{a:4,b:6,c:5},{a:4,b:7,c:6},{a:4,b:5,c:1},{a:1,b:0,c:4},{a:5,b:6,c:2},{a:2,b:1,c:5},{a:6,b:7,c:3},{a:3,b:2,c:6},{a:7,b:4,c:0},{a:0,b:3,c:7}]),z(fe,X,oe)),Tu={src:"\n        precision highp float;\n        \n        attribute highp vec2 quadShadowVertex;\n        \n        uniform highp vec4 modelScale;\n        uniform highp mat4 modelMatrix;\n        uniform highp mat4 viewMatrix;\n        uniform highp mat4 projectionMatrix;\n        uniform highp mat4 sceneProperties;\n        uniform highp mat4 shadowLight;\n        uniform highp mat4 quadVertexPositions;\n        \n        const lowp float kDirectionalLight = 1.0;\n        const lowp float kPointLight = 2.0;\n        \n        void getQuadVertex(int quadVertexIndex, mat4 quadVertexPositions, out vec3 position, out vec3 normal, out vec3 tangent) {\n            vec3 next = vec3(0.0, 0.0, 0.0);\n            vec3 prev = vec3(0.0, 0.0, 0.0);\n            if (quadVertexIndex == 0) {\n                prev = quadVertexPositions[3].xyz;\n                position = quadVertexPositions[0].xyz;\n                next = quadVertexPositions[1].xyz;\n                tangent = normalize(next - position);\n            } else if (quadVertexIndex == 1) {\n                prev = quadVertexPositions[0].xyz;\n                position = quadVertexPositions[1].xyz;\n                next = quadVertexPositions[2].xyz;\n                tangent = normalize(position - prev);\n            } else if (quadVertexIndex == 2) {\n                prev = quadVertexPositions[1].xyz;\n                position = quadVertexPositions[2].xyz;\n                next = quadVertexPositions[3].xyz;\n                tangent = normalize(position - next);\n            } else {\n                prev = quadVertexPositions[2].xyz;\n                position = quadVertexPositions[3].xyz;\n                next = quadVertexPositions[0].xyz;\n                tangent = normalize(prev - position);\n            }\n            normal = normalize(cross(next - position, prev - position));\n        }\n        \n        vec4 getWorldPosition(vec3 modelPosition, vec4 modelScale, mat4 modelMatrix) {\n            vec4 scaledPosition = vec4(modelScale.xyz * modelPosition, 1.0);\n            return modelMatrix * scaledPosition;\n        }\n        \n        vec3 safeNormalize(vec3 vector) {\n            if (vector == vec3(0.0, 0.0, 0.0)) {\n                return vector;\n            } else {\n                return normalize(vector);\n            }\n        }\n        \n        vec3 getWorldNormal(vec3 modelNormal, vec4 modelScale, mat4 modelMatrix) {\n            vec3 normalScale = vec3(modelScale.w / modelScale.x, modelScale.w / modelScale.y, modelScale.w / modelScale.z);\n            return (modelMatrix * vec4(safeNormalize(normalScale * modelNormal), 0.0)).xyz;\n        }\n        \n        vec3 getDirectionToLight(vec3 surfacePosition, vec4 xyz_type, vec4 rgb_parameter) {\n            float lightType = xyz_type.w;\n            if (lightType == kDirectionalLight) {\n                return xyz_type.xyz;\n            } else if (lightType == kPointLight) {\n                vec3 lightPosition = xyz_type.xyz;\n                return normalize(lightPosition - surfacePosition);\n            } else {\n                return vec3(0.0, 0.0, 0.0);\n            }\n        }\n        \n        vec4 shadowVertexPosition(vec3 position, vec3 normal, mat4 shadowLight, vec4 modelScale, mat4 modelMatrix, mat4 viewMatrix, mat4 projectionMatrix, mat4 sceneProperties) {\n            vec4 worldPosition = getWorldPosition(position, modelScale, modelMatrix);\n            vec3 worldNormal = getWorldNormal(normal, vec4(modelScale.xyz, 1.0), modelMatrix);\n            vec4 xyz_type = shadowLight[0];\n            vec4 rgb_parameter = shadowLight[1];\n            vec3 directionToLight = getDirectionToLight(worldPosition.xyz, xyz_type, rgb_parameter);\n            vec3 offset = vec3(0.0, 0.0, 0.0);\n            float sceneDiameter = sceneProperties[3][1];\n            if (dot(directionToLight, worldNormal) <= 0.0) {\n                offset = -sceneDiameter * directionToLight;\n            } else {\n                offset = -0.001 * sceneDiameter * directionToLight;\n            }\n            vec4 offsetPosition = worldPosition + vec4(offset, 0.0);\n            return projectionMatrix * (viewMatrix * offsetPosition);\n        }\n        \n        void main () {\n            vec3 position = vec3(0.0, 0.0, 0.0);\n            vec3 normal = vec3(0.0, 0.0, 0.0);\n            vec3 tangent = vec3(0.0, 0.0, 0.0);\n            getQuadVertex(int(quadShadowVertex.x), quadVertexPositions, position, normal, tangent);\n            normal *= quadShadowVertex.y;\n            gl_Position = shadowVertexPosition(\n                position,\n                normal,\n                shadowLight,\n                modelScale,\n                modelMatrix,\n                viewMatrix,\n                projectionMatrix,\n                sceneProperties\n            );\n        }\n    ",attributes:{quadShadowVertex:"aP"},uniforms:{modelMatrix:"d",modelScale:"e",projectionMatrix:"f",quadVertexPositions:"az",sceneProperties:"g",shadowLight:"cC",viewMatrix:"h"}},Lu={src:"\n        precision lowp float;\n        \n        void main () {\n            gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    ",attributes:{},uniforms:{}},Mu=$(wc,{c$:0,dm:0,dA:15},{bI:7680,bY:519,b4:7680,b5:7683},{bI:7680,bY:519,b4:7680,b5:7682}),wu=$(wc,{c$:0,dm:0,dA:15},{bI:7680,bY:519,b4:7680,b5:7682},{bI:7680,bY:519,b4:7680,b5:7683}),Du=s(function(e,n){return z(h,e?wu:Mu,n)}),Nu=u(function(l,u,f,s){return{$:2,a:I(function(e,n,r,t,o,a,i,c){return V(q,z(Du,t,c),Tu,Lu,yu,{d:r,e:n,f:a,az:S(Jl,l,u,f,s),g:e,cC:i,h:o})})}}),zu=E(function(e,n,r,t,o,a,i){r=V(Pu,r,t,o,a,i),e={a:e,b:n};return e.a?e.b?Hr(p([r,S(Nu,t,o,a,i)])):r:e.b?S(Nu,t,o,a,i):kl}),$u=c(function(e,n,r,t,o){return G(zu,!0,!1,e,n,r,t,o)}),Su=s(function(e,n){return V($u,Wr(e),z(_a,$(o,-.5,-.5,0),n),z(_a,$(o,.5,-.5,0),n),z(_a,$(o,.5,.5,0),n),z(_a,$(o,-.5,.5,0),n))}),Vu=function(e){return i(e)+"px"},_u=s(function(e,n){return n.$?t(""):(n=f(n=Pi($(Sl,e,Ci,(e=n.a).j)),{ab:n.ab-75,ac:n.ac-10}),z(a,p([z(A,"position","absolute"),z(A,"left",Vu(n.ab)),z(A,"top",Vu(n.ac)),z(A,"width",Vu(150)),z(A,"text-align","center"),z(A,"color","white"),z(A,"font-size","12px"),z(A,"font-weight","bold")]),p([t(e.bm)])))}),ku=function(e){switch(e.P.$){case 0:return e.I.b?"Walking":"Standing";case 1:return"Attacking";default:return"Fighting"}},Au=s(function(e,n){return z(a,m,p([t(e+(" XP: "+dt(n)))]))}),ae=ce({fV:function(e){return{a:{a9:0,aw:0,aY:cr(0),bd:0,ai:10,M:m,aI:Zt,j:$(Kt,0,0,0),ao:10,Q:z(ht,s(function(e,n){return{$:0,a:{bc:Ut,ai:3,M:m,Y:e,j:n,ao:3,bm:"Goblin (level 2)",a3:n,I:m}}}),p([$(Kt,-3,3,0),$(Kt,-3,-3,0),$(Kt,3,3,0),$(Kt,3,-3,0)])),bS:-1,P:Ot,bs:0,I:m},b:Xt}},gq:function(e){return ro(U(p([Io(z(At,ur,z(Mo,"key",Oo))),jo(z(At,fr,z(Mo,"key",Oo))),Go($(Bt,s(function(e,n){return{$:1,a:z(Ho,e,n)}}),z(Mo,"clientX",wo),z(Mo,"clientY",wo))),Vo(z(to,vr,lr))]),2===e.P.$?p([z(Lo,1e3,function(e){return no})]):m))},gw:be,gz:function(n){return z(a,m,p([z(a,p([z(A,"border","1px solid white"),z(A,"display","inline-block"),z(A,"position","relative"),z(A,"overflow","hidden"),z(A,"user-select","none")]),p([(e={fg:nc,fm:Ua(n),fr:1,fv:{a:si(800),b:si(600)},fE:U(_r(z(ht,s(function(r,e){return z(ht,s(function(e,n){return z(Su,n?Wi:Qi,$(Kt,e-Ki,r-Ki,-.01))}),e)}),Zi)),z(h,z(Su,function(e){switch(e.$){case 0:return Xi;case 1:return Ji;default:return ec}}(n.P),n.j),z(L,Xr,n.Q)))},vl({bb:gl,fg:e.fg,fm:e.fm,fr:e.fr,fv:e.fv,fE:e.fE,aH:pl(bl(80)),aK:hl,aQ:xl,aT:ml})),z(a,m,z(L,function(e){return e.$?t(""):(e=e.a,S(Vl,Ua(n),e.ai,e.ao,e.j))},n.Q)),function(e){var n=f(n=Pi($(Sl,Ua(e),Ci,e.j)),{ab:n.ab-75,ac:n.ac-10});return z(a,p([z(A,"position","absolute"),z(A,"left",Vu(n.ab)),z(A,"top",Vu(n.ac)),z(A,"width",Vu(150)),z(A,"text-align","center"),z(A,"color","white"),z(A,"font-size","12px"),z(A,"font-weight","bold")]),p([t(ku(e))]))}(n),S(Vl,Ua(n),n.ai,n.ao,n.j),$(_l,Ua(n),n.M,n.j),z(a,m,z(L,_u(Ua(n)),n.Q)),z(a,m,z(L,function(e){return e.$?t(""):(e=e.a,$(_l,Ua(n),e.M,e.j))},n.Q))])),z(a,p([z(A,"margin-bottom","20px")]),p([function(e){return z(a,m,p([z(yl,p([Ml(Cl(0)),Pl(!e.aw)]),p([t("Accuracy")])),z(yl,p([Ml(Cl(1)),Pl(1===e.aw)]),p([t("Strength")])),z(yl,p([Ml(Cl(2)),Pl(2===e.aw)]),p([t("Defense")]))]))}(n),function(e){return z(a,m,p([z(Au,"Accuracy",e.a9),z(Au,"Strength",e.bs),z(Au,"Defense",e.bd)]))}(n)])),z(a,m,p([t("Use left and right arrow keys to rotate the screen.")])),z(a,m,p([t("Click on the screen to move to that location.")])),z(a,m,p([t("Click on a monster to attack it.")]))]));var e}});ie={Main:{init:ae(qt(0))(0)}},n.Elm?function e(n,r){for(var t in r)t in n?"init"==t?ne(6):e(n[t],r[t]):n[t]=r[t]}(n.Elm,ie):n.Elm=ie}(this);